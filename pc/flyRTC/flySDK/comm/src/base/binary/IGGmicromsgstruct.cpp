/* sk_mmmicromsgstruct.cpp

  Generated by skxml2struct from micromsg.xml

  Please DO NOT edit unless you know exactly what you are doing.


*/

#include "iTLVPickle.h"

#include "skpbpickle.h"

#include "skmetainfofinder.h"

#include "IGGmicromsgstruct.h"

using namespace Comm;

//add ÁªìÊûÑ‰ΩìÁöÑÊèèËø∞Êï∞ÁªÑ
//Â∞ÜÊèèËø∞Êï∞ÁªÑÊ∑ªÂä†Âà∞g_tMetaIGGStructList
//ÂÆûÁé∞Êï∞ÊçÆËΩ?Êç¢ÁöÑÊé•Â??
#if 1
static const SKMetaField_t g_tMetaFieldListIGGMicroMsgEchoInfo [] = {
	{ "EchoLen", SK_FIELD_OFFSET(IGGMicroMsgEchoInfo_t, iEchoLen), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "EchoStr", SK_FIELD_OFFSET(IGGMicroMsgEchoInfo_t, pcEchoStr), eTypeSKChar, 1, 0, -1,
		"EchoLen", 2, sizeof(char *), sizeof(char), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGBaseRequest [] = {
	{ "SessionKey", SK_FIELD_OFFSET(IGGBaseRequest_t, sSessionKey), eTypeSKChar, 0, 1, 36,
		"", 1, sizeof(char[36]), sizeof(char), 1, 0 },
	{ "Uin", SK_FIELD_OFFSET(IGGBaseRequest_t, iUin), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "DeviceID", SK_FIELD_OFFSET(IGGBaseRequest_t, cDeviceID), eTypeSKUint8, 0, 1, 16,
		"", 3, sizeof(unsigned char[16]), sizeof(unsigned char), 1, 0 },
	{ "ClientVersion", SK_FIELD_OFFSET(IGGBaseRequest_t, iClientVersion), eTypeSKInt32, 0, 1, -1,
		"", 4, sizeof(int), sizeof(int), 1, 0 },
	{ "DeviceType", SK_FIELD_OFFSET(IGGBaseRequest_t, sDeviceType), eTypeSKChar, 0, 1, 132,
		"", 5, sizeof(char[132]), sizeof(char), 1, 0 },
	{ "Scene", SK_FIELD_OFFSET(IGGBaseRequest_t, iScene), eTypeSKUint32, 0, 0, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Seq", SK_FIELD_OFFSET(IGGBaseRequest_t, iSeq), eTypeSKUint32, 0, 0, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGBuiltinIP [] = {
	{ "type", SK_FIELD_OFFSET(IGGBuiltinIP_t, iType), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "port", SK_FIELD_OFFSET(IGGBuiltinIP_t, iPort), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "IP", SK_FIELD_OFFSET(IGGBuiltinIP_t, sIP), eTypeSKChar, 0, 1, 128,
		"", 3, sizeof(char[128]), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGBuiltinIPList [] = {
	{ "LongConnectIPCount", SK_FIELD_OFFSET(IGGBuiltinIPList_t, iLongConnectIPCount), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ShortConnectIPCount", SK_FIELD_OFFSET(IGGBuiltinIPList_t, iShortConnectIPCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Seq", SK_FIELD_OFFSET(IGGBuiltinIPList_t, iSeq), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "LongConnectIPList", SK_FIELD_OFFSET(IGGBuiltinIPList_t, ptLongConnectIPList), eTypeIGGBuiltinIP, 1, 0, -1,
		"LongConnectIPCount", 3, sizeof(IGGBuiltinIP_t *), sizeof(IGGBuiltinIP_t), 0, 0 },
	{ "ShortConnectIPList", SK_FIELD_OFFSET(IGGBuiltinIPList_t, ptShortConnectIPList), eTypeIGGBuiltinIP, 1, 0, -1,
		"ShortConnectIPCount", 4, sizeof(IGGBuiltinIP_t *), sizeof(IGGBuiltinIP_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGCDNDnsInfo [] = {
	{ "Ver", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, iVer), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Uin", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, iUin), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ExpireTime", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, iExpireTime), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FrontID", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, iFrontID), eTypeSKInt32, 0, 1, -1,
		"", 4, sizeof(int), sizeof(int), 0, 0 },
	{ "FrontIPCount", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, iFrontIPCount), eTypeSKInt32, 0, 1, -1,
		"", 5, sizeof(int), sizeof(int), 0, 0 },
	{ "FrontIPList", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, ptFrontIPList), eTypeSKBuiltinString, 1, 0, -1,
		"FrontIPCount", 6, sizeof(Comm::SKBuiltinString_t *), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "ZoneDomain", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, pcZoneDomain), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "AuthKey", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, tAuthKey), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "ZoneID", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, iZoneID), eTypeSKInt32, 0, 1, -1,
		"", 9, sizeof(int), sizeof(int), 0, 0 },
	{ "ZoneIPCount", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, iZoneIPCount), eTypeSKInt32, 0, 1, -1,
		"", 10, sizeof(int), sizeof(int), 0, 0 },
	{ "ZoneIPList", SK_FIELD_OFFSET(IGGCDNDnsInfo_t, ptZoneIPList), eTypeSKBuiltinString, 1, 0, -1,
		"ZoneIPCount", 11, sizeof(Comm::SKBuiltinString_t *), sizeof(Comm::SKBuiltinString_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGWebProxyInfo [] = {
	{ "IPCount", SK_FIELD_OFFSET(IGGWebProxyInfo_t, iIPCount), eTypeSKInt32, 0, 1, -1,
		"", 1, sizeof(int), sizeof(int), 0, 0 },
	{ "IPList", SK_FIELD_OFFSET(IGGWebProxyInfo_t, ptIPList), eTypeSKBuiltinString, 1, 0, -1,
		"IPCount", 2, sizeof(Comm::SKBuiltinString_t *), sizeof(Comm::SKBuiltinString_t), 0, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGAuthRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGAuthRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "Account", SK_FIELD_OFFSET(IGGAuthRequest_t, tAccount), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Pwd", SK_FIELD_OFFSET(IGGAuthRequest_t, tPwd), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "TimeZone", SK_FIELD_OFFSET(IGGAuthRequest_t, pcTimeZone), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 },
	{ "Language", SK_FIELD_OFFSET(IGGAuthRequest_t, pcLanguage), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "AuthTicket", SK_FIELD_OFFSET(IGGAuthRequest_t, pcAuthTicket), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 },
	{ "RealCountry", SK_FIELD_OFFSET(IGGAuthRequest_t, pcRealCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "RandomEncryKey", SK_FIELD_OFFSET(IGGAuthRequest_t, tRandomEncryKey), eTypeSKBuiltinString, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },	
};

static const SKMetaField_t g_tMetaFieldListIGGRegRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGRegRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "Account", SK_FIELD_OFFSET(IGGRegRequest_t, tAccount), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Pwd", SK_FIELD_OFFSET(IGGRegRequest_t, tPwd), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Ticket", SK_FIELD_OFFSET(IGGRegRequest_t, tTicket), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "TimeZone", SK_FIELD_OFFSET(IGGRegRequest_t, pcTimeZone), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "Language", SK_FIELD_OFFSET(IGGRegRequest_t, pcLanguage), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGRegRequest_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "RandomEncryKey", SK_FIELD_OFFSET(IGGRegRequest_t, tRandomEncryKey), eTypeSKBuiltinString, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },	
};

static const SKMetaField_t g_tMetaFieldListIGGBaseResponse [] = {
	{ "Ret", SK_FIELD_OFFSET(IGGBaseResponse_t, iRet), eTypeSKInt32, 0, 1, -1,
		"", 1, sizeof(int), sizeof(int), 1, 0 },
	{ "ErrMsg", SK_FIELD_OFFSET(IGGBaseResponse_t, tErrMsg), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Seq", SK_FIELD_OFFSET(IGGBaseResponse_t, iSeq), eTypeSKUint32, 0, 0, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGNetworkControl [] = {
	{ "PortList", SK_FIELD_OFFSET(IGGNetworkControl_t, pcPortList), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "TimeoutList", SK_FIELD_OFFSET(IGGNetworkControl_t, pcTimeoutList), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGPluginKey [] = {
	{ "Key", SK_FIELD_OFFSET(IGGPluginKey_t, pcKey), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "Id", SK_FIELD_OFFSET(IGGPluginKey_t, iId), eTypeSKUint32, 0, 0, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGPluginKeyList [] = {
	{ "Count", SK_FIELD_OFFSET(IGGPluginKeyList_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "List", SK_FIELD_OFFSET(IGGPluginKeyList_t, ptList), eTypeIGGPluginKey, 1, 0, -1,
		"Count", 2, sizeof(IGGPluginKey_t *), sizeof(IGGPluginKey_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGHost [] = {
	{ "Origin", SK_FIELD_OFFSET(IGGHost_t, pcOrigin), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "Substitute", SK_FIELD_OFFSET(IGGHost_t, pcSubstitute), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGHostList [] = {
	{ "Count", SK_FIELD_OFFSET(IGGHostList_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "List", SK_FIELD_OFFSET(IGGHostList_t, ptList), eTypeIGGHost, 1, 0, -1,
		"Count", 2, sizeof(IGGHost_t *), sizeof(IGGHost_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGAuthResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGAuthResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "Uin", SK_FIELD_OFFSET(IGGAuthResponse_t, iUin), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGAuthResponse_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGAuthResponse_t, tNickName), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "BindEmail", SK_FIELD_OFFSET(IGGAuthResponse_t, tBindEmail), eTypeSKBuiltinString, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "BindMobile", SK_FIELD_OFFSET(IGGAuthResponse_t, tBindMobile), eTypeSKBuiltinString, 0, 1, -1,
		"", 6, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Status", SK_FIELD_OFFSET(IGGAuthResponse_t, iStatus), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "SessionKey", SK_FIELD_OFFSET(IGGAuthResponse_t, sSessionKey), eTypeSKChar, 0, 1, 36,
		"", 8, sizeof(char[36]), sizeof(char), 1, 0 },
	{ "ImgBuf", SK_FIELD_OFFSET(IGGAuthResponse_t, tImgBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 9, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "NewVersion", SK_FIELD_OFFSET(IGGAuthResponse_t, iNewVersion), eTypeSKUint32, 0, 0, -1,
		"", 10, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "RegType", SK_FIELD_OFFSET(IGGAuthResponse_t, iRegType), eTypeSKUint32, 0, 0, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ProfileFlag", SK_FIELD_OFFSET(IGGAuthResponse_t, iProfileFlag), eTypeSKUint32, 0, 0, -1,
		"", 12, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserSex", SK_FIELD_OFFSET(IGGAuthResponse_t, iUserSex), eTypeSKUint32, 0, 0, -1,
		"", 13, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserStatus", SK_FIELD_OFFSET(IGGAuthResponse_t, iUserStatus), eTypeSKUint32, 0, 0, -1,
		"", 14, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },	
	{ "FirstName", SK_FIELD_OFFSET(IGGAuthResponse_t, tFirstName), eTypeSKBuiltinString, 0, 1, -1,
		"", 15, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "LastName", SK_FIELD_OFFSET(IGGAuthResponse_t, tLastName), eTypeSKBuiltinString, 0, 1, -1,
		"", 16, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Birthday", SK_FIELD_OFFSET(IGGAuthResponse_t, tBirthday), eTypeIGGBirthday, 0, 0, -1,
		"", 17, sizeof(IGGBirthday_t), sizeof(IGGBirthday_t), 0, 0 },
	{ "WebProxyInfo", SK_FIELD_OFFSET(IGGAuthResponse_t, tWebProxyInfo), eTypeIGGWebProxyInfo, 0, 0, -1,
		"", 18, sizeof(IGGWebProxyInfo_t), sizeof(IGGWebProxyInfo_t), 0, 0 },
	{ "SafeUserName", SK_FIELD_OFFSET(IGGAuthResponse_t, tSafeUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 19, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGRegResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGRegResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "Uin", SK_FIELD_OFFSET(IGGRegResponse_t, iUin), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "SessionKey", SK_FIELD_OFFSET(IGGRegResponse_t, sSessionKey), eTypeSKChar, 0, 1, 36,
		"", 3, sizeof(char[36]), sizeof(char), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGRegResponse_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGUserInfoSetRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGUserInfoSetRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "FirstName", SK_FIELD_OFFSET(IGGUserInfoSetRequest_t, tFirstName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "LastName", SK_FIELD_OFFSET(IGGUserInfoSetRequest_t, tLastName), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },	
	{ "ImgBuf", SK_FIELD_OFFSET(IGGUserInfoSetRequest_t, tImgBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "UserSex", SK_FIELD_OFFSET(IGGUserInfoSetRequest_t, iUserSex), eTypeSKUint32, 0, 0, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Birthday", SK_FIELD_OFFSET(IGGUserInfoSetRequest_t, tBirthday), eTypeIGGBirthday, 0, 0, -1,
		"", 6, sizeof(IGGBirthday_t), sizeof(IGGBirthday_t), 0, 0 },	
};

static const SKMetaField_t g_tMetaFieldListIGGUserInfoSetResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGUserInfoSetResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGCmdItem [] = {
	{ "CmdId", SK_FIELD_OFFSET(IGGCmdItem_t, iCmdId), eTypeSKInt32, 0, 1, -1,
		"", 1, sizeof(int), sizeof(int), 1, 0 },
	{ "CmdBuf", SK_FIELD_OFFSET(IGGCmdItem_t, tCmdBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGNewInitRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGNewInitRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGNewInitRequest_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "CurrentSynckey", SK_FIELD_OFFSET(IGGNewInitRequest_t, tCurrentSynckey), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "MaxSynckey", SK_FIELD_OFFSET(IGGNewInitRequest_t, tMaxSynckey), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "Language", SK_FIELD_OFFSET(IGGNewInitRequest_t, pcLanguage), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGNewInitResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGNewInitResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "CurrentSynckey", SK_FIELD_OFFSET(IGGNewInitResponse_t, tCurrentSynckey), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "MaxSynckey", SK_FIELD_OFFSET(IGGNewInitResponse_t, tMaxSynckey), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "ContinueFlag", SK_FIELD_OFFSET(IGGNewInitResponse_t, iContinueFlag), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "SelectBitmap", SK_FIELD_OFFSET(IGGNewInitResponse_t, iSelectBitmap), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "CmdCount", SK_FIELD_OFFSET(IGGNewInitResponse_t, iCmdCount), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "CmdList", SK_FIELD_OFFSET(IGGNewInitResponse_t, ptCmdList), eTypeIGGCmdItem, 1, 0, -1,
		"CmdCount", 7, sizeof(IGGCmdItem_t *), sizeof(IGGCmdItem_t), 0, 0 },
	{ "Ratio", SK_FIELD_OFFSET(IGGNewInitResponse_t, iRatio), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSnsUserInfo [] = {
	{ "SnsFlag", SK_FIELD_OFFSET(IGGSnsUserInfo_t, iSnsFlag), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "SnsBGImgID", SK_FIELD_OFFSET(IGGSnsUserInfo_t, pcSnsBGImgID), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "SnsBGObjectID", SK_FIELD_OFFSET(IGGSnsUserInfo_t, llSnsBGObjectID), eTypeSKUint64, 0, 0, -1,
		"", 3, sizeof(unsigned long long), sizeof(unsigned long long), 0, 0 },
	{ "SnsFlagEx", SK_FIELD_OFFSET(IGGSnsUserInfo_t, iSnsFlagEx), eTypeSKUint32, 0, 0, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGCustomizedInfo [] = {
	{ "BrandFlag", SK_FIELD_OFFSET(IGGCustomizedInfo_t, iBrandFlag), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ExternalInfo", SK_FIELD_OFFSET(IGGCustomizedInfo_t, pcExternalInfo), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "BrandInfo", SK_FIELD_OFFSET(IGGCustomizedInfo_t, pcBrandInfo), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "BrandIconURL", SK_FIELD_OFFSET(IGGCustomizedInfo_t, pcBrandIconURL), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSearchContactRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGSearchContactRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGSearchContactRequest_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSearchContactItem [] = {
	{ "UserName", SK_FIELD_OFFSET(IGGSearchContactItem_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGSearchContactItem_t, tNickName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "PYInitial", SK_FIELD_OFFSET(IGGSearchContactItem_t, tPYInitial), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "QuanPin", SK_FIELD_OFFSET(IGGSearchContactItem_t, tQuanPin), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGSearchContactItem_t, iSex), eTypeSKInt32, 0, 1, -1,
		"", 5, sizeof(int), sizeof(int), 1, 0 },
	{ "ImgBuf", SK_FIELD_OFFSET(IGGSearchContactItem_t, tImgBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 6, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "Province", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcProvince), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "City", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcCity), eTypeSKChar, 1, 0, -1,
		"strlen", 8, sizeof(char *), sizeof(char), 0, 0 },
	{ "Signature", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcSignature), eTypeSKChar, 1, 0, -1,
		"strlen", 9, sizeof(char *), sizeof(char), 0, 0 },
	{ "PersonalCard", SK_FIELD_OFFSET(IGGSearchContactItem_t, iPersonalCard), eTypeSKUint32, 0, 0, -1,
		"", 10, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyFlag", SK_FIELD_OFFSET(IGGSearchContactItem_t, iVerifyFlag), eTypeSKUint32, 0, 0, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyInfo", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcVerifyInfo), eTypeSKChar, 1, 0, -1,
		"strlen", 12, sizeof(char *), sizeof(char), 0, 0 },
	{ "NeedVerify", SK_FIELD_OFFSET(IGGSearchContactItem_t, iNeedVerify), eTypeSKInt32, 0, 1, -1,
		"", 13, sizeof(int), sizeof(int), 1, 0 },
	{ "Weibo", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcWeibo), eTypeSKChar, 1, 0, -1,
		"strlen", 14, sizeof(char *), sizeof(char), 0, 0 },
	{ "Alias", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcAlias), eTypeSKChar, 1, 0, -1,
		"strlen", 15, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboNickname", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcWeiboNickname), eTypeSKChar, 1, 0, -1,
		"strlen", 16, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboFlag", SK_FIELD_OFFSET(IGGSearchContactItem_t, iWeiboFlag), eTypeSKUint32, 0, 0, -1,
		"", 17, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "AlbumStyle", SK_FIELD_OFFSET(IGGSearchContactItem_t, iAlbumStyle), eTypeSKInt32, 0, 0, -1,
		"", 18, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumFlag", SK_FIELD_OFFSET(IGGSearchContactItem_t, iAlbumFlag), eTypeSKInt32, 0, 0, -1,
		"", 19, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumBGImgID", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcAlbumBGImgID), eTypeSKChar, 1, 0, -1,
		"strlen", 20, sizeof(char *), sizeof(char), 0, 0 },
	{ "SnsUserInfo", SK_FIELD_OFFSET(IGGSearchContactItem_t, tSnsUserInfo), eTypeIGGSnsUserInfo, 0, 0, -1,
		"", 21, sizeof(IGGSnsUserInfo_t), sizeof(IGGSnsUserInfo_t), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 22, sizeof(char *), sizeof(char), 0, 0 },
	{ "MyBrandList", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcMyBrandList), eTypeSKChar, 1, 0, -1,
		"strlen", 23, sizeof(char *), sizeof(char), 0, 0 },
	{ "CustomizedInfo", SK_FIELD_OFFSET(IGGSearchContactItem_t, tCustomizedInfo), eTypeIGGCustomizedInfo, 0, 0, -1,
		"", 24, sizeof(IGGCustomizedInfo_t), sizeof(IGGCustomizedInfo_t), 0, 0 },
	{ "BigHeadImgUrl", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcBigHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 25, sizeof(char *), sizeof(char), 0, 0 },
	{ "SmallHeadImgUrl", SK_FIELD_OFFSET(IGGSearchContactItem_t, pcSmallHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 26, sizeof(char *), sizeof(char), 0, 0 },
	{ "SafeUserName", SK_FIELD_OFFSET(IGGSearchContactItem_t, tSafeUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 27, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGSearchContactResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGSearchContactResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGSearchContactResponse_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGSearchContactResponse_t, tNickName), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "PYInitial", SK_FIELD_OFFSET(IGGSearchContactResponse_t, tPYInitial), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "QuanPin", SK_FIELD_OFFSET(IGGSearchContactResponse_t, tQuanPin), eTypeSKBuiltinString, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGSearchContactResponse_t, iSex), eTypeSKInt32, 0, 1, -1,
		"", 6, sizeof(int), sizeof(int), 1, 0 },
	{ "ImgBuf", SK_FIELD_OFFSET(IGGSearchContactResponse_t, tImgBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 7, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "Province", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcProvince), eTypeSKChar, 1, 0, -1,
		"strlen", 8, sizeof(char *), sizeof(char), 0, 0 },
	{ "City", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcCity), eTypeSKChar, 1, 0, -1,
		"strlen", 9, sizeof(char *), sizeof(char), 0, 0 },
	{ "Signature", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcSignature), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 0, 0 },
	{ "PersonalCard", SK_FIELD_OFFSET(IGGSearchContactResponse_t, iPersonalCard), eTypeSKUint32, 0, 0, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyFlag", SK_FIELD_OFFSET(IGGSearchContactResponse_t, iVerifyFlag), eTypeSKUint32, 0, 0, -1,
		"", 12, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyInfo", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcVerifyInfo), eTypeSKChar, 1, 0, -1,
		"strlen", 13, sizeof(char *), sizeof(char), 0, 0 },
	{ "NeedVerify", SK_FIELD_OFFSET(IGGSearchContactResponse_t, iNeedVerify), eTypeSKInt32, 0, 1, -1,
		"", 14, sizeof(int), sizeof(int), 1, 0 },
	{ "Weibo", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcWeibo), eTypeSKChar, 1, 0, -1,
		"strlen", 15, sizeof(char *), sizeof(char), 0, 0 },
	{ "Alias", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcAlias), eTypeSKChar, 1, 0, -1,
		"strlen", 16, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboNickname", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcWeiboNickname), eTypeSKChar, 1, 0, -1,
		"strlen", 17, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboFlag", SK_FIELD_OFFSET(IGGSearchContactResponse_t, iWeiboFlag), eTypeSKUint32, 0, 0, -1,
		"", 18, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "AlbumStyle", SK_FIELD_OFFSET(IGGSearchContactResponse_t, iAlbumStyle), eTypeSKInt32, 0, 0, -1,
		"", 19, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumFlag", SK_FIELD_OFFSET(IGGSearchContactResponse_t, iAlbumFlag), eTypeSKInt32, 0, 0, -1,
		"", 20, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumBGImgID", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcAlbumBGImgID), eTypeSKChar, 1, 0, -1,
		"strlen", 21, sizeof(char *), sizeof(char), 0, 0 },
	{ "SnsUserInfo", SK_FIELD_OFFSET(IGGSearchContactResponse_t, tSnsUserInfo), eTypeIGGSnsUserInfo, 0, 0, -1,
		"", 22, sizeof(IGGSnsUserInfo_t), sizeof(IGGSnsUserInfo_t), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 23, sizeof(char *), sizeof(char), 0, 0 },
	{ "MyBrandList", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcMyBrandList), eTypeSKChar, 1, 0, -1,
		"strlen", 24, sizeof(char *), sizeof(char), 0, 0 },
	{ "CustomizedInfo", SK_FIELD_OFFSET(IGGSearchContactResponse_t, tCustomizedInfo), eTypeIGGCustomizedInfo, 0, 0, -1,
		"", 25, sizeof(IGGCustomizedInfo_t), sizeof(IGGCustomizedInfo_t), 0, 0 },
	{ "ContactCount", SK_FIELD_OFFSET(IGGSearchContactResponse_t, iContactCount), eTypeSKUint32, 0, 0, -1,
		"", 26, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ContactList", SK_FIELD_OFFSET(IGGSearchContactResponse_t, ptContactList), eTypeIGGSearchContactItem, 1, 0, -1,
		"ContactCount", 27, sizeof(IGGSearchContactItem_t *), sizeof(IGGSearchContactItem_t), 0, 0 },
	{ "BigHeadImgUrl", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcBigHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 28, sizeof(char *), sizeof(char), 0, 0 },
	{ "SmallHeadImgUrl", SK_FIELD_OFFSET(IGGSearchContactResponse_t, pcSmallHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 29, sizeof(char *), sizeof(char), 0, 0 },
	{ "SafeUserName", SK_FIELD_OFFSET(IGGSearchContactResponse_t, tSafeUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 30, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGVerifyUser [] = {
	{ "Value", SK_FIELD_OFFSET(IGGVerifyUser_t, pcValue), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "VerifyUserTicket", SK_FIELD_OFFSET(IGGVerifyUser_t, pcVerifyUserTicket), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGVerifyUserRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGVerifyUserRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "Opcode", SK_FIELD_OFFSET(IGGVerifyUserRequest_t, iOpcode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyUserListSize", SK_FIELD_OFFSET(IGGVerifyUserRequest_t, iVerifyUserListSize), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyUserList", SK_FIELD_OFFSET(IGGVerifyUserRequest_t, ptVerifyUserList), eTypeIGGVerifyUser, 1, 0, -1,
		"VerifyUserListSize", 4, sizeof(IGGVerifyUser_t *), sizeof(IGGVerifyUser_t), 0, 0 },
	{ "VerifyContent", SK_FIELD_OFFSET(IGGVerifyUserRequest_t, pcVerifyContent), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "SceneListCount", SK_FIELD_OFFSET(IGGVerifyUserRequest_t, iSceneListCount), eTypeSKUint32, 0, 0, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "SceneList", SK_FIELD_OFFSET(IGGVerifyUserRequest_t, piSceneList), eTypeSKUint32, 1, 0, -1,
		"SceneListCount", 7, sizeof(unsigned int *), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGVerifyUserResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGVerifyUserResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "Opcode", SK_FIELD_OFFSET(IGGVerifyUserResponse_t, iOpcode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGVerifyUserResponse_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGPossibleFriend [] = {
	{ "UserName", SK_FIELD_OFFSET(IGGPossibleFriend_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 1, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGPossibleFriend_t, pcNickName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
	{ "PYInitial", SK_FIELD_OFFSET(IGGPossibleFriend_t, pcPYInitial), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
	{ "QuanPin", SK_FIELD_OFFSET(IGGPossibleFriend_t, pcQuanPin), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGPossibleFriend_t, iSex), eTypeSKInt32, 0, 1, -1,
		"", 5, sizeof(int), sizeof(int), 1, 0 },
	{ "ImgFlag", SK_FIELD_OFFSET(IGGPossibleFriend_t, iImgFlag), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ContactType", SK_FIELD_OFFSET(IGGPossibleFriend_t, iContactType), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "DomainList", SK_FIELD_OFFSET(IGGPossibleFriend_t, pcDomainList), eTypeSKChar, 1, 0, -1,
		"strlen", 8, sizeof(char *), sizeof(char), 1, 0 },
	{ "Source", SK_FIELD_OFFSET(IGGPossibleFriend_t, pcSource), eTypeSKChar, 1, 0, -1,
		"strlen", 9, sizeof(char *), sizeof(char), 1, 0 },
	{ "FriendScene", SK_FIELD_OFFSET(IGGPossibleFriend_t, iFriendScene), eTypeSKUint32, 0, 1, -1,
		"", 10, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ThirdID", SK_FIELD_OFFSET(IGGPossibleFriend_t, pcThirdID), eTypeSKChar, 1, 0, -1,
		"strlen", 11, sizeof(char *), sizeof(char), 1, 0 },
	{ "NeedVerify", SK_FIELD_OFFSET(IGGPossibleFriend_t, iNeedVerify), eTypeSKInt32, 0, 1, -1,
		"", 12, sizeof(int), sizeof(int), 1, 0 },
	{ "FBUserName", SK_FIELD_OFFSET(IGGPossibleFriend_t, pcFBUserName), eTypeSKChar, 1, 0, -1,
				"strlen", 13, sizeof(char *), sizeof(char), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGSyncFriendRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGSyncFriendRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGSyncFriendRequest_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "SyncKey", SK_FIELD_OFFSET(IGGSyncFriendRequest_t, iSyncKey), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Scene", SK_FIELD_OFFSET(IGGSyncFriendRequest_t, iScene), eTypeSKInt32, 0, 1, -1,
		"", 4, sizeof(int), sizeof(int), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSyncFriendResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGSyncFriendResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "NewSyncKey", SK_FIELD_OFFSET(IGGSyncFriendResponse_t, iNewSyncKey), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ContinueFlag", SK_FIELD_OFFSET(IGGSyncFriendResponse_t, iContinueFlag), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 1, 0 },
	{ "CmdCount", SK_FIELD_OFFSET(IGGSyncFriendResponse_t, iCmdCount), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "CmdList", SK_FIELD_OFFSET(IGGSyncFriendResponse_t, ptCmdList), eTypeIGGCmdItem, 1, 0, -1,
		"CmdCount", 5, sizeof(IGGCmdItem_t *), sizeof(IGGCmdItem_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGRoomInfo [] = {
	{ "UserName", SK_FIELD_OFFSET(IGGRoomInfo_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGRoomInfo_t, tNickName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGChatRoomMember [] = {
	{ "MemberName", SK_FIELD_OFFSET(IGGChatRoomMember_t, tMemberName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "MemberSafeName", SK_FIELD_OFFSET(IGGChatRoomMember_t, tMemberSafeName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGChatRoomMember_t, tNickName), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGChatRoomMember_t, iSex), eTypeSKInt32, 0, 1, -1,
		"", 4, sizeof(int), sizeof(int), 0, 0 },
	{ "Signature", SK_FIELD_OFFSET(IGGChatRoomMember_t, pcSignature), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGChatRoomMember_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 },
	{ "Birthday", SK_FIELD_OFFSET(IGGChatRoomMember_t, tBirthday), eTypeIGGBirthday, 0, 0, -1,
		"", 7, sizeof(IGGBirthday_t), sizeof(IGGBirthday_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGModContact [] = {
	{ "UserName", SK_FIELD_OFFSET(IGGModContact_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGModContact_t, tNickName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "PYInitial", SK_FIELD_OFFSET(IGGModContact_t, tPYInitial), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "QuanPin", SK_FIELD_OFFSET(IGGModContact_t, tQuanPin), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGModContact_t, iSex), eTypeSKInt32, 0, 1, -1,
		"", 5, sizeof(int), sizeof(int), 1, 0 },
	{ "ImgBuf", SK_FIELD_OFFSET(IGGModContact_t, tImgBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 6, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "BitMask", SK_FIELD_OFFSET(IGGModContact_t, iBitMask), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "BitVal", SK_FIELD_OFFSET(IGGModContact_t, iBitVal), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ImgFlag", SK_FIELD_OFFSET(IGGModContact_t, iImgFlag), eTypeSKUint32, 0, 1, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Remark", SK_FIELD_OFFSET(IGGModContact_t, tRemark), eTypeSKBuiltinString, 0, 0, -1,
		"", 10, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "RemarkPYInitial", SK_FIELD_OFFSET(IGGModContact_t, tRemarkPYInitial), eTypeSKBuiltinString, 0, 0, -1,
		"", 11, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "RemarkQuanPin", SK_FIELD_OFFSET(IGGModContact_t, tRemarkQuanPin), eTypeSKBuiltinString, 0, 0, -1,
		"", 12, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "ContactType", SK_FIELD_OFFSET(IGGModContact_t, iContactType), eTypeSKUint32, 0, 0, -1,
		"", 13, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "RoomMemberCount", SK_FIELD_OFFSET(IGGModContact_t, iRoomMemberCount), eTypeSKUint32, 0, 0, -1,
		"", 14, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "RoomMemberList", SK_FIELD_OFFSET(IGGModContact_t, ptRoomMemberList), eTypeIGGChatRoomMember, 1, 0, -1,
		"RoomMemberCount", 15, sizeof(IGGChatRoomMember_t *), sizeof(IGGChatRoomMember_t), 1, 0 },
	{ "DomainList", SK_FIELD_OFFSET(IGGModContact_t, tDomainList), eTypeSKBuiltinString, 0, 0, -1,
		"", 16, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "ChatRoomNotify", SK_FIELD_OFFSET(IGGModContact_t, iChatRoomNotify), eTypeSKUint32, 0, 0, -1,
		"", 17, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "AddContactScene", SK_FIELD_OFFSET(IGGModContact_t, iAddContactScene), eTypeSKUint32, 0, 0, -1,
		"", 18, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Province", SK_FIELD_OFFSET(IGGModContact_t, pcProvince), eTypeSKChar, 1, 0, -1,
		"strlen", 19, sizeof(char *), sizeof(char), 0, 0 },
	{ "City", SK_FIELD_OFFSET(IGGModContact_t, pcCity), eTypeSKChar, 1, 0, -1,
		"strlen", 20, sizeof(char *), sizeof(char), 0, 0 },
	{ "Signature", SK_FIELD_OFFSET(IGGModContact_t, pcSignature), eTypeSKChar, 1, 0, -1,
		"strlen", 21, sizeof(char *), sizeof(char), 0, 0 },
	{ "PersonalCard", SK_FIELD_OFFSET(IGGModContact_t, iPersonalCard), eTypeSKUint32, 0, 0, -1,
		"", 22, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "HasWeiXinHdHeadImg", SK_FIELD_OFFSET(IGGModContact_t, iHasWeiXinHdHeadImg), eTypeSKUint32, 0, 0, -1,
		"", 23, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyFlag", SK_FIELD_OFFSET(IGGModContact_t, iVerifyFlag), eTypeSKUint32, 0, 0, -1,
		"", 24, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyInfo", SK_FIELD_OFFSET(IGGModContact_t, pcVerifyInfo), eTypeSKChar, 1, 0, -1,
		"strlen", 25, sizeof(char *), sizeof(char), 0, 0 },
	{ "Level", SK_FIELD_OFFSET(IGGModContact_t, iLevel), eTypeSKInt32, 0, 0, -1,
		"", 26, sizeof(int), sizeof(int), 0, 0 },
	{ "Source", SK_FIELD_OFFSET(IGGModContact_t, iSource), eTypeSKUint32, 0, 0, -1,
		"", 27, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Weibo", SK_FIELD_OFFSET(IGGModContact_t, pcWeibo), eTypeSKChar, 1, 0, -1,
		"strlen", 28, sizeof(char *), sizeof(char), 0, 0 },
	{ "VerifyContent", SK_FIELD_OFFSET(IGGModContact_t, pcVerifyContent), eTypeSKChar, 1, 0, -1,
		"strlen", 29, sizeof(char *), sizeof(char), 0, 0 },
	{ "Alias", SK_FIELD_OFFSET(IGGModContact_t, pcAlias), eTypeSKChar, 1, 0, -1,
		"strlen", 30, sizeof(char *), sizeof(char), 0, 0 },
	{ "ChatRoomOwner", SK_FIELD_OFFSET(IGGModContact_t, pcChatRoomOwner), eTypeSKChar, 1, 0, -1,
		"strlen", 31, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboNickname", SK_FIELD_OFFSET(IGGModContact_t, pcWeiboNickname), eTypeSKChar, 1, 0, -1,
		"strlen", 32, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboFlag", SK_FIELD_OFFSET(IGGModContact_t, iWeiboFlag), eTypeSKUint32, 0, 0, -1,
		"", 33, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "AlbumStyle", SK_FIELD_OFFSET(IGGModContact_t, iAlbumStyle), eTypeSKInt32, 0, 0, -1,
		"", 34, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumFlag", SK_FIELD_OFFSET(IGGModContact_t, iAlbumFlag), eTypeSKInt32, 0, 0, -1,
		"", 35, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumBGImgID", SK_FIELD_OFFSET(IGGModContact_t, pcAlbumBGImgID), eTypeSKChar, 1, 0, -1,
		"strlen", 36, sizeof(char *), sizeof(char), 0, 0 },
	{ "SnsUserInfo", SK_FIELD_OFFSET(IGGModContact_t, tSnsUserInfo), eTypeIGGSnsUserInfo, 0, 0, -1,
		"", 37, sizeof(IGGSnsUserInfo_t), sizeof(IGGSnsUserInfo_t), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGModContact_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 38, sizeof(char *), sizeof(char), 0, 0 },
	{ "BigHeadImgUrl", SK_FIELD_OFFSET(IGGModContact_t, pcBigHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 39, sizeof(char *), sizeof(char), 0, 0 },
	{ "SmallHeadImgUrl", SK_FIELD_OFFSET(IGGModContact_t, pcSmallHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 40, sizeof(char *), sizeof(char), 0, 0 },
	{ "MyBrandList", SK_FIELD_OFFSET(IGGModContact_t, pcMyBrandList), eTypeSKChar, 1, 0, -1,
		"strlen", 41, sizeof(char *), sizeof(char), 0, 0 },
	{ "CustomizedInfo", SK_FIELD_OFFSET(IGGModContact_t, tCustomizedInfo), eTypeIGGCustomizedInfo, 0, 0, -1,
		"", 42, sizeof(IGGCustomizedInfo_t), sizeof(IGGCustomizedInfo_t), 0, 0 },
	{ "ChatRoomData", SK_FIELD_OFFSET(IGGModContact_t, pcChatRoomData), eTypeSKChar, 1, 0, -1,
		"strlen", 43, sizeof(char *), sizeof(char), 0, 0 },
	{ "HeadImgMd5", SK_FIELD_OFFSET(IGGModContact_t, pcHeadImgMd5), eTypeSKChar, 1, 0, -1,
		"strlen", 44, sizeof(char *), sizeof(char), 0, 0 },
	{ "SafeUserName", SK_FIELD_OFFSET(IGGModContact_t, tSafeUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 45, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Birthday", SK_FIELD_OFFSET(IGGModContact_t, tBirthday), eTypeIGGBirthday, 0, 0, -1,
		"", 46, sizeof(IGGBirthday_t), sizeof(IGGBirthday_t), 0, 0 },
	{ "Age", SK_FIELD_OFFSET(IGGModContact_t, iAge), eTypeSKUint32, 0, 0, -1,
		"", 47, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Hobby", SK_FIELD_OFFSET(IGGModContact_t, tHobby), eTypeIGGHobby, 0, 0, -1,
		"", 48, sizeof(IGGHobby_t), sizeof(IGGHobby_t), 0, 0 },
	{ "IntentionFlag", SK_FIELD_OFFSET(IGGModContact_t, iIntentionFlag), eTypeSKUint32, 0, 0, -1,
		"", 49, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MaxMemberCount", SK_FIELD_OFFSET(IGGModContact_t, iMaxMemberCount), eTypeSKUint32, 0, 0, -1,
		"", 50, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Mobile", SK_FIELD_OFFSET(IGGModContact_t, pcMobile), eTypeSKChar, 1, 0, -1,
		"strlen", 51, sizeof(char *), sizeof(char), 0, 0 },
	{ "FBUserID", SK_FIELD_OFFSET(IGGModContact_t, llFBUserID), eTypeSKUint64, 0, 0, -1,
		"", 52, sizeof(unsigned long long), sizeof(unsigned long long), 0, 0 }	
};

static const SKMetaField_t g_tMetaFieldListIGGGetContactRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGGetContactRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "UserCount", SK_FIELD_OFFSET(IGGGetContactRequest_t, iUserCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserNameList", SK_FIELD_OFFSET(IGGGetContactRequest_t, ptUserNameList), eTypeSKBuiltinString, 1, 0, -1,
		"UserCount", 3, sizeof(Comm::SKBuiltinString_t *), sizeof(Comm::SKBuiltinString_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGGetContactResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGGetContactResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "ContactCount", SK_FIELD_OFFSET(IGGGetContactResponse_t, iContactCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ContactList", SK_FIELD_OFFSET(IGGGetContactResponse_t, ptContactList), eTypeIGGModContact, 1, 0, -1,
		"ContactCount", 3, sizeof(IGGModContact_t *), sizeof(IGGModContact_t), 0, 0 },
	{ "Ret", SK_FIELD_OFFSET(IGGGetContactResponse_t, piRet), eTypeSKInt32, 1, 0, -1,
		"ContactCount", 4, sizeof(int *), sizeof(int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDelContact [] = {
	{ "UserName", SK_FIELD_OFFSET(IGGDelContact_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGAuthBySKRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGAuthBySKRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGAuthBySKResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGAuthBySKResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "Uin", SK_FIELD_OFFSET(IGGAuthBySKResponse_t, iUin), eTypeSKUint32, 0, 0, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "NewVersion", SK_FIELD_OFFSET(IGGAuthBySKResponse_t, iNewVersion), eTypeSKUint32, 0, 0, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "WebProxyInfo", SK_FIELD_OFFSET(IGGAuthBySKResponse_t, tWebProxyInfo), eTypeIGGWebProxyInfo, 0, 0, -1,
		"", 4, sizeof(IGGWebProxyInfo_t), sizeof(IGGWebProxyInfo_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGUploadVideoRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
	{ "FromUserName", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, pcFromUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, pcToUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "ThumbTotalLen", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, iThumbTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ThumbStartPos", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, iThumbStartPos), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ThumbData", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, tThumbData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 7, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "VideoTotalLen", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, iVideoTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "VideoStartPos", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, iVideoStartPos), eTypeSKUint32, 0, 1, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "VideoData", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, tVideoData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 10, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "PlayLength", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, iPlayLength), eTypeSKUint32, 0, 1, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "NetworkEnv", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, iNetworkEnv), eTypeSKUint32, 0, 0, -1,
		"", 12, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "CameraType", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, iCameraType), eTypeSKUint32, 0, 0, -1,
		"", 13, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "FuncFlag", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, iFuncFlag), eTypeSKUint32, 0, 0, -1,
		"", 14, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "MsgSource", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, pcMsgSource), eTypeSKChar, 1, 0, -1,
		"strlen", 15, sizeof(char *), sizeof(char), 1, 0 },
	{ "CDNVideoUrl", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, pcCDNVideoUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 16, sizeof(char *), sizeof(char), 1, 0 },
	{ "AESKey", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, pcAESKey), eTypeSKChar, 1, 0, -1,
		"strlen", 17, sizeof(char *), sizeof(char), 1, 0 },
	{ "EncryVer", SK_FIELD_OFFSET(IGGUploadVideoRequest_t, iEncryVer), eTypeSKInt32, 0, 0, -1,
		"", 18, sizeof(int), sizeof(int), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGUploadVideoResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGUploadVideoResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGUploadVideoResponse_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
	{ "MsgId", SK_FIELD_OFFSET(IGGUploadVideoResponse_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ThumbStartPos", SK_FIELD_OFFSET(IGGUploadVideoResponse_t, iThumbStartPos), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "VideoStartPos", SK_FIELD_OFFSET(IGGUploadVideoResponse_t, iVideoStartPos), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDownloadVideoRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGDownloadVideoRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "MsgId", SK_FIELD_OFFSET(IGGDownloadVideoRequest_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGDownloadVideoRequest_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGDownloadVideoRequest_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "NetworkEnv", SK_FIELD_OFFSET(IGGDownloadVideoRequest_t, iNetworkEnv), eTypeSKUint32, 0, 0, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "MxPackSize", SK_FIELD_OFFSET(IGGDownloadVideoRequest_t, iMxPackSize), eTypeSKUint32, 0, 0, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDownloadVideoResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGDownloadVideoResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "MsgId", SK_FIELD_OFFSET(IGGDownloadVideoResponse_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGDownloadVideoResponse_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGDownloadVideoResponse_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Data", SK_FIELD_OFFSET(IGGDownloadVideoResponse_t, tData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDownloadMsgImgRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGDownloadMsgImgRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "MsgId", SK_FIELD_OFFSET(IGGDownloadMsgImgRequest_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "FromUserName", SK_FIELD_OFFSET(IGGDownloadMsgImgRequest_t, pcFromUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGDownloadMsgImgRequest_t, pcToUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGDownloadMsgImgRequest_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGDownloadMsgImgRequest_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "DataLen", SK_FIELD_OFFSET(IGGDownloadMsgImgRequest_t, iDataLen), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "CompressType", SK_FIELD_OFFSET(IGGDownloadMsgImgRequest_t, iCompressType), eTypeSKUint32, 0, 0, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDownloadMsgImgResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGDownloadMsgImgResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "MsgId", SK_FIELD_OFFSET(IGGDownloadMsgImgResponse_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "FromUserName", SK_FIELD_OFFSET(IGGDownloadMsgImgResponse_t, pcFromUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGDownloadMsgImgResponse_t, pcToUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGDownloadMsgImgResponse_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGDownloadMsgImgResponse_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "DataLen", SK_FIELD_OFFSET(IGGDownloadMsgImgResponse_t, iDataLen), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Data", SK_FIELD_OFFSET(IGGDownloadMsgImgResponse_t, tData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGUploadMsgImgRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
	{ "FromUserName", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, pcFromUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, pcToUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "DataLen", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iDataLen), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Data", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, tData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "MsgType", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iMsgType), eTypeSKUint32, 0, 0, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "MsgSource", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, pcMsgSource), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 1, 0 },
	{ "CompressType", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iCompressType), eTypeSKUint32, 0, 0, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "NetType", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iNetType), eTypeSKInt32, 0, 0, -1,
		"", 12, sizeof(int), sizeof(int), 0, 0 },
	{ "PhotoFrom", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iPhotoFrom), eTypeSKInt32, 0, 0, -1,
		"", 13, sizeof(int), sizeof(int), 0, 0 },
	{ "MediaId", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, pcMediaId), eTypeSKChar, 1, 0, -1,
		"strlen", 14, sizeof(char *), sizeof(char), 1, 0 },
	{ "CDNBigImgUrl", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, pcCDNBigImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 15, sizeof(char *), sizeof(char), 1, 0 },
	{ "CDNMidImgUrl", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, pcCDNMidImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 16, sizeof(char *), sizeof(char), 1, 0 },
	{ "AESKey", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, pcAESKey), eTypeSKChar, 1, 0, -1,
		"strlen", 17, sizeof(char *), sizeof(char), 1, 0 },
	{ "EncryVer", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iEncryVer), eTypeSKInt32, 0, 0, -1,
		"", 18, sizeof(int), sizeof(int), 1, 0 },
	{ "CDNBigImgSize", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iCDNBigImgSize), eTypeSKInt32, 0, 0, -1,
		"", 19, sizeof(int), sizeof(int), 1, 0 },
	{ "CDNMidImgSize", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, iCDNMidImgSize), eTypeSKInt32, 0, 0, -1,
		"", 20, sizeof(int), sizeof(int), 1, 0 },
	{ "MD5", SK_FIELD_OFFSET(IGGUploadMsgImgRequest_t, pcMD5), eTypeSKChar, 1, 0, -1,
		"strlen", 21, sizeof(char *), sizeof(char), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGUploadMsgImgResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGUploadMsgImgResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "MsgId", SK_FIELD_OFFSET(IGGUploadMsgImgResponse_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGUploadMsgImgResponse_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
	{ "FromUserName", SK_FIELD_OFFSET(IGGUploadMsgImgResponse_t, pcFromUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGUploadMsgImgResponse_t, pcToUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 1, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGUploadMsgImgResponse_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGUploadMsgImgResponse_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "DataLen", SK_FIELD_OFFSET(IGGUploadMsgImgResponse_t, iDataLen), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "CreateTime", SK_FIELD_OFFSET(IGGUploadMsgImgResponse_t, iCreateTime), eTypeSKUint32, 0, 1, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 1, 0 }
};


//ÂèëÈ?ÅÊ∂àÊÅ?
static const SKMetaField_t g_tMetaFieldListIGGMicroMsgRequest [] = {
	{ "FromUserName", SK_FIELD_OFFSET(IGGMicroMsgRequest_t, tFromUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGMicroMsgRequest_t, tToUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Type", SK_FIELD_OFFSET(IGGMicroMsgRequest_t, iType), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Content", SK_FIELD_OFFSET(IGGMicroMsgRequest_t, pcContent), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "CreateTime", SK_FIELD_OFFSET(IGGMicroMsgRequest_t, iCreateTime), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGMicroMsgRequest_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 1, 0 },
	{ "MsgSource", SK_FIELD_OFFSET(IGGMicroMsgRequest_t, pcMsgSource), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 1, 0 },
	{ "EmojiFlag", SK_FIELD_OFFSET(IGGMicroMsgRequest_t, iEmojiFlag), eTypeSKUint32, 0, 0, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGSendMsgRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGSendMsgRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "Count", SK_FIELD_OFFSET(IGGSendMsgRequest_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "List", SK_FIELD_OFFSET(IGGSendMsgRequest_t, ptList), eTypeIGGMicroMsgRequest, 1, 0, -1,
		"Count", 3, sizeof(IGGMicroMsgRequest_t *), sizeof(IGGMicroMsgRequest_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGMicroMsgResponse [] = {
	{ "Ret", SK_FIELD_OFFSET(IGGMicroMsgResponse_t, iRet), eTypeSKInt32, 0, 1, -1,
		"", 1, sizeof(int), sizeof(int), 1, 0 },
	{ "FromUserName", SK_FIELD_OFFSET(IGGMicroMsgResponse_t, tFromUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGMicroMsgResponse_t, tToUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "MsgId", SK_FIELD_OFFSET(IGGMicroMsgResponse_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGMicroMsgResponse_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 1, 0 },
	{ "CreateTime", SK_FIELD_OFFSET(IGGMicroMsgResponse_t, iCreateTime), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Type", SK_FIELD_OFFSET(IGGMicroMsgResponse_t, iType), eTypeSKUint32, 0, 0, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSendMsgResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGSendMsgResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "Count", SK_FIELD_OFFSET(IGGSendMsgResponse_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "List", SK_FIELD_OFFSET(IGGSendMsgResponse_t, ptList), eTypeIGGMicroMsgResponse, 1, 0, -1,
		"Count", 3, sizeof(IGGMicroMsgResponse_t *), sizeof(IGGMicroMsgResponse_t), 1, 0 }
};


//ÂêåÊ?•Ê∂àÊÅ?

static const SKMetaField_t g_tMetaFieldListIGGAddMsg [] = {
	{ "MsgId", SK_FIELD_OFFSET(IGGAddMsg_t, iMsgId), eTypeSKInt32, 0, 1, -1,
		"", 1, sizeof(int), sizeof(int), 1, 0 },
	{ "FromUserName", SK_FIELD_OFFSET(IGGAddMsg_t, tFromUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGAddMsg_t, tToUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "MsgType", SK_FIELD_OFFSET(IGGAddMsg_t, iMsgType), eTypeSKInt32, 0, 1, -1,
		"", 4, sizeof(int), sizeof(int), 1, 0 },
	{ "Content", SK_FIELD_OFFSET(IGGAddMsg_t, tContent), eTypeSKBuiltinString, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Status", SK_FIELD_OFFSET(IGGAddMsg_t, iStatus), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ImgStatus", SK_FIELD_OFFSET(IGGAddMsg_t, iImgStatus), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ImgBuf", SK_FIELD_OFFSET(IGGAddMsg_t, tImgBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "CreateTime", SK_FIELD_OFFSET(IGGAddMsg_t, iCreateTime), eTypeSKUint32, 0, 1, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "MsgSource", SK_FIELD_OFFSET(IGGAddMsg_t, pcMsgSource), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 1, 0 },
	{ "PushContent", SK_FIELD_OFFSET(IGGAddMsg_t, pcPushContent), eTypeSKChar, 1, 0, -1,
		"strlen", 11, sizeof(char *), sizeof(char), 0, 0 }
};



static const SKMetaField_t g_tMetaFieldListIGGCmdList [] = {
	{ "Count", SK_FIELD_OFFSET(IGGCmdList_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "List", SK_FIELD_OFFSET(IGGCmdList_t, ptList), eTypeIGGCmdItem, 1, 0, -1,
		"Count", 2, sizeof(IGGCmdItem_t *), sizeof(IGGCmdItem_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGOpCmdResp [] = {
	{ "CmdId", SK_FIELD_OFFSET(IGGOpCmdResp_t, iCmdId), eTypeSKInt32, 0, 1, -1,
		"", 1, sizeof(int), sizeof(int), 1, 0 },
	{ "Ret", SK_FIELD_OFFSET(IGGOpCmdResp_t, iRet), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGOpCmdRespList [] = {
	{ "Count", SK_FIELD_OFFSET(IGGOpCmdRespList_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "List", SK_FIELD_OFFSET(IGGOpCmdRespList_t, ptList), eTypeIGGOpCmdResp, 1, 0, -1,
		"Count", 2, sizeof(IGGOpCmdResp_t *), sizeof(IGGOpCmdResp_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGNewSyncRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGNewSyncRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "Oplog", SK_FIELD_OFFSET(IGGNewSyncRequest_t, tOplog), eTypeIGGCmdList, 0, 1, -1,
		"", 2, sizeof(IGGCmdList_t), sizeof(IGGCmdList_t), 0, 0 },
	{ "Selector", SK_FIELD_OFFSET(IGGNewSyncRequest_t, iSelector), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "KeyBuf", SK_FIELD_OFFSET(IGGNewSyncRequest_t, tKeyBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "Scene", SK_FIELD_OFFSET(IGGNewSyncRequest_t, iScene), eTypeSKUint32, 0, 0, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGNewSyncResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGNewSyncResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "Ret", SK_FIELD_OFFSET(IGGNewSyncResponse_t, iRet), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "CmdList", SK_FIELD_OFFSET(IGGNewSyncResponse_t, tCmdList), eTypeIGGCmdList, 0, 1, -1,
		"", 3, sizeof(IGGCmdList_t), sizeof(IGGCmdList_t), 0, 0 },
	{ "ContinueFlag", SK_FIELD_OFFSET(IGGNewSyncResponse_t, iContinueFlag), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "KeyBuf", SK_FIELD_OFFSET(IGGNewSyncResponse_t, tKeyBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "Status", SK_FIELD_OFFSET(IGGNewSyncResponse_t, iStatus), eTypeSKUint32, 0, 0, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "OpCmdResp", SK_FIELD_OFFSET(IGGNewSyncResponse_t, tOpCmdResp), eTypeIGGOpCmdRespList, 0, 1, -1,
		"", 7, sizeof(IGGOpCmdRespList_t), sizeof(IGGOpCmdRespList_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSyncRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGSyncRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGSyncRequest_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "SyncKey", SK_FIELD_OFFSET(IGGSyncRequest_t, iSyncKey), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Scene", SK_FIELD_OFFSET(IGGSyncRequest_t, iScene), eTypeSKInt32, 0, 1, -1,
		"", 4, sizeof(int), sizeof(int), 1, 0 },
	{ "Option", SK_FIELD_OFFSET(IGGSyncRequest_t, iOption), eTypeSKInt32, 0, 1, -1,
		"", 5, sizeof(int), sizeof(int), 1, 0 },
	{ "Oplog", SK_FIELD_OFFSET(IGGSyncRequest_t, tOplog), eTypeIGGCmdList, 0, 1, -1,
		"", 6, sizeof(IGGCmdList_t), sizeof(IGGCmdList_t), 1, 0 },
	{ "KeyBuf", SK_FIELD_OFFSET(IGGSyncRequest_t, pcKeyBuf), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSyncResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGSyncResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "NewSyncKey", SK_FIELD_OFFSET(IGGSyncResponse_t, iNewSyncKey), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ContinueFlag", SK_FIELD_OFFSET(IGGSyncResponse_t, iContinueFlag), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 1, 0 },
	{ "CmdCount", SK_FIELD_OFFSET(IGGSyncResponse_t, iCmdCount), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "CmdList", SK_FIELD_OFFSET(IGGSyncResponse_t, ptCmdList), eTypeIGGCmdItem, 1, 0, -1,
		"CmdCount", 5, sizeof(IGGCmdItem_t *), sizeof(IGGCmdItem_t), 1, 0 },
	{ "OOBCount", SK_FIELD_OFFSET(IGGSyncResponse_t, iOOBCount), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "OOBList", SK_FIELD_OFFSET(IGGSyncResponse_t, ptOOBList), eTypeIGGCmdItem, 1, 0, -1,
		"OOBCount", 7, sizeof(IGGCmdItem_t *), sizeof(IGGCmdItem_t), 1, 0 },
	{ "KeyBuf", SK_FIELD_OFFSET(IGGSyncResponse_t, pcKeyBuf), eTypeSKChar, 1, 0, -1,
		"strlen", 8, sizeof(char *), sizeof(char), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGBatchGetHeadImgRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGBatchGetHeadImgRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "Count", SK_FIELD_OFFSET(IGGBatchGetHeadImgRequest_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "UserNameList", SK_FIELD_OFFSET(IGGBatchGetHeadImgRequest_t, ptUserNameList), eTypeSKBuiltinString, 1, 0, -1,
		"Count", 3, sizeof(Comm::SKBuiltinString_t *), sizeof(Comm::SKBuiltinString_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGImgPair [] = {
	{ "ImgBuf", SK_FIELD_OFFSET(IGGImgPair_t, tImgBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "Username", SK_FIELD_OFFSET(IGGImgPair_t, tUsername), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGBatchGetHeadImgResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGBatchGetHeadImgResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "Count", SK_FIELD_OFFSET(IGGBatchGetHeadImgResponse_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ImgPairList", SK_FIELD_OFFSET(IGGBatchGetHeadImgResponse_t, ptImgPairList), eTypeIGGImgPair, 1, 0, -1,
		"Count", 3, sizeof(IGGImgPair_t *), sizeof(IGGImgPair_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGUploadHDHeadImgRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "HeadImgType", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, iHeadImgType), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Data", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, tData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "ImgHash", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, pcImgHash), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "MD5", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, pcMD5), eTypeSKChar, 1, 0, -1,
		"strlen", 8, sizeof(char *), sizeof(char), 0, 0 },
	{ "CDNImgUrl", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, pcCDNImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 9, sizeof(char *), sizeof(char), 1, 0 },
	{ "AESKey", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, pcAESKey), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 1, 0 },
	{ "EncryVer", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, iEncryVer), eTypeSKInt32, 0, 0, -1,
		"", 11, sizeof(int), sizeof(int), 1, 0 },
	{ "CDNImgSize", SK_FIELD_OFFSET(IGGUploadHDHeadImgRequest_t, iCDNImgSize), eTypeSKInt32, 0, 0, -1,
		"", 12, sizeof(int), sizeof(int), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGUploadHDHeadImgResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGUploadHDHeadImgResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGUploadHDHeadImgResponse_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGUploadHDHeadImgResponse_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FinalImgMd5sum", SK_FIELD_OFFSET(IGGUploadHDHeadImgResponse_t, pcFinalImgMd5sum), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 },
	{ "ImgHash", SK_FIELD_OFFSET(IGGUploadHDHeadImgResponse_t, pcImgHash), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGGetHDHeadImgRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGGetHDHeadImgRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGGetHDHeadImgRequest_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "ImgWidth", SK_FIELD_OFFSET(IGGGetHDHeadImgRequest_t, iImgWidth), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ImgHeight", SK_FIELD_OFFSET(IGGGetHDHeadImgRequest_t, iImgHeight), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ImgFormat", SK_FIELD_OFFSET(IGGGetHDHeadImgRequest_t, pcImgFormat), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGGetHDHeadImgRequest_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGGetHDHeadImgRequest_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "HeadImgType", SK_FIELD_OFFSET(IGGGetHDHeadImgRequest_t, iHeadImgType), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGGetHDHeadImgResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGGetHDHeadImgResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGGetHDHeadImgResponse_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGGetHDHeadImgResponse_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGGetHDHeadImgResponse_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Data", SK_FIELD_OFFSET(IGGGetHDHeadImgResponse_t, tData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGUploadVoiceRequest [] = {
	{ "FromUserName", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, pcFromUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, pcToUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
	{ "Offset", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, iOffset), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Length", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, iLength), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 1, 0 },
	{ "MsgId", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "VoiceLength", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, iVoiceLength), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Data", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, tData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "EndFlag", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, iEndFlag), eTypeSKUint32, 0, 1, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "BaseRequest", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 10, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "CancelFlag", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, iCancelFlag), eTypeSKUint32, 0, 0, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MsgSource", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, pcMsgSource), eTypeSKChar, 1, 0, -1,
		"strlen", 12, sizeof(char *), sizeof(char), 1, 0 },
	{ "VoiceFormat", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, iVoiceFormat), eTypeSKUint32, 0, 0, -1,
		"", 13, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UICreateTime", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, iUICreateTime), eTypeSKUint32, 0, 0, -1,
		"", 14, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ForwardFlag", SK_FIELD_OFFSET(IGGUploadVoiceRequest_t, iForwardFlag), eTypeSKUint32, 0, 0, -1,
		"", 15, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGUploadVoiceResponse [] = {
	{ "FromUserName", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, pcFromUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 1, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, pcToUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
	{ "Offset", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, iOffset), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Length", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, iLength), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "CreateTime", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, iCreateTime), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 1, 0 },
	{ "MsgId", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "VoiceLength", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, iVoiceLength), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "EndFlag", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, iEndFlag), eTypeSKUint32, 0, 1, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "BaseResponse", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 10, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "CancelFlag", SK_FIELD_OFFSET(IGGUploadVoiceResponse_t, iCancelFlag), eTypeSKUint32, 0, 0, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDownloadVoiceRequest [] = {
	{ "MsgId", SK_FIELD_OFFSET(IGGDownloadVoiceRequest_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Offset", SK_FIELD_OFFSET(IGGDownloadVoiceRequest_t, iOffset), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Length", SK_FIELD_OFFSET(IGGDownloadVoiceRequest_t, iLength), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGDownloadVoiceRequest_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "BaseRequest", SK_FIELD_OFFSET(IGGDownloadVoiceRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 5, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDownloadVoiceResponse [] = {
	{ "MsgId", SK_FIELD_OFFSET(IGGDownloadVoiceResponse_t, iMsgId), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Offset", SK_FIELD_OFFSET(IGGDownloadVoiceResponse_t, iOffset), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "Length", SK_FIELD_OFFSET(IGGDownloadVoiceResponse_t, iLength), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "VoiceLength", SK_FIELD_OFFSET(IGGDownloadVoiceResponse_t, iVoiceLength), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ClientMsgId", SK_FIELD_OFFSET(IGGDownloadVoiceResponse_t, pcClientMsgId), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 1, 0 },
	{ "Data", SK_FIELD_OFFSET(IGGDownloadVoiceResponse_t, tData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 7, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 1, 0 },
	{ "EndFlag", SK_FIELD_OFFSET(IGGDownloadVoiceResponse_t, iEndFlag), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "BaseResponse", SK_FIELD_OFFSET(IGGDownloadVoiceResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 9, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "CancelFlag", SK_FIELD_OFFSET(IGGDownloadVoiceResponse_t, iCancelFlag), eTypeSKUint32, 0, 0, -1,
		"", 10, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGKeyVal [] = {
	{ "Key", SK_FIELD_OFFSET(IGGKeyVal_t, iKey), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Val", SK_FIELD_OFFSET(IGGKeyVal_t, iVal), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSyncKey [] = {
	{ "KeyCount", SK_FIELD_OFFSET(IGGSyncKey_t, iKeyCount), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Key", SK_FIELD_OFFSET(IGGSyncKey_t, ptKey), eTypeIGGKeyVal, 1, 0, -1,
		"KeyCount", 2, sizeof(IGGKeyVal_t *), sizeof(IGGKeyVal_t), 0, 0 }
};

///////////////////////////
static const SKMetaField_t g_tMetaFieldListIGGEmojiUploadInfoReq [] = {
	{ "MD5", SK_FIELD_OFFSET(IGGEmojiUploadInfoReq_t, pcMD5), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGEmojiUploadInfoReq_t, iStartPos), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGEmojiUploadInfoReq_t, iTotalLen), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 0, 0 },
	{ "EmojiBuffer", SK_FIELD_OFFSET(IGGEmojiUploadInfoReq_t, tEmojiBuffer), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "Type", SK_FIELD_OFFSET(IGGEmojiUploadInfoReq_t, iType), eTypeSKInt32, 0, 1, -1,
		"", 5, sizeof(int), sizeof(int), 0, 0 },
	{ "ToUserName", SK_FIELD_OFFSET(IGGEmojiUploadInfoReq_t, pcToUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 },
	{ "ExternXML", SK_FIELD_OFFSET(IGGEmojiUploadInfoReq_t, pcExternXML), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "Report", SK_FIELD_OFFSET(IGGEmojiUploadInfoReq_t, pcReport), eTypeSKChar, 1, 0, -1,
		"strlen", 8, sizeof(char *), sizeof(char), 0, 0 },
	{ "ClientMsgID", SK_FIELD_OFFSET(IGGEmojiUploadInfoReq_t, pcClientMsgID), eTypeSKChar, 1, 0, -1,
		"strlen", 9, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGUploadEmojiRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGUploadEmojiRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "EmojiItemCount", SK_FIELD_OFFSET(IGGUploadEmojiRequest_t, iEmojiItemCount), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "EmojiItem", SK_FIELD_OFFSET(IGGUploadEmojiRequest_t, ptEmojiItem), eTypeIGGEmojiUploadInfoReq, 1, 0, -1,
		"EmojiItemCount", 3, sizeof(IGGEmojiUploadInfoReq_t *), sizeof(IGGEmojiUploadInfoReq_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGEmojiUploadInfoResp [] = {
	{ "Ret", SK_FIELD_OFFSET(IGGEmojiUploadInfoResp_t, iRet), eTypeSKInt32, 0, 1, -1,
		"", 1, sizeof(int), sizeof(int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGEmojiUploadInfoResp_t, iStartPos), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGEmojiUploadInfoResp_t, iTotalLen), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 0, 0 },
	{ "MD5", SK_FIELD_OFFSET(IGGEmojiUploadInfoResp_t, pcMD5), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 },
	{ "ClientMsgID", SK_FIELD_OFFSET(IGGEmojiUploadInfoResp_t, pcClientMsgID), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "MsgID", SK_FIELD_OFFSET(IGGEmojiUploadInfoResp_t, iMsgID), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGUploadEmojiResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGUploadEmojiResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "EmojiItemCount", SK_FIELD_OFFSET(IGGUploadEmojiResponse_t, iEmojiItemCount), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "EmojiItem", SK_FIELD_OFFSET(IGGUploadEmojiResponse_t, ptEmojiItem), eTypeIGGEmojiUploadInfoResp, 1, 0, -1,
		"EmojiItemCount", 3, sizeof(IGGEmojiUploadInfoResp_t *), sizeof(IGGEmojiUploadInfoResp_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGEmojiDownloadInfoReq [] = {
	{ "ID", SK_FIELD_OFFSET(IGGEmojiDownloadInfoReq_t, pcID), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGEmojiDownloadInfoReq_t, iStartPos), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGEmojiDownloadInfoReq_t, iTotalLen), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 0, 0 },
	{ "MD5", SK_FIELD_OFFSET(IGGEmojiDownloadInfoReq_t, pcMD5), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDownloadEmojiRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGDownloadEmojiRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "EmojiItemCount", SK_FIELD_OFFSET(IGGDownloadEmojiRequest_t, iEmojiItemCount), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "EmojiItem", SK_FIELD_OFFSET(IGGDownloadEmojiRequest_t, ptEmojiItem), eTypeIGGEmojiDownloadInfoReq, 1, 0, -1,
		"EmojiItemCount", 3, sizeof(IGGEmojiDownloadInfoReq_t *), sizeof(IGGEmojiDownloadInfoReq_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGEmojiDownloadInfoResp [] = {
	{ "Ret", SK_FIELD_OFFSET(IGGEmojiDownloadInfoResp_t, iRet), eTypeSKInt32, 0, 1, -1,
		"", 1, sizeof(int), sizeof(int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGEmojiDownloadInfoResp_t, iStartPos), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGEmojiDownloadInfoResp_t, iTotalLen), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 0, 0 },
	{ "EmojiBuffer", SK_FIELD_OFFSET(IGGEmojiDownloadInfoResp_t, tEmojiBuffer), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "MD5", SK_FIELD_OFFSET(IGGEmojiDownloadInfoResp_t, pcMD5), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "ID", SK_FIELD_OFFSET(IGGEmojiDownloadInfoResp_t, pcID), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDownloadEmojiResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGDownloadEmojiResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "EmojiItemCount", SK_FIELD_OFFSET(IGGDownloadEmojiResponse_t, iEmojiItemCount), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "EmojiItem", SK_FIELD_OFFSET(IGGDownloadEmojiResponse_t, ptEmojiItem), eTypeIGGEmojiDownloadInfoResp, 1, 0, -1,
		"EmojiItemCount", 3, sizeof(IGGEmojiDownloadInfoResp_t *), sizeof(IGGEmojiDownloadInfoResp_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDisturbTimeSpan [] = {
	{ "BeginTime", SK_FIELD_OFFSET(IGGDisturbTimeSpan_t, iBeginTime), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "EndTime", SK_FIELD_OFFSET(IGGDisturbTimeSpan_t, iEndTime), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDisturbSetting [] = {
	{ "NightSetting", SK_FIELD_OFFSET(IGGDisturbSetting_t, iNightSetting), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "NightTime", SK_FIELD_OFFSET(IGGDisturbSetting_t, tNightTime), eTypeIGGDisturbTimeSpan, 0, 1, -1,
		"", 2, sizeof(IGGDisturbTimeSpan_t), sizeof(IGGDisturbTimeSpan_t), 0, 0 },
	{ "AllDaySetting", SK_FIELD_OFFSET(IGGDisturbSetting_t, iAllDaySetting), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "AllDayTime", SK_FIELD_OFFSET(IGGDisturbSetting_t, tAllDayTime), eTypeIGGDisturbTimeSpan, 0, 1, -1,
		"", 4, sizeof(IGGDisturbTimeSpan_t), sizeof(IGGDisturbTimeSpan_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGGmailInfo [] = {
	{ "GmailAcct", SK_FIELD_OFFSET(IGGGmailInfo_t, pcGmailAcct), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "GmailSwitch", SK_FIELD_OFFSET(IGGGmailInfo_t, iGmailSwitch), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "GmailErrCode", SK_FIELD_OFFSET(IGGGmailInfo_t, iGmailErrCode), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGGmailList [] = {
	{ "Count", SK_FIELD_OFFSET(IGGGmailList_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "List", SK_FIELD_OFFSET(IGGGmailList_t, ptList), eTypeIGGGmailInfo, 1, 0, -1,
		"Count", 2, sizeof(IGGGmailInfo_t *), sizeof(IGGGmailInfo_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGFacebookInfo [] = {
	{ "Uid", SK_FIELD_OFFSET(IGGFacebookInfo_t, llUid), eTypeSKUint64, 0, 1, -1,
		"", 1, sizeof(unsigned long long), sizeof(unsigned long long), 0, 0 },
	{ "Name", SK_FIELD_OFFSET(IGGFacebookInfo_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "Token", SK_FIELD_OFFSET(IGGFacebookInfo_t, pcToken), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSafeDevice [] = {
	{ "Name", SK_FIELD_OFFSET(IGGSafeDevice_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "Uuid", SK_FIELD_OFFSET(IGGSafeDevice_t, pcUuid), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "DeviceType", SK_FIELD_OFFSET(IGGSafeDevice_t, pcDeviceType), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "CreateTime", SK_FIELD_OFFSET(IGGSafeDevice_t, iCreateTime), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSafeDeviceList [] = {
	{ "Count", SK_FIELD_OFFSET(IGGSafeDeviceList_t, iCount), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "List", SK_FIELD_OFFSET(IGGSafeDeviceList_t, ptList), eTypeIGGSafeDevice, 1, 0, -1,
		"Count", 2, sizeof(IGGSafeDevice_t *), sizeof(IGGSafeDevice_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGUserInfoExt [] = {
	{ "SnsUserInfo", SK_FIELD_OFFSET(IGGUserInfoExt_t, tSnsUserInfo), eTypeIGGSnsUserInfo, 0, 1, -1,
		"", 1, sizeof(IGGSnsUserInfo_t), sizeof(IGGSnsUserInfo_t), 0, 0 },
	{ "MyBrandList", SK_FIELD_OFFSET(IGGUserInfoExt_t, pcMyBrandList), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "MsgPushSound", SK_FIELD_OFFSET(IGGUserInfoExt_t, pcMsgPushSound), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "VoipPushSound", SK_FIELD_OFFSET(IGGUserInfoExt_t, pcVoipPushSound), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 },
	{ "BigChatRoomSize", SK_FIELD_OFFSET(IGGUserInfoExt_t, iBigChatRoomSize), eTypeSKUint32, 0, 0, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "BigChatRoomQuota", SK_FIELD_OFFSET(IGGUserInfoExt_t, iBigChatRoomQuota), eTypeSKUint32, 0, 0, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "BigChatRoomInvite", SK_FIELD_OFFSET(IGGUserInfoExt_t, iBigChatRoomInvite), eTypeSKUint32, 0, 0, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "SafeMobile", SK_FIELD_OFFSET(IGGUserInfoExt_t, pcSafeMobile), eTypeSKChar, 1, 0, -1,
		"strlen", 8, sizeof(char *), sizeof(char), 0, 0 },
	{ "BigHeadImgUrl", SK_FIELD_OFFSET(IGGUserInfoExt_t, pcBigHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 9, sizeof(char *), sizeof(char), 0, 0 },
	{ "SmallHeadImgUrl", SK_FIELD_OFFSET(IGGUserInfoExt_t, pcSmallHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 0, 0 },
	{ "MainAcctType", SK_FIELD_OFFSET(IGGUserInfoExt_t, iMainAcctType), eTypeSKUint32, 0, 0, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ExtXml", SK_FIELD_OFFSET(IGGUserInfoExt_t, tExtXml), eTypeSKBuiltinString, 0, 0, -1,
		"", 12, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "SafeDeviceList", SK_FIELD_OFFSET(IGGUserInfoExt_t, tSafeDeviceList), eTypeIGGSafeDeviceList, 0, 0, -1,
		"", 13, sizeof(IGGSafeDeviceList_t), sizeof(IGGSafeDeviceList_t), 0, 0 },
	{ "SafeDevice", SK_FIELD_OFFSET(IGGUserInfoExt_t, iSafeDevice), eTypeSKUint32, 0, 0, -1,
		"", 14, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGModUserInfo [] = {
	{ "BitFlag", SK_FIELD_OFFSET(IGGModUserInfo_t, iBitFlag), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGModUserInfo_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGModUserInfo_t, tNickName), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "BindUin", SK_FIELD_OFFSET(IGGModUserInfo_t, iBindUin), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "BindEmail", SK_FIELD_OFFSET(IGGModUserInfo_t, tBindEmail), eTypeSKBuiltinString, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "BindMobile", SK_FIELD_OFFSET(IGGModUserInfo_t, tBindMobile), eTypeSKBuiltinString, 0, 1, -1,
		"", 6, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "Status", SK_FIELD_OFFSET(IGGModUserInfo_t, iStatus), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ImgLen", SK_FIELD_OFFSET(IGGModUserInfo_t, iImgLen), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ImgBuf", SK_FIELD_OFFSET(IGGModUserInfo_t, pcImgBuf), eTypeSKChar, 1, 0, -1,
		"ImgLen", 9, sizeof(char *), sizeof(char), 1, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGModUserInfo_t, iSex), eTypeSKInt32, 0, 0, -1,
		"", 10, sizeof(int), sizeof(int), 0, 0 },
	{ "Province", SK_FIELD_OFFSET(IGGModUserInfo_t, pcProvince), eTypeSKChar, 1, 0, -1,
		"strlen", 11, sizeof(char *), sizeof(char), 0, 0 },
	{ "City", SK_FIELD_OFFSET(IGGModUserInfo_t, pcCity), eTypeSKChar, 1, 0, -1,
		"strlen", 12, sizeof(char *), sizeof(char), 0, 0 },
	{ "Signature", SK_FIELD_OFFSET(IGGModUserInfo_t, pcSignature), eTypeSKChar, 1, 0, -1,
		"strlen", 13, sizeof(char *), sizeof(char), 0, 0 },
	{ "PersonalCard", SK_FIELD_OFFSET(IGGModUserInfo_t, iPersonalCard), eTypeSKUint32, 0, 0, -1,
		"", 14, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "DisturbSetting", SK_FIELD_OFFSET(IGGModUserInfo_t, tDisturbSetting), eTypeIGGDisturbSetting, 0, 0, -1,
		"", 15, sizeof(IGGDisturbSetting_t), sizeof(IGGDisturbSetting_t), 0, 0 },
	{ "PluginFlag", SK_FIELD_OFFSET(IGGModUserInfo_t, iPluginFlag), eTypeSKUint32, 0, 0, -1,
		"", 16, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyFlag", SK_FIELD_OFFSET(IGGModUserInfo_t, iVerifyFlag), eTypeSKUint32, 0, 0, -1,
		"", 17, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyInfo", SK_FIELD_OFFSET(IGGModUserInfo_t, pcVerifyInfo), eTypeSKChar, 1, 0, -1,
		"strlen", 18, sizeof(char *), sizeof(char), 0, 0 },
	{ "Point", SK_FIELD_OFFSET(IGGModUserInfo_t, iPoint), eTypeSKInt32, 0, 0, -1,
		"", 19, sizeof(int), sizeof(int), 0, 0 },
	{ "Experience", SK_FIELD_OFFSET(IGGModUserInfo_t, iExperience), eTypeSKInt32, 0, 0, -1,
		"", 20, sizeof(int), sizeof(int), 0, 0 },
	{ "Level", SK_FIELD_OFFSET(IGGModUserInfo_t, iLevel), eTypeSKInt32, 0, 0, -1,
		"", 21, sizeof(int), sizeof(int), 0, 0 },
	{ "LevelLowExp", SK_FIELD_OFFSET(IGGModUserInfo_t, iLevelLowExp), eTypeSKInt32, 0, 0, -1,
		"", 22, sizeof(int), sizeof(int), 0, 0 },
	{ "LevelHighExp", SK_FIELD_OFFSET(IGGModUserInfo_t, iLevelHighExp), eTypeSKInt32, 0, 0, -1,
		"", 23, sizeof(int), sizeof(int), 0, 0 },
	{ "Weibo", SK_FIELD_OFFSET(IGGModUserInfo_t, pcWeibo), eTypeSKChar, 1, 0, -1,
		"strlen", 24, sizeof(char *), sizeof(char), 0, 0 },
	{ "PluginSwitch", SK_FIELD_OFFSET(IGGModUserInfo_t, iPluginSwitch), eTypeSKUint32, 0, 0, -1,
		"", 25, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "GmailList", SK_FIELD_OFFSET(IGGModUserInfo_t, tGmailList), eTypeIGGGmailList, 0, 0, -1,
		"", 26, sizeof(IGGGmailList_t), sizeof(IGGGmailList_t), 0, 0 },
	{ "Alias", SK_FIELD_OFFSET(IGGModUserInfo_t, pcAlias), eTypeSKChar, 1, 0, -1,
		"strlen", 27, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboNickname", SK_FIELD_OFFSET(IGGModUserInfo_t, pcWeiboNickname), eTypeSKChar, 1, 0, -1,
		"strlen", 28, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboFlag", SK_FIELD_OFFSET(IGGModUserInfo_t, iWeiboFlag), eTypeSKUint32, 0, 0, -1,
		"", 29, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FaceBookFlag", SK_FIELD_OFFSET(IGGModUserInfo_t, iFaceBookFlag), eTypeSKUint32, 0, 0, -1,
		"", 30, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FBUserID", SK_FIELD_OFFSET(IGGModUserInfo_t, llFBUserID), eTypeSKUint64, 0, 0, -1,
		"", 31, sizeof(unsigned long long), sizeof(unsigned long long), 0, 0 },
	{ "FBUserName", SK_FIELD_OFFSET(IGGModUserInfo_t, pcFBUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 32, sizeof(char *), sizeof(char), 0, 0 },
	{ "AlbumStyle", SK_FIELD_OFFSET(IGGModUserInfo_t, iAlbumStyle), eTypeSKInt32, 0, 0, -1,
		"", 33, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumFlag", SK_FIELD_OFFSET(IGGModUserInfo_t, iAlbumFlag), eTypeSKInt32, 0, 0, -1,
		"", 34, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumBGImgID", SK_FIELD_OFFSET(IGGModUserInfo_t, pcAlbumBGImgID), eTypeSKChar, 1, 0, -1,
		"strlen", 35, sizeof(char *), sizeof(char), 0, 0 },
	{ "TXNewsCategory", SK_FIELD_OFFSET(IGGModUserInfo_t, iTXNewsCategory), eTypeSKUint32, 0, 0, -1,
		"", 36, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FBToken", SK_FIELD_OFFSET(IGGModUserInfo_t, pcFBToken), eTypeSKChar, 1, 0, -1,
		"strlen", 37, sizeof(char *), sizeof(char), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGModUserInfo_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 38, sizeof(char *), sizeof(char), 0, 0 },
	{ "GrayscaleFlag", SK_FIELD_OFFSET(IGGModUserInfo_t, iGrayscaleFlag), eTypeSKUint32, 0, 0, -1,
		"", 39, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	//add by yihuang
	{ "Birthday", SK_FIELD_OFFSET(IGGModUserInfo_t, tBirthday), eTypeIGGBirthday, 0, 0, -1,
		"", 40, sizeof(IGGBirthday_t), sizeof(IGGBirthday_t), 0, 0 },
	{ "Age", SK_FIELD_OFFSET(IGGModUserInfo_t, iAge), eTypeSKUint32, 0, 0, -1,
		"", 41, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Hobby", SK_FIELD_OFFSET(IGGModUserInfo_t, tHobby), eTypeIGGHobby, 0, 0, -1,
		"", 42, sizeof(IGGHobby_t), sizeof(IGGHobby_t), 0, 0 },
	{ "IntentionFlag", SK_FIELD_OFFSET(IGGModUserInfo_t, iIntentionFlag), eTypeSKUint32, 0, 0, -1,
		"", 43, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "PhotoCount", SK_FIELD_OFFSET(IGGModUserInfo_t, iPhotoCount), eTypeSKUint32, 0, 0, -1,
		"", 44, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FriendCount", SK_FIELD_OFFSET(IGGModUserInfo_t, iFriendCount), eTypeSKUint32, 0, 0, -1,
		"", 45, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "GroupCount", SK_FIELD_OFFSET(IGGModUserInfo_t, iGroupCount), eTypeSKUint32, 0, 0, -1,
		"", 46, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MatchCount", SK_FIELD_OFFSET(IGGModUserInfo_t, iMatchCount), eTypeSKUint32, 0, 0, -1,
		"", 47, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "LBSVisibleState", SK_FIELD_OFFSET(IGGModUserInfo_t, iLBSVisibleState), eTypeSKUint32, 0, 0, -1,
		"", 48, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "LBSDistanceUnit", SK_FIELD_OFFSET(IGGModUserInfo_t, iLBSDistanceUnit), eTypeSKUint32, 0, 0, -1,
		"", 49, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Language", SK_FIELD_OFFSET(IGGModUserInfo_t, pcLanguage), eTypeSKChar, 1, 0, -1,
		"strlen", 50, sizeof(char *), sizeof(char), 0, 0 },
	{ "FirstName", SK_FIELD_OFFSET(IGGModUserInfo_t, tFirstName), eTypeSKBuiltinString, 0, 0, -1,
		"", 51, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "LastName", SK_FIELD_OFFSET(IGGModUserInfo_t, tLastName), eTypeSKBuiltinString, 0, 0, -1,
		"", 52, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 }
	//
};

static const SKMetaField_t g_tMetaFieldListIGGGetProfileRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGGetProfileRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGGetProfileRequest_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGGetProfileResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGGetProfileResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "UserInfo", SK_FIELD_OFFSET(IGGGetProfileResponse_t, tUserInfo), eTypeIGGModUserInfo, 0, 1, -1,
		"", 2, sizeof(IGGModUserInfo_t), sizeof(IGGModUserInfo_t), 0, 0 },
	{ "UserInfoExt", SK_FIELD_OFFSET(IGGGetProfileResponse_t, tUserInfoExt), eTypeIGGUserInfoExt, 0, 1, -1,
		"", 3, sizeof(IGGUserInfoExt_t), sizeof(IGGUserInfoExt_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGUploadCoverImgRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Data", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, tData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "ImgHash", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, pcImgHash), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "MD5", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, pcMD5), eTypeSKChar, 1, 0, -1,
		"strlen", 8, sizeof(char *), sizeof(char), 0, 0 },
	{ "CDNImgUrl", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, pcCDNImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 9, sizeof(char *), sizeof(char), 1, 0 },
	{ "AESKey", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, pcAESKey), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 1, 0 },
	{ "EncryVer", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, iEncryVer), eTypeSKInt32, 0, 0, -1,
		"", 11, sizeof(int), sizeof(int), 1, 0 },
	{ "CDNImgSize", SK_FIELD_OFFSET(IGGUploadCoverImgRequest_t, iCDNImgSize), eTypeSKInt32, 0, 0, -1,
		"", 12, sizeof(int), sizeof(int), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGUploadCoverImgResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGUploadCoverImgResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGUploadCoverImgResponse_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGUploadCoverImgResponse_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FinalImgMd5sum", SK_FIELD_OFFSET(IGGUploadCoverImgResponse_t, pcFinalImgMd5sum), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 },
	{ "ImgHash", SK_FIELD_OFFSET(IGGUploadCoverImgResponse_t, pcImgHash), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGGetCoverImgRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGGetCoverImgRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGGetCoverImgRequest_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "ImgWidth", SK_FIELD_OFFSET(IGGGetCoverImgRequest_t, iImgWidth), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ImgHeight", SK_FIELD_OFFSET(IGGGetCoverImgRequest_t, iImgHeight), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ImgFormat", SK_FIELD_OFFSET(IGGGetCoverImgRequest_t, pcImgFormat), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGGetCoverImgRequest_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGGetCoverImgRequest_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGGetCoverImgResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGGetCoverImgResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGGetCoverImgResponse_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "TotalLen", SK_FIELD_OFFSET(IGGGetCoverImgResponse_t, iTotalLen), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "StartPos", SK_FIELD_OFFSET(IGGGetCoverImgResponse_t, iStartPos), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Data", SK_FIELD_OFFSET(IGGGetCoverImgResponse_t, tData), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGHobby [] = {
	{ "ArtFlag", SK_FIELD_OFFSET(IGGHobby_t, iArtFlag), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "SportsFlag", SK_FIELD_OFFSET(IGGHobby_t, iSportsFlag), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "SocialActivitiesFlag", SK_FIELD_OFFSET(IGGHobby_t, iSocialActivitiesFlag), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "TechnologyFlag", SK_FIELD_OFFSET(IGGHobby_t, iTechnologyFlag), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Lifestyle", SK_FIELD_OFFSET(IGGHobby_t, iLifestyleFlag), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGBirthday [] = {
	{ "Year", SK_FIELD_OFFSET(IGGBirthday_t, iYear), eTypeSKUint32, 0, 1, -1,
	"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Month", SK_FIELD_OFFSET(IGGBirthday_t, iMonth), eTypeSKUint32, 0, 1, -1,
	"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Day", SK_FIELD_OFFSET(IGGBirthday_t, iDay), eTypeSKUint32, 0, 1, -1,
	"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGFunctionSwitch [] = {
	{ "FunctionId", SK_FIELD_OFFSET(IGGFunctionSwitch_t, iFunctionId), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "SwitchValue", SK_FIELD_OFFSET(IGGFunctionSwitch_t, iSwitchValue), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 }
};

static const SKMetaFunc_t g_tMetaIGGFuncList [] = {
	{ "SKGetSelfSvnInfo", eFuncIGGMicroMsgSKGetSelfSvnInfo,
		{ "", 0, 0 }, { "Response", eTypeSKBuiltinString, 1 } },
	{ "SKGetMetainfoFull", eFuncIGGMicroMsgSKGetMetainfoFull,
		{ "", 0, 0 }, { "Response", eTypeSKBuiltinString, 1 } },
	{ "SKGetMetainfo", eFuncIGGMicroMsgSKGetMetainfo,
		{ "", 0, 0 }, { "Response", eTypeSKBuiltinString, 1 } },
	{ "SKEcho", eFuncIGGMicroMsgSKEcho,
		{ "Request", eTypeIGGMicroMsgEchoInfo, 1 }, { "Response", eTypeIGGMicroMsgEchoInfo, 1 } }
};

static const SKMetaField_t g_tMetaFieldListIGGLbsRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGLbsRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "OpCode", SK_FIELD_OFFSET(IGGLbsRequest_t, iOpCode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Longitude", SK_FIELD_OFFSET(IGGLbsRequest_t, fLongitude), eTypeSKFloat32, 0, 1, -1,
		"", 3, sizeof(float), sizeof(float), 0, 0 },
	{ "Latitude", SK_FIELD_OFFSET(IGGLbsRequest_t, fLatitude), eTypeSKFloat32, 0, 1, -1,
		"", 4, sizeof(float), sizeof(float), 0, 0 },
	{ "Precision", SK_FIELD_OFFSET(IGGLbsRequest_t, iPrecision), eTypeSKInt32, 0, 1, -1,
		"", 5, sizeof(int), sizeof(int), 0, 0 },
	{ "MacAddr", SK_FIELD_OFFSET(IGGLbsRequest_t, pcMacAddr), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 },
	{ "CellId", SK_FIELD_OFFSET(IGGLbsRequest_t, pcCellId), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "GPSSource", SK_FIELD_OFFSET(IGGLbsRequest_t, iGPSSource), eTypeSKInt32, 0, 0, -1,
		"", 8, sizeof(int), sizeof(int), 0, 0 },
	//add by yihuang
	{ "BeginAge", SK_FIELD_OFFSET(IGGLbsRequest_t, iBeginAge), eTypeSKInt32, 0, 0, -1,
		"", 9, sizeof(int), sizeof(int), 0, 0 },
	{ "EndAge", SK_FIELD_OFFSET(IGGLbsRequest_t, iEndAge), eTypeSKInt32, 0, 0, -1,
		"", 10, sizeof(int), sizeof(int), 0, 0 },
	{ "IntentionFlag", SK_FIELD_OFFSET(IGGLbsRequest_t, iIntentionFlag), eTypeSKInt32, 0, 0, -1,
		"", 11, sizeof(int), sizeof(int), 0, 0 },
	{ "SkipCount", SK_FIELD_OFFSET(IGGLbsRequest_t, iSkipCount), eTypeSKUint32, 0, 0, -1,
		"", 12, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FetchCount", SK_FIELD_OFFSET(IGGLbsRequest_t, iFetchCount), eTypeSKUint32, 0, 0, -1,
		"", 13, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
	//
};

static const SKMetaField_t g_tMetaFieldListIGGLbsContactInfo [] = {
	{ "UserName", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcNickName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "Province", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcProvince), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "City", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcCity), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 },
	{ "Signature", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcSignature), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "Distance", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcDistance), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iSex), eTypeSKInt32, 0, 1, -1,
		"", 7, sizeof(int), sizeof(int), 0, 0 },
	{ "ImgStatus", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iImgStatus), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyFlag", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iVerifyFlag), eTypeSKUint32, 0, 0, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyInfo", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcVerifyInfo), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 0, 0 },
	{ "VerifyContent", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcVerifyContent), eTypeSKChar, 1, 0, -1,
		"strlen", 11, sizeof(char *), sizeof(char), 0, 0 },
	{ "Alias", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcAlias), eTypeSKChar, 1, 0, -1,
		"strlen", 12, sizeof(char *), sizeof(char), 0, 0 },
	{ "Weibo", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcWeibo), eTypeSKChar, 1, 0, -1,
		"strlen", 13, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboNickname", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcWeiboNickname), eTypeSKChar, 1, 0, -1,
		"strlen", 14, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboFlag", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iWeiboFlag), eTypeSKUint32, 0, 0, -1,
		"", 15, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "HeadImgVersion", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iHeadImgVersion), eTypeSKInt32, 0, 0, -1,
		"", 19, sizeof(int), sizeof(int), 0, 0 },
	{ "SnsUserInfo", SK_FIELD_OFFSET(IGGLbsContactInfo_t, tSnsUserInfo), eTypeIGGSnsUserInfo, 0, 0, -1,
		"", 20, sizeof(IGGSnsUserInfo_t), sizeof(IGGSnsUserInfo_t), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 21, sizeof(char *), sizeof(char), 0, 0 },
	{ "BigHeadImgUrl", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcBigHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 22, sizeof(char *), sizeof(char), 0, 0 },
	{ "SmallHeadImgUrl", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcSmallHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 23, sizeof(char *), sizeof(char), 0, 0 },
	{ "MyBrandList", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcMyBrandList), eTypeSKChar, 1, 0, -1,
		"strlen", 24, sizeof(char *), sizeof(char), 0, 0 },
	{ "CustomizedInfo", SK_FIELD_OFFSET(IGGLbsContactInfo_t, tCustomizedInfo), eTypeIGGCustomizedInfo, 0, 0, -1,
		"", 25, sizeof(IGGCustomizedInfo_t), sizeof(IGGCustomizedInfo_t), 0, 0 },
	{ "MutualHobbies", SK_FIELD_OFFSET(IGGLbsContactInfo_t, tMutualHobbies), eTypeIGGHobby, 0, 0, -1,
		"", 26, sizeof(IGGHobby_t), sizeof(IGGHobby_t), 0, 0 },
	{ "MutualFriendCount", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iMutualFriendCount), eTypeSKUint32, 0, 0, -1,
		"", 27, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MutualFriendList", SK_FIELD_OFFSET(IGGLbsContactInfo_t, ptMutualFriendList), eTypeIGGLbsContactInfo, 1, 0, -1,
		"MutualFriendCount", 28, sizeof(IGGLbsContactInfo_t *), sizeof(IGGLbsContactInfo_t), 0, 0 },
	{ "MutualGroupCount", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iMutualGroupCount), eTypeSKUint32, 0, 0, -1,
		"", 29, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MutualGroupList", SK_FIELD_OFFSET(IGGLbsContactInfo_t, ptMutualGroupList), eTypeIGGLbsContactInfo, 1, 0, -1,
		"MutualGroupCount", 30, sizeof(IGGLbsContactInfo_t *), sizeof(IGGLbsContactInfo_t), 0, 0 },
	{ "Time", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcTime), eTypeSKChar, 1, 0, -1,
		"strlen", 31, sizeof(char *), sizeof(char), 0, 0 },
	{ "SafeUserName", SK_FIELD_OFFSET(IGGLbsContactInfo_t, pcSafeUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 32, sizeof(char *), sizeof(char), 0, 0 },
	{ "Birthday", SK_FIELD_OFFSET(IGGLbsContactInfo_t, tBirthday), eTypeIGGBirthday, 0, 0, -1,
		"", 33, sizeof(IGGBirthday_t), sizeof(IGGBirthday_t), 0, 0 },
	{ "Age", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iAge), eTypeSKUint32, 0, 0, -1,
		"", 34, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "IntentionFlag", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iIntentionFlag), eTypeSKUint32, 0, 0, -1,
		"", 35, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MatchType", SK_FIELD_OFFSET(IGGLbsContactInfo_t, iMatchType), eTypeSKUint32, 0, 0, -1,
		"", 36, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGLbsResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGLbsResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "ContactCount", SK_FIELD_OFFSET(IGGLbsResponse_t, iContactCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ContactList", SK_FIELD_OFFSET(IGGLbsResponse_t, ptContactList), eTypeIGGLbsContactInfo, 1, 0, -1,
		"ContactCount", 3, sizeof(IGGLbsContactInfo_t *), sizeof(IGGLbsContactInfo_t), 0, 0 },
	{ "State", SK_FIELD_OFFSET(IGGLbsResponse_t, iState), eTypeSKUint32, 0, 0, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FlushTime", SK_FIELD_OFFSET(IGGLbsResponse_t, iFlushTime), eTypeSKUint32, 0, 0, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "IsShowRoom", SK_FIELD_OFFSET(IGGLbsResponse_t, iIsShowRoom), eTypeSKUint32, 0, 0, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "RoomMemberCount", SK_FIELD_OFFSET(IGGLbsResponse_t, iRoomMemberCount), eTypeSKUint32, 0, 0, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "SkipCount", SK_FIELD_OFFSET(IGGLbsResponse_t, iSkipCount), eTypeSKUint32, 0, 0, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGGetLocationRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGGetLocationRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "Longitude", SK_FIELD_OFFSET(IGGGetLocationRequest_t, iLongitude), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 0, 0 },
	{ "Latitude", SK_FIELD_OFFSET(IGGGetLocationRequest_t, iLatitude), eTypeSKInt32, 0, 1, -1,
		"", 4, sizeof(int), sizeof(int), 0, 0 },
	{ "Precision", SK_FIELD_OFFSET(IGGGetLocationRequest_t, iPrecision), eTypeSKInt32, 0, 1, -1,
		"", 5, sizeof(int), sizeof(int), 0, 0 },
	{ "MacAddr", SK_FIELD_OFFSET(IGGGetLocationRequest_t, pcMacAddr), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 },
	{ "CellId", SK_FIELD_OFFSET(IGGGetLocationRequest_t, pcCellId), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "GPSSource", SK_FIELD_OFFSET(IGGGetLocationRequest_t, iGPSSource), eTypeSKInt32, 0, 0, -1,
		"", 8, sizeof(int), sizeof(int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGGetLocationResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGGetLocationResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "Longitude", SK_FIELD_OFFSET(IGGGetLocationResponse_t, iLongitude), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 0, 0 },
	{ "Latitude", SK_FIELD_OFFSET(IGGGetLocationResponse_t, iLatitude), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGLbsMatchRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGLbsMatchRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "OpCode", SK_FIELD_OFFSET(IGGLbsMatchRequest_t, iOpCode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MatchListSize", SK_FIELD_OFFSET(IGGLbsMatchRequest_t, iMatchListSize), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserNameList", SK_FIELD_OFFSET(IGGLbsMatchRequest_t, pUserNameList), eTypeSKBuiltinString, 1, 0, -1,
		"MatchListSize", 4, sizeof(SKBuiltinString_t*), sizeof(SKBuiltinString_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGLbsMatchResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGLbsMatchResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "OpCode", SK_FIELD_OFFSET(IGGLbsMatchResponse_t, iOpCode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MatchListSize", SK_FIELD_OFFSET(IGGLbsMatchResponse_t, iMatchListSize), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserNameList", SK_FIELD_OFFSET(IGGLbsMatchResponse_t, pUserNameList), eTypeSKBuiltinString, 1, 0, -1,
		"MatchListSize", 4, sizeof(SKBuiltinString_t*), sizeof(SKBuiltinString_t), 0, 0 },
	{ "Ret", SK_FIELD_OFFSET(IGGLbsMatchResponse_t, piRet), eTypeSKInt32, 1, 0, -1,
		"MatchListSize", 5, sizeof(int *), sizeof(int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSyncLbsMatchRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGSyncLbsMatchRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGSyncLbsMatchRequest_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },
	{ "SyncKey", SK_FIELD_OFFSET(IGGSyncLbsMatchRequest_t, iSyncKey), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSyncLbsMatchResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGSyncLbsMatchResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "NewSyncKey", SK_FIELD_OFFSET(IGGSyncLbsMatchResponse_t, iNewSyncKey), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "ContinueFlag", SK_FIELD_OFFSET(IGGSyncLbsMatchResponse_t, iContinueFlag), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 1, 0 },
	{ "CmdCount", SK_FIELD_OFFSET(IGGSyncLbsMatchResponse_t, iCmdCount), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "CmdList", SK_FIELD_OFFSET(IGGSyncLbsMatchResponse_t, ptCmdList), eTypeIGGCmdItem, 1, 0, -1,
		"CmdCount", 5, sizeof(IGGCmdItem_t *), sizeof(IGGCmdItem_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGLbsMatchContactInfo [] = {
	{ "UserName", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, pcNickName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "Province", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, pcProvince), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "City", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, pcCity), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 },
	{ "Signature", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, pcSignature), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, iSex), eTypeSKInt32, 0, 1, -1,
		"", 6, sizeof(int), sizeof(int), 0, 0 },
	{ "ImgStatus", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, iImgStatus), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "HeadImgVersion", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, iHeadImgVersion), eTypeSKInt32, 0, 0, -1,
		"", 8, sizeof(int), sizeof(int), 0, 0 },
	{ "SnsUserInfo", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, tSnsUserInfo), eTypeIGGSnsUserInfo, 0, 0, -1,
		"", 9, sizeof(IGGSnsUserInfo_t), sizeof(IGGSnsUserInfo_t), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 0, 0 },
	{ "BigHeadImgUrl", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, pcBigHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 11, sizeof(char *), sizeof(char), 0, 0 },
	{ "SmallHeadImgUrl", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, pcSmallHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 12, sizeof(char *), sizeof(char), 0, 0 },
	{ "SafeUserName", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, pcSafeUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 13, sizeof(char *), sizeof(char), 0, 0 },
	{ "Birthday", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, tBirthday), eTypeIGGBirthday, 0, 0, -1,
		"", 14, sizeof(IGGBirthday_t), sizeof(IGGBirthday_t), 0, 0 },
	{ "Age", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, iAge), eTypeSKUint32, 0, 0, -1,
		"", 15, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "IntentionFlag", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, iIntentionFlag), eTypeSKUint32, 0, 0, -1,
		"", 16, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MatchTime", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, iMatchTime), eTypeSKUint32, 0, 0, -1,
		"", 17, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Hobbies", SK_FIELD_OFFSET(IGGLbsMatchContactInfo_t, tHobbies), eTypeIGGHobby, 0, 0, -1,
		"", 18, sizeof(IGGHobby_t), sizeof(IGGHobby_t), 0, 0 },
};

////////////////////////////// »∫œ‡πÿBegin //////////////////////////////////


static const SKMetaField_t g_tMetaFieldListIGGModChatRoomNotify [] = {
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGModChatRoomNotify_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Status", SK_FIELD_OFFSET(IGGModChatRoomNotify_t, iStatus), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGModChatRoomMember [] = {
	{ "UserName", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tNickName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "PYInitial", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tPYInitial), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "QuanPin", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tQuanPin), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGModChatRoomMember_t, iSex), eTypeSKInt32, 0, 1, -1,
		"", 5, sizeof(int), sizeof(int), 0, 0 },
	{ "ImgBuf", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tImgBuf), eTypeSKBuiltinString, 0, 1, -1,
		"", 6, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "ImgFlag", SK_FIELD_OFFSET(IGGModChatRoomMember_t, iImgFlag), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Remark", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tRemark), eTypeSKBuiltinString, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "RemarkPYInitial", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tRemarkPYInitial), eTypeSKBuiltinString, 0, 1, -1,
		"", 9, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "RemarkQuanPin", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tRemarkQuanPin), eTypeSKBuiltinString, 0, 1, -1,
		"", 10, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "ContactType", SK_FIELD_OFFSET(IGGModChatRoomMember_t, iContactType), eTypeSKUint32, 0, 1, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Province", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcProvince), eTypeSKChar, 1, 0, -1,
		"strlen", 12, sizeof(char *), sizeof(char), 0, 0 },
	{ "City", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcCity), eTypeSKChar, 1, 0, -1,
		"strlen", 13, sizeof(char *), sizeof(char), 0, 0 },
	{ "Signature", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcSignature), eTypeSKChar, 1, 0, -1,
		"strlen", 14, sizeof(char *), sizeof(char), 0, 0 },
	{ "PersonalCard", SK_FIELD_OFFSET(IGGModChatRoomMember_t, iPersonalCard), eTypeSKUint32, 0, 1, -1,
		"", 15, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyFlag", SK_FIELD_OFFSET(IGGModChatRoomMember_t, iVerifyFlag), eTypeSKUint32, 0, 1, -1,
		"", 16, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyInfo", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcVerifyInfo), eTypeSKChar, 1, 0, -1,
		"strlen", 17, sizeof(char *), sizeof(char), 0, 0 },
	{ "Weibo", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcWeibo), eTypeSKChar, 1, 0, -1,
		"strlen", 18, sizeof(char *), sizeof(char), 0, 0 },
	{ "VerifyContent", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcVerifyContent), eTypeSKChar, 1, 0, -1,
		"strlen", 19, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboNickname", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcWeiboNickname), eTypeSKChar, 1, 0, -1,
		"strlen", 20, sizeof(char *), sizeof(char), 0, 0 },
	{ "WeiboFlag", SK_FIELD_OFFSET(IGGModChatRoomMember_t, iWeiboFlag), eTypeSKUint32, 0, 1, -1,
		"", 21, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "AlbumStyle", SK_FIELD_OFFSET(IGGModChatRoomMember_t, iAlbumStyle), eTypeSKInt32, 0, 1, -1,
		"", 22, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumFlag", SK_FIELD_OFFSET(IGGModChatRoomMember_t, iAlbumFlag), eTypeSKInt32, 0, 1, -1,
		"", 23, sizeof(int), sizeof(int), 0, 0 },
	{ "AlbumBGImgID", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcAlbumBGImgID), eTypeSKChar, 1, 0, -1,
		"strlen", 24, sizeof(char *), sizeof(char), 0, 0 },
	{ "SnsUserInfo", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tSnsUserInfo), eTypeIGGSnsUserInfo, 0, 1, -1,
		"", 25, sizeof(IGGSnsUserInfo_t), sizeof(IGGSnsUserInfo_t), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 26, sizeof(char *), sizeof(char), 0, 0 },
	{ "BigHeadImgUrl", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcBigHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 27, sizeof(char *), sizeof(char), 0, 0 },
	{ "SmallHeadImgUrl", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcSmallHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 28, sizeof(char *), sizeof(char), 0, 0 },
	{ "MyBrandList", SK_FIELD_OFFSET(IGGModChatRoomMember_t, pcMyBrandList), eTypeSKChar, 1, 0, -1,
		"strlen", 29, sizeof(char *), sizeof(char), 0, 0 },
	{ "CustomizedInfo", SK_FIELD_OFFSET(IGGModChatRoomMember_t, tCustomizedInfo), eTypeIGGCustomizedInfo, 0, 1, -1,
		"", 30, sizeof(IGGCustomizedInfo_t), sizeof(IGGCustomizedInfo_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGMobileOptRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGMobileOptRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "CountryCode", SK_FIELD_OFFSET(IGGMobileOptRequest_t, pcCountryCode), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
	{ "Mobile", SK_FIELD_OFFSET(IGGMobileOptRequest_t, pcMobile), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
	{ "OptCode", SK_FIELD_OFFSET(IGGMobileOptRequest_t, iOptCode), eTypeSKInt32, 0, 1, -1,
		"", 4, sizeof(int), sizeof(int), 1, 0 },
	{ "Verifycode", SK_FIELD_OFFSET(IGGMobileOptRequest_t, pcVerifycode), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 1, 0 },
	{ "RandomEncryKey", SK_FIELD_OFFSET(IGGMobileOptRequest_t, tRandomEncryKey), eTypeSKBuiltinString, 0, 1, -1,
		"", 6, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },	
};

static const SKMetaField_t g_tMetaFieldListIGGMobileOptResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGMobileOptResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "OptCode", SK_FIELD_OFFSET(IGGMobileOptResponse_t, iOptCode), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 1, 0 },
	{ "Ticket", SK_FIELD_OFFSET(IGGMobileOptResponse_t, pcTicket), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGEmailOptRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGEmailOptRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "Email", SK_FIELD_OFFSET(IGGEmailOptRequest_t, pcEmail), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
	{ "OptCode", SK_FIELD_OFFSET(IGGEmailOptRequest_t, iOptCode), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 1, 0 },
	{ "VerifyCode", SK_FIELD_OFFSET(IGGEmailOptRequest_t, pcVerifyCode), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "RandomEncryKey", SK_FIELD_OFFSET(IGGEmailOptRequest_t, tRandomEncryKey), eTypeSKBuiltinString, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },	
};

static const SKMetaField_t g_tMetaFieldListIGGEmailOptResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGEmailOptResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
	{ "OptCode", SK_FIELD_OFFSET(IGGEmailOptResponse_t, iOptCode), eTypeSKInt32, 0, 1, -1,
		"", 2, sizeof(int), sizeof(int), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGUploadPlugFriendsRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGUploadPlugFriendsRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "OptCode", SK_FIELD_OFFSET(IGGUploadPlugFriendsRequest_t, iOptCode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },	
	{ "FriendType", SK_FIELD_OFFSET(IGGUploadPlugFriendsRequest_t, iFriendType), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "FriendCount", SK_FIELD_OFFSET(IGGUploadPlugFriendsRequest_t, iFriendCount), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "FriendBuffer", SK_FIELD_OFFSET(IGGUploadPlugFriendsRequest_t, pcFriendBuffer), eTypeSKBuiltinString, 1, 0, -1,
		"FriendCount", 5, sizeof(Comm::SKBuiltinString_t *), sizeof(Comm::SKBuiltinString_t), 0, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGUploadPlugFriendsResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGUploadPlugFriendsResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 },
};


static const SKMetaField_t g_tMetaFieldListIGGQuitChatRoom [] = {
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGQuitChatRoom_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGQuitChatRoom_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGQuitChatRoomRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGQuitChatRoomRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "QuitChatRoom", SK_FIELD_OFFSET(IGGQuitChatRoomRequest_t, tQuitChatRoom), eTypeIGGQuitChatRoom, 0, 1, -1,
		"", 2, sizeof(IGGQuitChatRoom_t), sizeof(IGGQuitChatRoom_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGQuitChatRoomResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGQuitChatRoomResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "QuitChatRoom", SK_FIELD_OFFSET(IGGQuitChatRoomResponse_t, tQuitChatRoom), eTypeIGGQuitChatRoom, 0, 1, -1,
		"", 2, sizeof(IGGQuitChatRoom_t), sizeof(IGGQuitChatRoom_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGQuitGroupRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGQuitGroupRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "QuitChatRoom", SK_FIELD_OFFSET(IGGQuitGroupRequest_t, tQuitChatRoom), eTypeIGGQuitChatRoom, 0, 1, -1,
		"", 2, sizeof(IGGQuitChatRoom_t), sizeof(IGGQuitChatRoom_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGQuitGroupResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGQuitGroupResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "QuitChatRoom", SK_FIELD_OFFSET(IGGQuitGroupResponse_t, tQuitChatRoom), eTypeIGGQuitChatRoom, 0, 1, -1,
		"", 2, sizeof(IGGQuitChatRoom_t), sizeof(IGGQuitChatRoom_t), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGModChatRoomTopic [] = {
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGModChatRoomTopic_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ChatRoomType", SK_FIELD_OFFSET(IGGModChatRoomTopic_t, iChatRoomType), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ChatRoomName", SK_FIELD_OFFSET(IGGModChatRoomTopic_t, tChatRoomName), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "ChatRoomTopic", SK_FIELD_OFFSET(IGGModChatRoomTopic_t, tChatRoomTopic), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "NeedVerify", SK_FIELD_OFFSET(IGGModChatRoomTopic_t, iNeedVerify), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGModGroupTopic [] = {
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGModGroupTopic_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ChatRoomTopic", SK_FIELD_OFFSET(IGGModGroupTopic_t, tChatRoomTopic), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGModChatRoomMemberDisplayName [] = {
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGModChatRoomMemberDisplayName_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGModChatRoomMemberDisplayName_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "DisplayName", SK_FIELD_OFFSET(IGGModChatRoomMemberDisplayName_t, pcDisplayName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGModChatRoomMemberFlag [] = {
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGModChatRoomMemberFlag_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGModChatRoomMemberFlag_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "FlagSwitch", SK_FIELD_OFFSET(IGGModChatRoomMemberFlag_t, iFlagSwitch), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Value", SK_FIELD_OFFSET(IGGModChatRoomMemberFlag_t, iValue), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGMemberReq [] = {
	{ "MemberName", SK_FIELD_OFFSET(IGGMemberReq_t, tMemberName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGMemberResp [] = {
	{ "MemberName", SK_FIELD_OFFSET(IGGMemberResp_t, tMemberName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "MemberStatus", SK_FIELD_OFFSET(IGGMemberResp_t, iMemberStatus), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "NickName", SK_FIELD_OFFSET(IGGMemberResp_t, tNickName), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "PYInitial", SK_FIELD_OFFSET(IGGMemberResp_t, tPYInitial), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "QuanPin", SK_FIELD_OFFSET(IGGMemberResp_t, tQuanPin), eTypeSKBuiltinString, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "Sex", SK_FIELD_OFFSET(IGGMemberResp_t, iSex), eTypeSKInt32, 0, 1, -1,
		"", 6, sizeof(int), sizeof(int), 0, 0 },
	{ "Remark", SK_FIELD_OFFSET(IGGMemberResp_t, tRemark), eTypeSKBuiltinString, 0, 1, -1,
		"", 7, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "RemarkPYInitial", SK_FIELD_OFFSET(IGGMemberResp_t, tRemarkPYInitial), eTypeSKBuiltinString, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "RemarkQuanPin", SK_FIELD_OFFSET(IGGMemberResp_t, tRemarkQuanPin), eTypeSKBuiltinString, 0, 1, -1,
		"", 9, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "ContactType", SK_FIELD_OFFSET(IGGMemberResp_t, iContactType), eTypeSKUint32, 0, 1, -1,
		"", 10, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Province", SK_FIELD_OFFSET(IGGMemberResp_t, pcProvince), eTypeSKChar, 1, 0, -1,
		"strlen", 11, sizeof(char *), sizeof(char), 0, 0 },
	{ "City", SK_FIELD_OFFSET(IGGMemberResp_t, pcCity), eTypeSKChar, 1, 0, -1,
		"strlen", 12, sizeof(char *), sizeof(char), 0, 0 },
	{ "Signature", SK_FIELD_OFFSET(IGGMemberResp_t, pcSignature), eTypeSKChar, 1, 0, -1,
		"strlen", 13, sizeof(char *), sizeof(char), 0, 0 },
	{ "PersonalCard", SK_FIELD_OFFSET(IGGMemberResp_t, iPersonalCard), eTypeSKUint32, 0, 1, -1,
		"", 14, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyFlag", SK_FIELD_OFFSET(IGGMemberResp_t, iVerifyFlag), eTypeSKUint32, 0, 1, -1,
		"", 15, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VerifyInfo", SK_FIELD_OFFSET(IGGMemberResp_t, pcVerifyInfo), eTypeSKChar, 1, 0, -1,
		"strlen", 16, sizeof(char *), sizeof(char), 0, 0 },
	{ "Country", SK_FIELD_OFFSET(IGGMemberResp_t, pcCountry), eTypeSKChar, 1, 0, -1,
		"strlen", 17, sizeof(char *), sizeof(char), 0, 0 },
	{ "MemberSafeName", SK_FIELD_OFFSET(IGGMemberResp_t, tMemberSafeName), eTypeSKBuiltinString, 0, 1, -1,
		"", 18, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "Birthday", SK_FIELD_OFFSET(IGGMemberResp_t, tBirthday), eTypeIGGBirthday, 0, 0, -1,
		"", 19, sizeof(IGGBirthday_t), sizeof(IGGBirthday_t), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGDelMemberReq [] = {
	{ "MemberName", SK_FIELD_OFFSET(IGGDelMemberReq_t, tMemberName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGDelMemberResp [] = {
	{ "MemberName", SK_FIELD_OFFSET(IGGDelMemberResp_t, tMemberName), eTypeSKBuiltinString, 0, 1, -1,
		"", 1, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGCreateChatRoomRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGCreateChatRoomRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "IntroDuce", SK_FIELD_OFFSET(IGGCreateChatRoomRequest_t, tIntroDuce), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGCreateChatRoomRequest_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGCreateChatRoomRequest_t, ptMemberList), eTypeIGGMemberReq, 1, 0, -1,
		"MemberCount", 4, sizeof(IGGMemberReq_t*), sizeof(IGGMemberReq_t), 0, 0 },
	{ "Longitude", SK_FIELD_OFFSET(IGGCreateChatRoomRequest_t, fLongitude), eTypeSKFloat32, 0, 1, -1,
		"", 5, sizeof(float), sizeof(float), 0, 0 },
	{ "Latitude", SK_FIELD_OFFSET(IGGCreateChatRoomRequest_t, fLatitude), eTypeSKFloat32, 0, 1, -1,
		"", 6, sizeof(float), sizeof(float), 0, 0 },
	{ "ChatRoomName", SK_FIELD_OFFSET(IGGCreateChatRoomRequest_t, tChatRoomName), eTypeSKBuiltinString, 0, 1, -1,
		"", 7, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "Type", SK_FIELD_OFFSET(IGGCreateChatRoomRequest_t, iType), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "NeedVerify", SK_FIELD_OFFSET(IGGCreateChatRoomRequest_t, iNeedVerify), eTypeSKUint32, 0, 1, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGCreateChatRoomResponse[] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "IntroDuce", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, tIntroDuce), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "PYInitial", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, tPYInitial), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "QuanPin", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, tQuanPin), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, ptMemberList), eTypeIGGMemberResp, 1, 0, -1,
		"MemberCount", 6, sizeof(IGGMemberResp_t*), sizeof(IGGMemberResp_t), 0, 0 },
	{ "ChatRoomName", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, tChatRoomName), eTypeSKBuiltinString, 0, 1, -1,
		"", 7, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "ImgBuf", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, tImgBuf), eTypeSKBuiltinBuffer, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinBuffer_t), sizeof(Comm::SKBuiltinBuffer_t), 0, 0 },
	{ "BigHeadImgUrl", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, pcBigHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 9, sizeof(char *), sizeof(char), 0, 0 },
	{ "SmallHeadImgUrl", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, pcSmallHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 0, 0 },
	{ "RoomId", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, iRoomId), eTypeSKUint32, 0, 1, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Type", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, iType), eTypeSKUint32, 0, 1, -1,
		"", 12, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "NeedVerify", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, iNeedVerify), eTypeSKUint32, 0, 1, -1,
		"", 13, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MaxMemberCount", SK_FIELD_OFFSET(IGGCreateChatRoomResponse_t, iMaxMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 14, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGCreateGroupRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGCreateGroupRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "IntroDuce", SK_FIELD_OFFSET(IGGCreateGroupRequest_t, tIntroDuce), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGCreateGroupRequest_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGCreateGroupRequest_t, ptMemberList), eTypeIGGMemberReq, 1, 0, -1,
		"MemberCount", 4, sizeof(IGGMemberReq_t*), sizeof(IGGMemberReq_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGCreateGroupResponse[] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "IntroDuce", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, tIntroDuce), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "PYInitial", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, tPYInitial), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "QuanPin", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, tQuanPin), eTypeSKBuiltinString, 0, 1, -1,
		"", 4, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, ptMemberList), eTypeIGGMemberResp, 1, 0, -1,
		"MemberCount", 6, sizeof(IGGMemberResp_t*), sizeof(IGGMemberResp_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ImgBuf", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, tImgBuf), eTypeSKBuiltinString, 0, 1, -1,
		"", 8, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "BigHeadImgUrl", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, pcBigHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 9, sizeof(char *), sizeof(char), 0, 0 },
	{ "SmallHeadImgUrl", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, pcSmallHeadImgUrl), eTypeSKChar, 1, 0, -1,
		"strlen", 10, sizeof(char *), sizeof(char), 0, 0 },
	{ "MaxMemberCount", SK_FIELD_OFFSET(IGGCreateGroupResponse_t, iMaxMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};



static const SKMetaField_t g_tMetaFieldListIGGSearchChatRoomRequest[] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGSearchChatRoomRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "SearchType", SK_FIELD_OFFSET(IGGSearchChatRoomRequest_t, iSearchType), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGSearchChatRoomRequest_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Longitude", SK_FIELD_OFFSET(IGGSearchChatRoomRequest_t, fLongitude), eTypeSKFloat32, 0, 1, -1,
		"", 4, sizeof(float), sizeof(float), 0, 0 },
	{ "Latitude", SK_FIELD_OFFSET(IGGSearchChatRoomRequest_t, fLatitude), eTypeSKFloat32, 0, 1, -1,
		"", 5, sizeof(float), sizeof(float), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGChatRoomResult[] = {
	{ "RoomID", SK_FIELD_OFFSET(IGGChatRoomResult_t, iRoomID), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ChatRoomName", SK_FIELD_OFFSET(IGGChatRoomResult_t, sChatRoomName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "Introduce", SK_FIELD_OFFSET(IGGChatRoomResult_t, sIntroduce), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "CreateTime", SK_FIELD_OFFSET(IGGChatRoomResult_t, iCreateTime), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ActiveTime", SK_FIELD_OFFSET(IGGChatRoomResult_t, iActiveTime), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Status", SK_FIELD_OFFSET(IGGChatRoomResult_t, iStatus), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Seq", SK_FIELD_OFFSET(IGGChatRoomResult_t, iSeq), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Owner", SK_FIELD_OFFSET(IGGChatRoomResult_t, iOwner), eTypeSKUint32, 0, 1, -1,
		"", 8, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "OwnerIDC", SK_FIELD_OFFSET(IGGChatRoomResult_t, iOwnerIDC), eTypeSKUint32, 0, 1, -1,
		"", 9, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UpdateTime", SK_FIELD_OFFSET(IGGChatRoomResult_t, iUpdateTime), eTypeSKUint32, 0, 1, -1,
		"", 10, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Type", SK_FIELD_OFFSET(IGGChatRoomResult_t, iType), eTypeSKUint32, 0, 1, -1,
		"", 11, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Dis", SK_FIELD_OFFSET(IGGChatRoomResult_t, iDis), eTypeSKUint32, 0, 1, -1,
		"", 12, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MaxMemberCount", SK_FIELD_OFFSET(IGGChatRoomResult_t, iMaxMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 13, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "NeedVerify", SK_FIELD_OFFSET(IGGChatRoomResult_t, iNeedVerify), eTypeSKUint32, 0, 1, -1,
		"", 14, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGSearchChatRoomResponse[] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGSearchChatRoomResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "ChatRoomResult", SK_FIELD_OFFSET(IGGSearchChatRoomResponse_t, tChatRoomResult), eTypeIGGChatRoomResult, 0, 1, -1,
		"", 2, sizeof(IGGChatRoomResult_t), sizeof(IGGChatRoomResult_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGSearchChatRoomResponse_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGSearchChatRoomResponse_t, ptMemberList), eTypeIGGChatRoomMember, 1, 0, -1,
		"MemberCount", 4, sizeof(IGGChatRoomMember_t *), sizeof(IGGChatRoomMember_t), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGAddChatRoomMemberRequest[] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGAddChatRoomMemberRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGAddChatRoomMemberRequest_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGAddChatRoomMemberRequest_t, ptMemberList), eTypeIGGMemberReq, 1, 0, -1,
		"MemberCount", 3, sizeof(IGGMemberReq_t*), sizeof(IGGMemberReq_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGAddChatRoomMemberRequest_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGAddChatRoomMemberResponse[] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGAddChatRoomMemberResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGAddChatRoomMemberResponse_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGAddChatRoomMemberResponse_t, ptMemberList), eTypeIGGMemberResp, 1, 0, -1,
		"MemberCount", 3, sizeof(IGGMemberResp_t*), sizeof(IGGMemberResp_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGAddChatRoomMemberResponse_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGAddGroupMemberRequest[] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGAddGroupMemberRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGAddGroupMemberRequest_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGAddGroupMemberRequest_t, ptMemberList), eTypeIGGMemberReq, 1, 0, -1,
		"MemberCount", 3, sizeof(IGGMemberReq_t*), sizeof(IGGMemberReq_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGAddGroupMemberRequest_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGAddGroupMemberResponse[] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGAddGroupMemberResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGAddGroupMemberResponse_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGAddGroupMemberResponse_t, ptMemberList), eTypeIGGMemberResp, 1, 0, -1,
		"MemberCount", 3, sizeof(IGGMemberResp_t*), sizeof(IGGMemberResp_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGAddGroupMemberResponse_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};



static const SKMetaField_t g_tMetaFieldListIGGDelChatRoomMemberRequest[] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGDelChatRoomMemberRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGDelChatRoomMemberRequest_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGDelChatRoomMemberRequest_t, ptMemberList), eTypeIGGDelMemberReq, 1, 0, -1,
		"MemberCount", 3, sizeof(IGGDelMemberReq_t*), sizeof(IGGDelMemberReq_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGDelChatRoomMemberRequest_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDelChatRoomMemberResponse[] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGDelChatRoomMemberResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGDelChatRoomMemberResponse_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGDelChatRoomMemberResponse_t, ptMemberList), eTypeIGGDelMemberResp, 1, 0, -1,
		"MemberCount", 3, sizeof(IGGDelMemberResp_t*), sizeof(IGGDelMemberResp_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGDelChatRoomMemberResponse_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDelGroupMemberRequest[] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGDelGroupMemberRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGDelGroupMemberRequest_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGDelGroupMemberRequest_t, ptMemberList), eTypeIGGDelMemberReq, 1, 0, -1,
		"MemberCount", 3, sizeof(IGGDelMemberReq_t*), sizeof(IGGDelMemberReq_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGDelGroupMemberRequest_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGDelGroupMemberResponse[] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGDelGroupMemberResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGDelGroupMemberResponse_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGDelGroupMemberResponse_t, ptMemberList), eTypeIGGDelMemberResp, 1, 0, -1,
		"MemberCount", 3, sizeof(IGGDelMemberResp_t*), sizeof(IGGDelMemberResp_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGDelGroupMemberResponse_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGLbsChatRoomRequest[] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGLbsChatRoomRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "Longitude", SK_FIELD_OFFSET(IGGLbsChatRoomRequest_t, fLongitude), eTypeSKFloat32, 0, 1, -1,
		"", 2, sizeof(float), sizeof(float), 0, 0 },
	{ "Latitude", SK_FIELD_OFFSET(IGGLbsChatRoomRequest_t, fLatitude), eTypeSKFloat32, 0, 1, -1,
		"", 3, sizeof(float), sizeof(float), 0, 0 },
	{ "GPSSource", SK_FIELD_OFFSET(IGGLbsChatRoomRequest_t, iGPSSource), eTypeSKInt32, 0, 0, -1,
		"", 4, sizeof(int), sizeof(int), 0, 0 },
	{ "SkipCount", SK_FIELD_OFFSET(IGGLbsChatRoomRequest_t, iSkipCount), eTypeSKUint32, 0, 0, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FetchCount", SK_FIELD_OFFSET(IGGLbsChatRoomRequest_t, iFetchCount), eTypeSKUint32, 0, 0, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGLbsChatRoom [] = {
	{ "ChatRoomInfo", SK_FIELD_OFFSET(IGGLbsChatRoom_t, tChatRoomInfo), eTypeIGGChatRoomResult, 0, 1, -1,
		"", 1, sizeof(IGGChatRoomResult_t), sizeof(IGGChatRoomResult_t), 0, 0 },
	{ "MemberCount", SK_FIELD_OFFSET(IGGLbsChatRoom_t, iMemberCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "MemberList", SK_FIELD_OFFSET(IGGLbsChatRoom_t, ptMemberList), eTypeIGGChatRoomMember, 1, 0, -1,
		"MemberCount", 3, sizeof(IGGChatRoomMember_t *), sizeof(IGGChatRoomMember_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGLbsChatRoomResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGLbsChatRoomResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "ChatRoomCount", SK_FIELD_OFFSET(IGGLbsChatRoomResponse_t, iChatRoomCount), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ChatRoomList", SK_FIELD_OFFSET(IGGLbsChatRoomResponse_t, tChatRoomList), eTypeIGGLbsChatRoom, 1, 0, -1,
		"ChatRoomCount", 3, sizeof(IGGLbsChatRoom_t *), sizeof(IGGLbsChatRoom_t), 0, 0 },
	{ "SkipCount", SK_FIELD_OFFSET(IGGLbsChatRoomResponse_t, iSkipCount), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGVerifyChatRoomMemberRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "Opcode", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberRequest_t, iOpcode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Name", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberRequest_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "VerifyMemberTicket", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberRequest_t, pcVerifyMemberTicket), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 },
	{ "VerifyContent", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberRequest_t, pcVerifyContent), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberRequest_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGVerifyChatRoomMemberResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "Opcode", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberResponse_t, iOpcode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Name", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberResponse_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGVerifyChatRoomMemberResponse_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGInviteChatRoomMemberRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGInviteChatRoomMemberRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "Opcode", SK_FIELD_OFFSET(IGGInviteChatRoomMemberRequest_t, iOpcode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Name", SK_FIELD_OFFSET(IGGInviteChatRoomMemberRequest_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "InviteMemberTicket", SK_FIELD_OFFSET(IGGInviteChatRoomMemberRequest_t, pcInviteMemberTicket), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 0, 0 },
	{ "InviteContent", SK_FIELD_OFFSET(IGGInviteChatRoomMemberRequest_t, pcInviteContent), eTypeSKChar, 1, 0, -1,
		"strlen", 5, sizeof(char *), sizeof(char), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGInviteChatRoomMemberRequest_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 6, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserCount", SK_FIELD_OFFSET(IGGInviteChatRoomMemberRequest_t, iUserCount), eTypeSKUint32, 0, 1, -1,
		"", 7, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserList", SK_FIELD_OFFSET(IGGInviteChatRoomMemberRequest_t, ptUserList), eTypeSKBuiltinString, 1, 0, -1,
		"UserCount", 8, sizeof(Comm::SKBuiltinString_t*), sizeof(Comm::SKBuiltinString_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGInviteChatRoomMemberResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGInviteChatRoomMemberResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "Opcode", SK_FIELD_OFFSET(IGGInviteChatRoomMemberResponse_t, iOpcode), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Name", SK_FIELD_OFFSET(IGGInviteChatRoomMemberResponse_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGInviteChatRoomMemberResponse_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserCount", SK_FIELD_OFFSET(IGGInviteChatRoomMemberResponse_t, iUserCount), eTypeSKUint32, 0, 1, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "UserList", SK_FIELD_OFFSET(IGGInviteChatRoomMemberResponse_t, ptUserList), eTypeSKBuiltinString, 1, 0, -1,
		"UserCount", 6, sizeof(Comm::SKBuiltinString_t*), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "StatusList", SK_FIELD_OFFSET(IGGInviteChatRoomMemberResponse_t, piStatusList), eTypeSKInt32, 1, 0, -1,
		"UserCount", 7, sizeof(int*), sizeof(int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGCloseChatRoomRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGCloseChatRoomRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGCloseChatRoomRequest_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "Pwd", SK_FIELD_OFFSET(IGGCloseChatRoomRequest_t, tPwd), eTypeSKBuiltinString, 0, 1, -1,
		"", 3, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGCloseChatRoomResponse[] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGCloseChatRoomResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 0, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGCloseChatRoomResponse_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};


//////////////////////////// »∫œ‡πÿEnd /////////////////////////////////////


//////////////////////////// ”¶”√…Ë÷√ /////////////////////////////////////

static const SKMetaField_t g_tMetaFieldListIGGPushSettingRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGPushSettingRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "OptCode", SK_FIELD_OFFSET(IGGPushSettingRequest_t, iOptCode), eTypeSKUint32, 0, 0, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },	
	{ "Token", SK_FIELD_OFFSET(IGGPushSettingRequest_t, pcToken), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
	{ "Sound", SK_FIELD_OFFSET(IGGPushSettingRequest_t, pcSound), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "Status", SK_FIELD_OFFSET(IGGPushSettingRequest_t, iStatus), eTypeSKUint32, 0, 0, -1,
		"", 5, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "VoipSound", SK_FIELD_OFFSET(IGGPushSettingRequest_t, pcVoipSound), eTypeSKChar, 1, 0, -1,
		"strlen", 6, sizeof(char *), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGPushSettingResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGPushSettingResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGModUserNameRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGModUserNameRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGModUserNameRequest_t, pcUserName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGModUserNameResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGModUserNameResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGModPwdRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGModPwdRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "OldPwd", SK_FIELD_OFFSET(IGGModPwdRequest_t, pcOldPwd), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },
	{ "NewPwd", SK_FIELD_OFFSET(IGGModPwdRequest_t, pcNewPwd), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
};

static const SKMetaField_t g_tMetaFieldListIGGModPwdResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGModPwdResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGModPwdByMobileRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGModPwdByMobileRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "Mobile", SK_FIELD_OFFSET(IGGModPwdByMobileRequest_t, pcMobile), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 1, 0 },	
	{ "Ticket", SK_FIELD_OFFSET(IGGModPwdByMobileRequest_t, pcTicket), eTypeSKChar, 1, 0, -1,
		"strlen", 3, sizeof(char *), sizeof(char), 1, 0 },
	{ "NewPwd", SK_FIELD_OFFSET(IGGModPwdByMobileRequest_t, pcNewPwd), eTypeSKChar, 1, 0, -1,
		"strlen", 4, sizeof(char *), sizeof(char), 1, 0 },
	{ "RandomEncryKey", SK_FIELD_OFFSET(IGGModPwdByMobileRequest_t, tRandomEncryKey), eTypeSKBuiltinString, 0, 1, -1,
		"", 5, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 1, 0 },	
};

static const SKMetaField_t g_tMetaFieldListIGGModPwdByMobileResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGModPwdByMobileResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 }
};

//////////////////////////// ”¶”√…Ë÷√End /////////////////////////////////////

//////////////////////////// æŸ±®Begin //////////////////////////////////////////


static const SKMetaField_t g_tMetaFieldListIGGReportProfileRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGReportProfileRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "UserName", SK_FIELD_OFFSET(IGGReportProfileRequest_t, tUserName), eTypeSKBuiltinString, 0, 1, -1,
		"", 2, sizeof(Comm::SKBuiltinString_t), sizeof(Comm::SKBuiltinString_t), 0, 0 },
	{ "ReportReason", SK_FIELD_OFFSET(IGGReportProfileRequest_t, iReportReason), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ReportTime", SK_FIELD_OFFSET(IGGReportProfileRequest_t, iReportTime), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGReportProfileResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGReportProfileResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 }
};


static const SKMetaField_t g_tMetaFieldListIGGReportGroupRequest [] = {
	{ "BaseRequest", SK_FIELD_OFFSET(IGGReportGroupRequest_t, tBaseRequest), eTypeIGGBaseRequest, 0, 1, -1,
		"", 1, sizeof(IGGBaseRequest_t), sizeof(IGGBaseRequest_t), 1, 0 },
	{ "ChatRoomId", SK_FIELD_OFFSET(IGGReportGroupRequest_t, iChatRoomId), eTypeSKUint32, 0, 1, -1,
		"", 2, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ReportReason", SK_FIELD_OFFSET(IGGReportGroupRequest_t, iReportReason), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "ReportTime", SK_FIELD_OFFSET(IGGReportGroupRequest_t, iReportTime), eTypeSKUint32, 0, 1, -1,
		"", 4, sizeof(unsigned int), sizeof(unsigned int), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListIGGReportGroupResponse [] = {
	{ "BaseResponse", SK_FIELD_OFFSET(IGGReportGroupResponse_t, tBaseResponse), eTypeIGGBaseResponse, 0, 1, -1,
		"", 1, sizeof(IGGBaseResponse_t), sizeof(IGGBaseResponse_t), 1, 0 }
};

//////////////////////////// æŸ±®End //////////////////////////////////////////



#ifndef MACOS
extern const SKMetaInfo_t * Comm::g_ptSKBuiltinMetaInfo;
#endif


static const SKMetaStruct_t g_tMetaIGGStructList [] = {
	{ eTypeIGGMicroMsgEchoInfo, "MicroMsgEchoInfo", sizeof(IGGMicroMsgEchoInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGMicroMsgEchoInfo), g_tMetaFieldListIGGMicroMsgEchoInfo },

	g_ptSKBuiltinMetaInfo->ptStructList[0],

	g_ptSKBuiltinMetaInfo->ptStructList[1],

	g_ptSKBuiltinMetaInfo->ptStructList[2],

	g_ptSKBuiltinMetaInfo->ptStructList[3],

	g_ptSKBuiltinMetaInfo->ptStructList[4],

	g_ptSKBuiltinMetaInfo->ptStructList[5],

	g_ptSKBuiltinMetaInfo->ptStructList[6],

	g_ptSKBuiltinMetaInfo->ptStructList[7],

	g_ptSKBuiltinMetaInfo->ptStructList[8],

	g_ptSKBuiltinMetaInfo->ptStructList[9],

	g_ptSKBuiltinMetaInfo->ptStructList[10],

	g_ptSKBuiltinMetaInfo->ptStructList[11],

	g_ptSKBuiltinMetaInfo->ptStructList[12],

	g_ptSKBuiltinMetaInfo->ptStructList[13],

	g_ptSKBuiltinMetaInfo->ptStructList[14],
	{ eTypeIGGBaseRequest, "BaseRequest", sizeof(IGGBaseRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGBaseRequest), g_tMetaFieldListIGGBaseRequest },
	{ eTypeIGGBuiltinIP, "BuiltinIP", sizeof(IGGBuiltinIP_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGBuiltinIP), g_tMetaFieldListIGGBuiltinIP },
	{ eTypeIGGBuiltinIPList, "BuiltinIPList", sizeof(IGGBuiltinIPList_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGBuiltinIPList), g_tMetaFieldListIGGBuiltinIPList },
	{ eTypeIGGCDNDnsInfo, "CDNDnsInfo", sizeof(IGGCDNDnsInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCDNDnsInfo), g_tMetaFieldListIGGCDNDnsInfo },
	{ eTypeIGGAuthRequest, "AuthRequest", sizeof(IGGAuthRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGAuthRequest), g_tMetaFieldListIGGAuthRequest },
	{ eTypeIGGRegRequest, "RegRequest", sizeof(IGGRegRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGRegRequest), g_tMetaFieldListIGGRegRequest },
	{ eTypeIGGBaseResponse, "BaseResponse", sizeof(IGGBaseResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGBaseResponse), g_tMetaFieldListIGGBaseResponse },
	{ eTypeIGGNetworkControl, "NetworkControl", sizeof(IGGNetworkControl_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGNetworkControl), g_tMetaFieldListIGGNetworkControl },
	{ eTypeIGGPluginKey, "PluginKey", sizeof(IGGPluginKey_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGPluginKey), g_tMetaFieldListIGGPluginKey },
	{ eTypeIGGPluginKeyList, "PluginKeyList", sizeof(IGGPluginKeyList_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGPluginKeyList), g_tMetaFieldListIGGPluginKeyList },
	{ eTypeIGGHost, "Host", sizeof(IGGHost_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGHost), g_tMetaFieldListIGGHost },
	{ eTypeIGGHostList, "HostList", sizeof(IGGHostList_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGHostList), g_tMetaFieldListIGGHostList },
	{ eTypeIGGAuthResponse, "AuthResponse", sizeof(IGGAuthResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGAuthResponse), g_tMetaFieldListIGGAuthResponse },
	{ eTypeIGGRegResponse, "RegResponse", sizeof(IGGRegResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGRegResponse), g_tMetaFieldListIGGRegResponse },
	{ eTypeIGGUserInfoSetRequest, "UserInfoSetRequest", sizeof(IGGUserInfoSetRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUserInfoSetRequest), g_tMetaFieldListIGGUserInfoSetRequest },
	{ eTypeIGGUserInfoSetResponse, "UserInfoSetResponse", sizeof(IGGUserInfoSetResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUserInfoSetResponse), g_tMetaFieldListIGGUserInfoSetResponse },
	{ eTypeIGGCmdItem, "CmdItem", sizeof(IGGCmdItem_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCmdItem), g_tMetaFieldListIGGCmdItem },
	{ eTypeIGGNewInitRequest, "NewInitRequest", sizeof(IGGNewInitRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGNewInitRequest), g_tMetaFieldListIGGNewInitRequest },
	{ eTypeIGGNewInitResponse, "NewInitResponse", sizeof(IGGNewInitResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGNewInitResponse), g_tMetaFieldListIGGNewInitResponse },
	{ eTypeIGGSnsUserInfo, "SnsUserInfo", sizeof(IGGSnsUserInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSnsUserInfo), g_tMetaFieldListIGGSnsUserInfo },
	{ eTypeIGGCustomizedInfo, "CustomizedInfo", sizeof(IGGCustomizedInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCustomizedInfo), g_tMetaFieldListIGGCustomizedInfo },
	{ eTypeIGGSearchContactRequest, "SearchContactRequest", sizeof(IGGSearchContactRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSearchContactRequest), g_tMetaFieldListIGGSearchContactRequest },
	{ eTypeIGGSearchContactItem, "SearchContactItem", sizeof(IGGSearchContactItem_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSearchContactItem), g_tMetaFieldListIGGSearchContactItem },
	{ eTypeIGGSearchContactResponse, "SearchContactResponse", sizeof(IGGSearchContactResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSearchContactResponse), g_tMetaFieldListIGGSearchContactResponse },
	{ eTypeIGGVerifyUser, "VerifyUser", sizeof(IGGVerifyUser_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGVerifyUser), g_tMetaFieldListIGGVerifyUser },
	{ eTypeIGGVerifyUserRequest, "VerifyUserRequest", sizeof(IGGVerifyUserRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGVerifyUserRequest), g_tMetaFieldListIGGVerifyUserRequest },
	{ eTypeIGGVerifyUserResponse, "VerifyUserResponse", sizeof(IGGVerifyUserResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGVerifyUserResponse), g_tMetaFieldListIGGVerifyUserResponse },
	{ eTypeIGGPossibleFriend, "PossibleFriend", sizeof(IGGPossibleFriend_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGPossibleFriend), g_tMetaFieldListIGGPossibleFriend },
	{ eTypeIGGSyncFriendRequest, "SyncFriendRequest", sizeof(IGGSyncFriendRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSyncFriendRequest), g_tMetaFieldListIGGSyncFriendRequest },
	{ eTypeIGGSyncFriendResponse, "SyncFriendResponse", sizeof(IGGSyncFriendResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSyncFriendResponse), g_tMetaFieldListIGGSyncFriendResponse },
	{ eTypeIGGRoomInfo, "RoomInfo", sizeof(IGGRoomInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGRoomInfo), g_tMetaFieldListIGGRoomInfo },
	{ eTypeIGGModContact, "ModContact", sizeof(IGGModContact_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModContact), g_tMetaFieldListIGGModContact },
	{ eTypeIGGChatRoomMember, "LbsChatRoomMember", sizeof(IGGChatRoomMember_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGChatRoomMember), g_tMetaFieldListIGGChatRoomMember },
	{ eTypeIGGGetContactRequest, "GetContactRequest", sizeof(IGGGetContactRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetContactRequest), g_tMetaFieldListIGGGetContactRequest },
	{ eTypeIGGGetContactResponse, "GetContactResponse", sizeof(IGGGetContactResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetContactResponse), g_tMetaFieldListIGGGetContactResponse },
	{ eTypeIGGDelContact, "DelContact", sizeof(IGGDelContact_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDelContact), g_tMetaFieldListIGGDelContact },

	{ eTypeIGGAuthBySKRequest, "AuthBySKRequest", sizeof(IGGAuthBySKRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGAuthBySKRequest), g_tMetaFieldListIGGAuthBySKRequest },
	{ eTypeIGGAuthBySKResponse, "AuthBySKResponse", sizeof(IGGAuthBySKResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGAuthBySKResponse), g_tMetaFieldListIGGAuthBySKResponse },
	{ eTypeIGGMicroMsgRequest, "MicroMsgRequest", sizeof(IGGMicroMsgRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGMicroMsgRequest), g_tMetaFieldListIGGMicroMsgRequest },
	{ eTypeIGGSendMsgRequest, "SendMsgRequest", sizeof(IGGSendMsgRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSendMsgRequest), g_tMetaFieldListIGGSendMsgRequest },
	{ eTypeIGGMicroMsgResponse, "MicroMsgResponse", sizeof(IGGMicroMsgResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGMicroMsgResponse), g_tMetaFieldListIGGMicroMsgResponse },
	{ eTypeIGGSendMsgResponse, "SendMsgResponse", sizeof(IGGSendMsgResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSendMsgResponse), g_tMetaFieldListIGGSendMsgResponse },
		
//ÂêåÊ?•Ê∂àÊÅ?		
	{ eTypeIGGCmdList, "CmdList", sizeof(IGGCmdList_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCmdList), g_tMetaFieldListIGGCmdList },
	{ eTypeIGGOpCmdResp, "OpCmdResp", sizeof(IGGOpCmdResp_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGOpCmdResp), g_tMetaFieldListIGGOpCmdResp },
	{ eTypeIGGOpCmdRespList, "OpCmdRespList", sizeof(IGGOpCmdRespList_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGOpCmdRespList), g_tMetaFieldListIGGOpCmdRespList },
	{ eTypeIGGAddMsg, "AddMsg", sizeof(IGGAddMsg_t),
	SK_ARRAY_SIZE(g_tMetaFieldListIGGAddMsg), g_tMetaFieldListIGGAddMsg },
	{ eTypeIGGKeyVal, "KeyVal", sizeof(IGGKeyVal_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGKeyVal), g_tMetaFieldListIGGKeyVal },
	{ eTypeIGGSyncKey, "SyncKey", sizeof(IGGSyncKey_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSyncKey), g_tMetaFieldListIGGSyncKey },
	{ eTypeIGGNewSyncRequest, "NewSyncRequest", sizeof(IGGNewSyncRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGNewSyncRequest), g_tMetaFieldListIGGNewSyncRequest },
	{ eTypeIGGNewSyncResponse, "NewSyncResponse", sizeof(IGGNewSyncResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGNewSyncResponse), g_tMetaFieldListIGGNewSyncResponse },
	{ eTypeIGGSyncRequest, "SyncRequest", sizeof(IGGSyncRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSyncRequest), g_tMetaFieldListIGGSyncRequest },
	{ eTypeIGGSyncResponse, "SyncResponse", sizeof(IGGSyncResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSyncResponse), g_tMetaFieldListIGGSyncResponse },
		
//Â§¥ÂÉè	
	{ eTypeIGGBatchGetHeadImgRequest, "BatchGetHeadImgRequest", sizeof(IGGBatchGetHeadImgRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGBatchGetHeadImgRequest), g_tMetaFieldListIGGBatchGetHeadImgRequest },
	{ eTypeIGGImgPair, "ImgPair", sizeof(IGGImgPair_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGImgPair), g_tMetaFieldListIGGImgPair },
	{ eTypeIGGBatchGetHeadImgResponse, "BatchGetHeadImgResponse", sizeof(IGGBatchGetHeadImgResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGBatchGetHeadImgResponse), g_tMetaFieldListIGGBatchGetHeadImgResponse },
	{ eTypeIGGUploadHDHeadImgRequest, "UploadHDHeadImgRequest", sizeof(IGGUploadHDHeadImgRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadHDHeadImgRequest), g_tMetaFieldListIGGUploadHDHeadImgRequest },
	{ eTypeIGGUploadHDHeadImgResponse, "UploadHDHeadImgResponse", sizeof(IGGUploadHDHeadImgResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadHDHeadImgResponse), g_tMetaFieldListIGGUploadHDHeadImgResponse },
	{ eTypeIGGGetHDHeadImgRequest, "GetHDHeadImgRequest", sizeof(IGGGetHDHeadImgRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetHDHeadImgRequest), g_tMetaFieldListIGGGetHDHeadImgRequest },
	{ eTypeIGGGetHDHeadImgResponse, "GetHDHeadImgResponse", sizeof(IGGGetHDHeadImgResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetHDHeadImgResponse), g_tMetaFieldListIGGGetHDHeadImgResponse },
//ËØ?Èü?
	{ eTypeIGGUploadVoiceRequest, "UploadVoiceRequest", sizeof(IGGUploadVoiceRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadVoiceRequest), g_tMetaFieldListIGGUploadVoiceRequest },
	{ eTypeIGGUploadVoiceResponse, "UploadVoiceResponse", sizeof(IGGUploadVoiceResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadVoiceResponse), g_tMetaFieldListIGGUploadVoiceResponse },
	{ eTypeIGGDownloadVoiceRequest, "DownloadVoiceRequest", sizeof(IGGDownloadVoiceRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDownloadVoiceRequest), g_tMetaFieldListIGGDownloadVoiceRequest },
	{ eTypeIGGDownloadVoiceResponse, "DownloadVoiceResponse", sizeof(IGGDownloadVoiceResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDownloadVoiceResponse), g_tMetaFieldListIGGDownloadVoiceResponse },		
//Ê∂àÊÅØÂõæÁâá		
	{ eTypeIGGUploadMsgImgRequest, "UploadMsgImgRequest", sizeof(IGGUploadMsgImgRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadMsgImgRequest), g_tMetaFieldListIGGUploadMsgImgRequest },
	{ eTypeIGGUploadMsgImgResponse, "UploadMsgImgResponse", sizeof(IGGUploadMsgImgResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadMsgImgResponse), g_tMetaFieldListIGGUploadMsgImgResponse },
	{ eTypeIGGDownloadMsgImgRequest, "GetMsgImgRequest", sizeof(IGGDownloadMsgImgRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDownloadMsgImgRequest), g_tMetaFieldListIGGDownloadMsgImgRequest },
	{ eTypeIGGDownloadMsgImgResponse, "GetMsgImgResponse", sizeof(IGGDownloadMsgImgResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDownloadMsgImgResponse), g_tMetaFieldListIGGDownloadMsgImgResponse },
//ËßÜÈ??
	{ eTypeIGGUploadVideoRequest, "UploadVideoRequest", sizeof(IGGUploadVideoRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadVideoRequest), g_tMetaFieldListIGGUploadVideoRequest },
	{ eTypeIGGUploadVideoResponse, "UploadVideoResponse", sizeof(IGGUploadVideoResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadVideoResponse), g_tMetaFieldListIGGUploadVideoResponse },
	{ eTypeIGGDownloadVideoRequest, "DownloadVideoRequest", sizeof(IGGDownloadVideoRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDownloadVideoRequest), g_tMetaFieldListIGGDownloadVideoRequest },
	{ eTypeIGGDownloadVideoResponse, "DownloadVideoResponse", sizeof(IGGDownloadVideoResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDownloadVideoResponse), g_tMetaFieldListIGGDownloadVideoResponse },

// ÈôÑËøëÁöÑ‰∫∫
	{ eTypeIGGLbsRequest, "LbsRequest", sizeof(IGGLbsRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGLbsRequest), g_tMetaFieldListIGGLbsRequest },
	{ eTypeIGGLbsContactInfo, "LbsContactInfo", sizeof(IGGLbsContactInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGLbsContactInfo), g_tMetaFieldListIGGLbsContactInfo },
	{ eTypeIGGLbsResponse, "LbsResponse", sizeof(IGGLbsResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGLbsResponse), g_tMetaFieldListIGGLbsResponse },
	{ eTypeIGGGetLocationRequest, "GetLocationRequest", sizeof(IGGGetLocationRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetLocationRequest), g_tMetaFieldListIGGGetLocationRequest },
	{ eTypeIGGGetLocationResponse, "GetLocationResponse", sizeof(IGGGetLocationResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetLocationResponse), g_tMetaFieldListIGGGetLocationResponse },
	{ eTypeIGGLbsMatchRequest, "LbsMatchRequest", sizeof(IGGLbsMatchRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGLbsMatchRequest), g_tMetaFieldListIGGLbsMatchRequest },
	{ eTypeIGGLbsMatchResponse, "LbsMatchResponse", sizeof(IGGLbsMatchResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGLbsMatchResponse), g_tMetaFieldListIGGLbsMatchResponse },
	{ eTypeIGGSyncLbsMatchRequest, "SyncLbsMatchRequest", sizeof(IGGSyncLbsMatchRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSyncLbsMatchRequest), g_tMetaFieldListIGGSyncLbsMatchRequest },
	{ eTypeIGGSyncLbsMatchResponse, "SyncLbsMatchResponse", sizeof(IGGSyncLbsMatchResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSyncLbsMatchResponse), g_tMetaFieldListIGGSyncLbsMatchResponse },
	{ eTypeIGGLbsMatchContactInfo, "LbsMatchContactInfo", sizeof(IGGLbsMatchContactInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGLbsMatchContactInfo), g_tMetaFieldListIGGLbsMatchContactInfo },

//Ëá?ÂÆö‰πâË°®Ê??	
{ eTypeIGGEmojiUploadInfoReq, "UploadEmojiRequest", sizeof(IGGEmojiUploadInfoReq_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGEmojiUploadInfoReq), g_tMetaFieldListIGGEmojiUploadInfoReq },
	{ eTypeIGGUploadEmojiRequest, "UploadEmojiRequest", sizeof(IGGUploadEmojiRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadEmojiRequest), g_tMetaFieldListIGGUploadEmojiRequest },
	{ eTypeIGGEmojiUploadInfoResp, "EmojiUploadInfoResp", sizeof(IGGEmojiUploadInfoResp_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGEmojiUploadInfoResp), g_tMetaFieldListIGGEmojiUploadInfoResp },
	{ eTypeIGGUploadEmojiResponse, "UploadEmojiResponse", sizeof(IGGUploadEmojiResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadEmojiResponse), g_tMetaFieldListIGGUploadEmojiResponse },
	{ eTypeIGGEmojiDownloadInfoReq, "EmojiDownloadInfoReq", sizeof(IGGEmojiDownloadInfoReq_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGEmojiDownloadInfoReq), g_tMetaFieldListIGGEmojiDownloadInfoReq },
	{ eTypeIGGDownloadEmojiRequest, "DownloadEmojiRequest", sizeof(IGGDownloadEmojiRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDownloadEmojiRequest), g_tMetaFieldListIGGDownloadEmojiRequest },
	{ eTypeIGGEmojiDownloadInfoResp, "EmojiDownloadInfoResp", sizeof(IGGEmojiDownloadInfoResp_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGEmojiDownloadInfoResp), g_tMetaFieldListIGGEmojiDownloadInfoResp },
	{ eTypeIGGDownloadEmojiResponse, "DownloadEmojiResponse", sizeof(IGGDownloadEmojiResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDownloadEmojiResponse), g_tMetaFieldListIGGDownloadEmojiResponse },
//////////////////////////////// »∫œ‡πÿBegin ////////////////////////////////////
	{ eTypeIGGModChatRoomNotify, "ModChatRoomNotify", sizeof(IGGModChatRoomNotify_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModChatRoomNotify), g_tMetaFieldListIGGModChatRoomNotify },
	{ eTypeIGGModChatRoomMember, "ModChatRoomMember", sizeof(IGGModChatRoomMember_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModChatRoomMember), g_tMetaFieldListIGGModChatRoomMember },
	{ eTypeIGGQuitChatRoom, "QuitChatRoom", sizeof(IGGQuitChatRoom_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGQuitChatRoom), g_tMetaFieldListIGGQuitChatRoom },
	{ eTypeIGGQuitChatRoomRequest, "QuitChatRoomRequest", sizeof(IGGQuitChatRoomRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGQuitChatRoomRequest), g_tMetaFieldListIGGQuitChatRoomRequest },
	{ eTypeIGGQuitChatRoomResponse, "QuitChatRoomResponse", sizeof(IGGQuitChatRoomResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGQuitChatRoomResponse), g_tMetaFieldListIGGQuitChatRoomResponse },
	{ eTypeIGGModChatRoomTopic, "ModChatRoomTopic", sizeof(IGGModChatRoomTopic_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModChatRoomTopic), g_tMetaFieldListIGGModChatRoomTopic },	
	{ eTypeIGGModGroupTopic, "ModGroupTopic", sizeof(IGGModGroupTopic_t),
			SK_ARRAY_SIZE(g_tMetaFieldListIGGModGroupTopic), g_tMetaFieldListIGGModGroupTopic },
	{ eTypeIGGModChatRoomMemberDisplayName, "ModChatRoomMemberDisplayName", sizeof(IGGModChatRoomMemberDisplayName_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModChatRoomMemberDisplayName), g_tMetaFieldListIGGModChatRoomMemberDisplayName },
	{ eTypeIGGModChatRoomMemberFlag, "ModChatRoomMemberFlag", sizeof(IGGModChatRoomMemberFlag_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModChatRoomMemberFlag), g_tMetaFieldListIGGModChatRoomMemberFlag },
	{ eTypeIGGMemberReq, "MemberReq", sizeof(IGGMemberReq_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGMemberReq), g_tMetaFieldListIGGMemberReq },
	{ eTypeIGGMemberResp, "MemberResp", sizeof(IGGMemberResp_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGMemberResp), g_tMetaFieldListIGGMemberResp },
	{ eTypeIGGDelMemberReq, "DelMemberReq", sizeof(IGGDelMemberReq_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDelMemberReq), g_tMetaFieldListIGGDelMemberReq },
	{ eTypeIGGDelMemberResp, "DelMemberResp", sizeof(IGGDelMemberResp_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDelMemberResp), g_tMetaFieldListIGGDelMemberResp },
	{ eTypeIGGCreateChatRoomRequest, "CreateChatRoomRequest", sizeof(IGGCreateChatRoomRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCreateChatRoomRequest), g_tMetaFieldListIGGCreateChatRoomRequest },
	{ eTypeIGGCreateChatRoomResponse, "CreateChatRoomResponse", sizeof(IGGCreateChatRoomResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCreateChatRoomResponse), g_tMetaFieldListIGGCreateChatRoomResponse },
	{ eTypeIGGSearchChatRoomRequest, "SearchChatRoomRequest", sizeof(IGGSearchChatRoomRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSearchChatRoomRequest), g_tMetaFieldListIGGSearchChatRoomRequest },
	{ eTypeIGGChatRoomResult, "ChatRoomResult", sizeof(IGGChatRoomResult_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGChatRoomResult), g_tMetaFieldListIGGChatRoomResult },
	{ eTypeIGGSearchChatRoomResponse, "SearchChatRoomResponse", sizeof(IGGSearchChatRoomResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSearchChatRoomResponse), g_tMetaFieldListIGGSearchChatRoomResponse },
	{ eTypeIGGAddChatRoomMemberRequest, "AddChatRoomMemberRequest", sizeof(IGGAddChatRoomMemberRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGAddChatRoomMemberRequest), g_tMetaFieldListIGGAddChatRoomMemberRequest },
	{ eTypeIGGAddChatRoomMemberResponse, "AddChatRoomMemberResponse", sizeof(IGGAddChatRoomMemberResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGAddChatRoomMemberResponse), g_tMetaFieldListIGGAddChatRoomMemberResponse },
	{ eTypeIGGDelChatRoomMemberRequest, "DelChatRoomMemberRequest", sizeof(IGGDelChatRoomMemberRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDelChatRoomMemberRequest), g_tMetaFieldListIGGDelChatRoomMemberRequest },
	{ eTypeIGGDelChatRoomMemberResponse, "DelChatRoomMemberResponse", sizeof(IGGDelChatRoomMemberResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDelChatRoomMemberResponse), g_tMetaFieldListIGGDelChatRoomMemberResponse },
	{ eTypeIGGLbsChatRoomRequest, "LbsChatRoomRequest", sizeof(IGGLbsChatRoomRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGLbsChatRoomRequest), g_tMetaFieldListIGGLbsChatRoomRequest },
	{ eTypeIGGLbsChatRoom, "LbsChatRoom", sizeof(IGGLbsChatRoom_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGLbsChatRoom), g_tMetaFieldListIGGLbsChatRoom },
	{ eTypeIGGLbsChatRoomResponse, "LbsChatRoomResponse", sizeof(IGGLbsChatRoomResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGLbsChatRoomResponse), g_tMetaFieldListIGGLbsChatRoomResponse },
	{ eTypeIGGVerifyChatRoomMemberRequest, "VerifyChatRoomMemberRequest", sizeof(IGGVerifyChatRoomMemberRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGVerifyChatRoomMemberRequest), g_tMetaFieldListIGGVerifyChatRoomMemberRequest },
	{ eTypeIGGVerifyChatRoomMemberResponse, "VerifyChatRoomMemberResponse", sizeof(IGGVerifyChatRoomMemberResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGVerifyChatRoomMemberResponse), g_tMetaFieldListIGGVerifyChatRoomMemberResponse },
	{ eTypeIGGInviteChatRoomMemberRequest, "InviteChatRoomMemberRequest", sizeof(IGGInviteChatRoomMemberRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGInviteChatRoomMemberRequest), g_tMetaFieldListIGGInviteChatRoomMemberRequest },
	{ eTypeIGGInviteChatRoomMemberResponse, "InviteChatRoomMemberResponse", sizeof(IGGInviteChatRoomMemberResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGInviteChatRoomMemberResponse), g_tMetaFieldListIGGInviteChatRoomMemberResponse },
	{ eTypeIGGCloseChatRoomRequest, "CloseChatRoomRequest", sizeof(IGGCloseChatRoomRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCloseChatRoomRequest), g_tMetaFieldListIGGCloseChatRoomRequest },
	{ eTypeIGGCloseChatRoomResponse, "CloseChatRoomResponse", sizeof(IGGCloseChatRoomResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCloseChatRoomResponse), g_tMetaFieldListIGGCloseChatRoomResponse },

	{ eTypeIGGQuitGroupRequest, "QuitGroupRequest", sizeof(IGGQuitGroupRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGQuitGroupRequest), g_tMetaFieldListIGGQuitGroupRequest },
	{ eTypeIGGQuitGroupResponse, "QuitGroupResponse", sizeof(IGGQuitGroupResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGQuitGroupResponse), g_tMetaFieldListIGGQuitGroupResponse },
	{ eTypeIGGAddGroupMemberRequest, "AddGroupMemberRequest", sizeof(IGGAddGroupMemberRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGAddGroupMemberRequest), g_tMetaFieldListIGGAddGroupMemberRequest },
	{ eTypeIGGAddGroupMemberResponse, "AddGroupMemberResponse", sizeof(IGGAddGroupMemberResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGAddGroupMemberResponse), g_tMetaFieldListIGGAddGroupMemberResponse },
	{ eTypeIGGDelGroupMemberRequest, "DelGroupMemberRequest", sizeof(IGGDelGroupMemberRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDelGroupMemberRequest), g_tMetaFieldListIGGDelGroupMemberRequest },
	{ eTypeIGGDelGroupMemberResponse, "DelGroupMemberResponse", sizeof(IGGDelGroupMemberResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDelGroupMemberResponse), g_tMetaFieldListIGGDelGroupMemberResponse },
	{ eTypeIGGCreateGroupRequest, "CreateGroupRequest", sizeof(IGGCreateGroupRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCreateGroupRequest), g_tMetaFieldListIGGCreateGroupRequest },
	{ eTypeIGGCreateGroupResponse, "CreateGroupResponse", sizeof(IGGCreateGroupResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGCreateGroupResponse), g_tMetaFieldListIGGCreateGroupResponse },

//////////////////////////////// »∫œ‡πÿEnd //////////////////////////////////////

//Profile, add by yihuang
	{ eTypeIGGDisturbTimeSpan, "DisturbTimeSpan", sizeof(IGGDisturbTimeSpan_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDisturbTimeSpan), g_tMetaFieldListIGGDisturbTimeSpan },
	{ eTypeIGGDisturbSetting, "DisturbSetting", sizeof(IGGDisturbSetting_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGDisturbSetting), g_tMetaFieldListIGGDisturbSetting },
	{ eTypeIGGGmailInfo, "GmailInfo", sizeof(IGGGmailInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGmailInfo), g_tMetaFieldListIGGGmailInfo },
	{ eTypeIGGGmailList, "GmailList", sizeof(IGGGmailList_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGmailList), g_tMetaFieldListIGGGmailList },
	{ eTypeIGGFacebookInfo, "FacebookInfo", sizeof(IGGFacebookInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGFacebookInfo), g_tMetaFieldListIGGFacebookInfo },
	{ eTypeIGGSafeDevice, "SafeDevice", sizeof(IGGSafeDevice_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSafeDevice), g_tMetaFieldListIGGSafeDevice },
	{ eTypeIGGSafeDeviceList, "SafeDeviceList", sizeof(IGGSafeDeviceList_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGSafeDeviceList), g_tMetaFieldListIGGSafeDeviceList },
	{ eTypeIGGUserInfoExt, "UserInfoExt", sizeof(IGGUserInfoExt_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUserInfoExt), g_tMetaFieldListIGGUserInfoExt },
	{ eTypeIGGModUserInfo, "ModUserInfo", sizeof(IGGModUserInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModUserInfo), g_tMetaFieldListIGGModUserInfo },
	{ eTypeIGGGetProfileRequest, "GetProfileRequest", sizeof(IGGGetProfileRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetProfileRequest), g_tMetaFieldListIGGGetProfileRequest },
	{ eTypeIGGGetProfileResponse, "GetProfileResponse", sizeof(IGGGetProfileResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetProfileResponse), g_tMetaFieldListIGGGetProfileResponse },
	{ eTypeIGGUploadCoverImgRequest, "UploadCoverImgRequest", sizeof(IGGUploadCoverImgRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadCoverImgRequest), g_tMetaFieldListIGGUploadCoverImgRequest },
	{ eTypeIGGUploadCoverImgResponse, "UploadCoverImgResponse", sizeof(IGGUploadCoverImgResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadCoverImgResponse), g_tMetaFieldListIGGUploadCoverImgResponse },
	{ eTypeIGGGetCoverImgRequest, "GetCoverImgRequest", sizeof(IGGGetCoverImgRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetCoverImgRequest), g_tMetaFieldListIGGGetCoverImgRequest },
	{ eTypeIGGGetCoverImgResponse, "GetCoverImgResponse", sizeof(IGGGetCoverImgResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGGetCoverImgResponse), g_tMetaFieldListIGGGetCoverImgResponse },
	{ eTypeIGGHobby, "Hobby", sizeof(IGGHobby_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGHobby), g_tMetaFieldListIGGHobby },
	{ eTypeIGGBirthday, "Birthday", sizeof(IGGBirthday_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGBirthday), g_tMetaFieldListIGGBirthday },
	{ eTypeIGGFunctionSwitch, "FunctionSwitch", sizeof(IGGFunctionSwitch_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGFunctionSwitch), g_tMetaFieldListIGGFunctionSwitch },
	//
	{ eTypeIGGMobileOptRequest, "MobileOptRequest", sizeof(IGGMobileOptRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGMobileOptRequest), g_tMetaFieldListIGGMobileOptRequest },
	{ eTypeIGGMobileOptResponse, "MobileOptResponse", sizeof(IGGMobileOptResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGMobileOptResponse), g_tMetaFieldListIGGMobileOptResponse },

	{ eTypeIGGEmailOptRequest, "EmailOptRequest", sizeof(IGGEmailOptRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGEmailOptRequest), g_tMetaFieldListIGGEmailOptRequest },
	{ eTypeIGGEmailOptResponse, "EmailOptResponse", sizeof(IGGEmailOptResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGEmailOptResponse), g_tMetaFieldListIGGEmailOptResponse },

	{ eTypeIGGUploadPlugFriendsRequest, "UploadPlugFriendsRequest", sizeof(IGGUploadPlugFriendsRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadPlugFriendsRequest), g_tMetaFieldListIGGUploadPlugFriendsRequest },
	{ eTypeIGGUploadPlugFriendsResponse, "UploadPlugFriendsResponse", sizeof(IGGUploadPlugFriendsResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGUploadPlugFriendsResponse), g_tMetaFieldListIGGUploadPlugFriendsResponse },

	{ eTypeIGGPushSettingRequest, "PushSettingRequest", sizeof(IGGPushSettingRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGPushSettingRequest), g_tMetaFieldListIGGPushSettingRequest },
	{ eTypeIGGPushSettingResponse, "PushSettingResponse", sizeof(IGGPushSettingResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGPushSettingResponse), g_tMetaFieldListIGGPushSettingResponse },

	{ eTypeIGGModUserNameRequest, "ModUserNameRequest", sizeof(IGGModUserNameRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModUserNameRequest), g_tMetaFieldListIGGModUserNameRequest },
	{ eTypeIGGModUserNameResponse, "ModUserNameResponse", sizeof(IGGModUserNameResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModUserNameResponse), g_tMetaFieldListIGGModUserNameResponse },

	{ eTypeIGGModPwdRequest, "ModPwdRequest", sizeof(IGGModPwdRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModPwdRequest), g_tMetaFieldListIGGModPwdRequest },
	{ eTypeIGGModPwdResponse, "ModPwdResponse", sizeof(IGGModPwdResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModPwdResponse), g_tMetaFieldListIGGModPwdResponse },

	{ eTypeIGGModPwdByMobileRequest, "ModPwdByMobileRequest", sizeof(IGGModPwdByMobileRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModPwdByMobileRequest), g_tMetaFieldListIGGModPwdByMobileRequest },
	{ eTypeIGGModPwdByMobileResponse, "ModPwdByMobileResponse", sizeof(IGGModPwdByMobileResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGModPwdByMobileResponse), g_tMetaFieldListIGGModPwdByMobileResponse },

	{ eTypeIGGReportProfileRequest, "ReportProfileRequest", sizeof(IGGReportProfileRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGReportProfileRequest), g_tMetaFieldListIGGReportProfileRequest },
	{ eTypeIGGReportProfileResponse, "ReportProfileResponse", sizeof(IGGReportProfileResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGReportProfileResponse), g_tMetaFieldListIGGReportProfileResponse },

	{ eTypeIGGReportGroupRequest, "ReportGroupRequest", sizeof(IGGReportGroupRequest_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGReportGroupRequest), g_tMetaFieldListIGGReportGroupRequest },
	{ eTypeIGGReportGroupResponse, "ReportGroupResponse", sizeof(IGGReportGroupResponse_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGReportGroupResponse), g_tMetaFieldListIGGReportGroupResponse },

	{ eTypeIGGWebProxyInfo, "WebProxyInfo", sizeof(IGGWebProxyInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListIGGWebProxyInfo), g_tMetaFieldListIGGWebProxyInfo },
};

static const SKMetaInfo_t g_tMetaIGGMicroMsg = {
	"MM", "MicroMsg", 10000,
	SK_ARRAY_SIZE(g_tMetaIGGStructList), g_tMetaIGGStructList,
	SK_ARRAY_SIZE(g_tMetaIGGFuncList), g_tMetaIGGFuncList
};

const SKMetaInfo_t * g_ptIGGMicroMsgMetaInfo = &g_tMetaIGGMicroMsg;
const static SKMetaInfoFinder g_objIGGMicroMsgMetaInfoFinder(g_ptIGGMicroMsgMetaInfo);
const SKMetaInfoFinder *  g_ptIGGMicroMsgMetaInfoFinder=&g_objIGGMicroMsgMetaInfoFinder;

//============================================================

#ifdef MACOS
int IGGMicroMsgPickle :: m_iNetworkByteOrder = 0;
int IGGMicroMsgPickle :: m_iPickleType = ePickleTypeTlv;
int IGGMicroMsgPickle :: m_iPickleStatus = 0;
#else
__thread int IGGMicroMsgPickle :: m_iNetworkByteOrder = 0;
__thread int IGGMicroMsgPickle :: m_iPickleType = ePickleTypeTlv;
__thread int IGGMicroMsgPickle :: m_iPickleStatus = 0;
#endif
void IGGMicroMsgPickle :: SetNetworkByteOrder( int iNetworkByteOrder )
{
	m_iNetworkByteOrder = iNetworkByteOrder;
}

void IGGMicroMsgPickle :: SetPickleType( int iPickleType )
{
	m_iPickleType = iPickleType;
}

int IGGMicroMsgPickle :: GetPickleType()
{
	return m_iPickleType;
}

void IGGMicroMsgPickle :: SetPickleStatus( int iStatus )
{
	m_iPickleStatus = iStatus;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGMicroMsgEchoInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMicroMsgEchoInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMicroMsgEchoInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMicroMsgEchoInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGMicroMsgEchoInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMicroMsgEchoInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGMicroMsgEchoInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGMicroMsgEchoInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGMicroMsgEchoInfo_t * pDestStruct, const IGGMicroMsgEchoInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGMicroMsgEchoInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGMicroMsgEchoInfo_t * ptStruct1, IGGMicroMsgEchoInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGMicroMsgEchoInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGMicroMsgEchoInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMicroMsgEchoInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMicroMsgEchoInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMicroMsgEchoInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGMicroMsgEchoInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMicroMsgEchoInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGBaseRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBaseRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBaseRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBaseRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGBaseRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBaseRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGBaseRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGBaseRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGBaseRequest_t * pDestStruct, const IGGBaseRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGBaseRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGBaseRequest_t * ptStruct1, IGGBaseRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGBaseRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGBaseRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBaseRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBaseRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBaseRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGBaseRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBaseRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGBuiltinIP_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBuiltinIP, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBuiltinIP, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBuiltinIP_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGBuiltinIP, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBuiltinIP, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGBuiltinIP_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGBuiltinIP, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGBuiltinIP_t * pDestStruct, const IGGBuiltinIP_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGBuiltinIP, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGBuiltinIP_t * ptStruct1, IGGBuiltinIP_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGBuiltinIP, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGBuiltinIP_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBuiltinIP, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBuiltinIP, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBuiltinIP_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGBuiltinIP, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBuiltinIP, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGBuiltinIPList_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBuiltinIPList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBuiltinIPList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBuiltinIPList_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGBuiltinIPList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBuiltinIPList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGBuiltinIPList_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGBuiltinIPList, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGBuiltinIPList_t * pDestStruct, const IGGBuiltinIPList_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGBuiltinIPList, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGBuiltinIPList_t * ptStruct1, IGGBuiltinIPList_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGBuiltinIPList, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGBuiltinIPList_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBuiltinIPList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBuiltinIPList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBuiltinIPList_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGBuiltinIPList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBuiltinIPList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGCDNDnsInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCDNDnsInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCDNDnsInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCDNDnsInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCDNDnsInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCDNDnsInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCDNDnsInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCDNDnsInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCDNDnsInfo_t * pDestStruct, const IGGCDNDnsInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCDNDnsInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCDNDnsInfo_t * ptStruct1, IGGCDNDnsInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCDNDnsInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCDNDnsInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCDNDnsInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCDNDnsInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCDNDnsInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCDNDnsInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCDNDnsInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGAuthRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAuthRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAuthRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAuthRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGAuthRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAuthRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGAuthRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGAuthRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGAuthRequest_t * pDestStruct, const IGGAuthRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGAuthRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGAuthRequest_t * ptStruct1, IGGAuthRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGAuthRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAuthRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAuthRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAuthRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAuthRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGAuthRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAuthRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGRegRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGRegRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGRegRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGRegRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGRegRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGRegRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGRegRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGRegRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGRegRequest_t * pDestStruct, const IGGRegRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGRegRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGRegRequest_t * ptStruct1, IGGRegRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGRegRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGRegRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGRegRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGRegRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGRegRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGRegRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGRegRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGBaseResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBaseResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBaseResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBaseResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGBaseResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBaseResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGBaseResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGBaseResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGBaseResponse_t * pDestStruct, const IGGBaseResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGBaseResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGBaseResponse_t * ptStruct1, IGGBaseResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGBaseResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGBaseResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBaseResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBaseResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBaseResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGBaseResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBaseResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGNetworkControl_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNetworkControl, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNetworkControl, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNetworkControl_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGNetworkControl, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNetworkControl, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGNetworkControl_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGNetworkControl, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGNetworkControl_t * pDestStruct, const IGGNetworkControl_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGNetworkControl, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGNetworkControl_t * ptStruct1, IGGNetworkControl_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGNetworkControl, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGNetworkControl_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNetworkControl, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNetworkControl, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNetworkControl_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGNetworkControl, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNetworkControl, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGPluginKey_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPluginKey, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPluginKey, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPluginKey_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGPluginKey, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPluginKey, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGPluginKey_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGPluginKey, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGPluginKey_t * pDestStruct, const IGGPluginKey_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGPluginKey, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGPluginKey_t * ptStruct1, IGGPluginKey_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGPluginKey, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGPluginKey_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPluginKey, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPluginKey, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPluginKey_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGPluginKey, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPluginKey, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGPluginKeyList_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPluginKeyList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPluginKeyList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPluginKeyList_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGPluginKeyList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPluginKeyList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGPluginKeyList_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGPluginKeyList, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGPluginKeyList_t * pDestStruct, const IGGPluginKeyList_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGPluginKeyList, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGPluginKeyList_t * ptStruct1, IGGPluginKeyList_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGPluginKeyList, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGPluginKeyList_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPluginKeyList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPluginKeyList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPluginKeyList_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGPluginKeyList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPluginKeyList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGHost_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGHost, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGHost, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGHost_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGHost, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGHost, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGHost_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGHost, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGHost_t * pDestStruct, const IGGHost_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGHost, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGHost_t * ptStruct1, IGGHost_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGHost, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGHost_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGHost, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGHost, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGHost_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGHost, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGHost, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGHostList_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGHostList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGHostList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGHostList_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGHostList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGHostList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGHostList_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGHostList, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGHostList_t * pDestStruct, const IGGHostList_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGHostList, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGHostList_t * ptStruct1, IGGHostList_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGHostList, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGHostList_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGHostList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGHostList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGHostList_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGHostList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGHostList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGAuthResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAuthResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAuthResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAuthResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGAuthResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAuthResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGAuthResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGAuthResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGAuthResponse_t * pDestStruct, const IGGAuthResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGAuthResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGAuthResponse_t * ptStruct1, IGGAuthResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGAuthResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAuthResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAuthResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAuthResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAuthResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGAuthResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAuthResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGRegResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGRegResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGRegResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGRegResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGRegResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGRegResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGRegResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGRegResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGRegResponse_t * pDestStruct, const IGGRegResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGRegResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGRegResponse_t * ptStruct1, IGGRegResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGRegResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGRegResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGRegResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGRegResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGRegResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGRegResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGRegResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGUserInfoSetRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUserInfoSetRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUserInfoSetRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUserInfoSetRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUserInfoSetRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUserInfoSetRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUserInfoSetRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUserInfoSetRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUserInfoSetRequest_t * pDestStruct, const IGGUserInfoSetRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUserInfoSetRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUserInfoSetRequest_t * ptStruct1, IGGUserInfoSetRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUserInfoSetRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUserInfoSetRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUserInfoSetRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUserInfoSetRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUserInfoSetRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUserInfoSetRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUserInfoSetRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGUserInfoSetResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUserInfoSetResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUserInfoSetResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUserInfoSetResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUserInfoSetResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUserInfoSetResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUserInfoSetResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUserInfoSetResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUserInfoSetResponse_t * pDestStruct, const IGGUserInfoSetResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUserInfoSetResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUserInfoSetResponse_t * ptStruct1, IGGUserInfoSetResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUserInfoSetResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUserInfoSetResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUserInfoSetResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUserInfoSetResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUserInfoSetResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUserInfoSetResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUserInfoSetResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGCmdItem_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCmdItem, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCmdItem, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCmdItem_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCmdItem, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCmdItem, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCmdItem_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCmdItem, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCmdItem_t * pDestStruct, const IGGCmdItem_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCmdItem, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCmdItem_t * ptStruct1, IGGCmdItem_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCmdItem, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCmdItem_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCmdItem, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCmdItem, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCmdItem_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCmdItem, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCmdItem, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGNewInitRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNewInitRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNewInitRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNewInitRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGNewInitRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNewInitRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGNewInitRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGNewInitRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGNewInitRequest_t * pDestStruct, const IGGNewInitRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGNewInitRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGNewInitRequest_t * ptStruct1, IGGNewInitRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGNewInitRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGNewInitRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNewInitRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNewInitRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNewInitRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGNewInitRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNewInitRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGNewInitResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNewInitResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNewInitResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNewInitResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGNewInitResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNewInitResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGNewInitResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGNewInitResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGNewInitResponse_t * pDestStruct, const IGGNewInitResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGNewInitResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGNewInitResponse_t * ptStruct1, IGGNewInitResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGNewInitResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGNewInitResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNewInitResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNewInitResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNewInitResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGNewInitResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNewInitResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGSnsUserInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSnsUserInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSnsUserInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSnsUserInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSnsUserInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSnsUserInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSnsUserInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSnsUserInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSnsUserInfo_t * pDestStruct, const IGGSnsUserInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSnsUserInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSnsUserInfo_t * ptStruct1, IGGSnsUserInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSnsUserInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSnsUserInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSnsUserInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSnsUserInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSnsUserInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSnsUserInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSnsUserInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGCustomizedInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCustomizedInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCustomizedInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCustomizedInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCustomizedInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCustomizedInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCustomizedInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCustomizedInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCustomizedInfo_t * pDestStruct, const IGGCustomizedInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCustomizedInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCustomizedInfo_t * ptStruct1, IGGCustomizedInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCustomizedInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCustomizedInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCustomizedInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCustomizedInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCustomizedInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCustomizedInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCustomizedInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGSearchContactRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchContactRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchContactRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchContactRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchContactRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchContactRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSearchContactRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSearchContactRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSearchContactRequest_t * pDestStruct, const IGGSearchContactRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSearchContactRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSearchContactRequest_t * ptStruct1, IGGSearchContactRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSearchContactRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSearchContactRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchContactRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchContactRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchContactRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchContactRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchContactRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGSearchContactItem_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchContactItem, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchContactItem, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchContactItem_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchContactItem, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchContactItem, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSearchContactItem_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSearchContactItem, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSearchContactItem_t * pDestStruct, const IGGSearchContactItem_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSearchContactItem, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSearchContactItem_t * ptStruct1, IGGSearchContactItem_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSearchContactItem, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSearchContactItem_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchContactItem, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchContactItem, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchContactItem_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchContactItem, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchContactItem, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGSearchContactResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchContactResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchContactResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchContactResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchContactResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchContactResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSearchContactResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSearchContactResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSearchContactResponse_t * pDestStruct, const IGGSearchContactResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSearchContactResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSearchContactResponse_t * ptStruct1, IGGSearchContactResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSearchContactResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSearchContactResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchContactResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchContactResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchContactResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchContactResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchContactResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyUser_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyUser, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyUser, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyUser_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyUser, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyUser, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGVerifyUser_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGVerifyUser, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGVerifyUser_t * pDestStruct, const IGGVerifyUser_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGVerifyUser, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGVerifyUser_t * ptStruct1, IGGVerifyUser_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGVerifyUser, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyUser_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyUser, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyUser, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyUser_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyUser, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyUser, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyUserRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyUserRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyUserRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyUserRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyUserRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyUserRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGVerifyUserRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGVerifyUserRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGVerifyUserRequest_t * pDestStruct, const IGGVerifyUserRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGVerifyUserRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGVerifyUserRequest_t * ptStruct1, IGGVerifyUserRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGVerifyUserRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyUserRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyUserRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyUserRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyUserRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyUserRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyUserRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyUserResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyUserResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyUserResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyUserResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyUserResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyUserResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGVerifyUserResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGVerifyUserResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGVerifyUserResponse_t * pDestStruct, const IGGVerifyUserResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGVerifyUserResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGVerifyUserResponse_t * ptStruct1, IGGVerifyUserResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGVerifyUserResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyUserResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyUserResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyUserResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyUserResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyUserResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyUserResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================

int IGGMicroMsgPickle :: ToBuffer( const IGGDelContact_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelContact, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelContact, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelContact_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelContact, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelContact, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDelContact_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDelContact, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDelContact_t * pDestStruct, const IGGDelContact_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDelContact, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDelContact_t * ptStruct1, IGGDelContact_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDelContact, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDelContact_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelContact, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelContact, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelContact_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelContact, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelContact, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}

//=====================================================

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncFriendRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncFriendRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncFriendRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncFriendRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncFriendRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncFriendRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSyncFriendRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSyncFriendRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSyncFriendRequest_t * pDestStruct, const IGGSyncFriendRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSyncFriendRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSyncFriendRequest_t * ptStruct1, IGGSyncFriendRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSyncFriendRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncFriendRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncFriendRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncFriendRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncFriendRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncFriendRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncFriendRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGSyncFriendResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncFriendResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncFriendResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncFriendResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncFriendResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncFriendResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSyncFriendResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSyncFriendResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSyncFriendResponse_t * pDestStruct, const IGGSyncFriendResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSyncFriendResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSyncFriendResponse_t * ptStruct1, IGGSyncFriendResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSyncFriendResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncFriendResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncFriendResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncFriendResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncFriendResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncFriendResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncFriendResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}

int IGGMicroMsgPickle :: ToBuffer( const IGGPossibleFriend_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPossibleFriend, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPossibleFriend, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPossibleFriend_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGPossibleFriend, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPossibleFriend, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGPossibleFriend_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGPossibleFriend, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGPossibleFriend_t * pDestStruct, const IGGPossibleFriend_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGPossibleFriend, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGPossibleFriend_t * ptStruct1, IGGPossibleFriend_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGPossibleFriend, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGPossibleFriend_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPossibleFriend, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPossibleFriend, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPossibleFriend_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGPossibleFriend, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPossibleFriend, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGRoomInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGRoomInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGRoomInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGRoomInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGRoomInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGRoomInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGRoomInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGRoomInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGRoomInfo_t * pDestStruct, const IGGRoomInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGRoomInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGRoomInfo_t * ptStruct1, IGGRoomInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGRoomInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGRoomInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGRoomInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGRoomInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGRoomInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGRoomInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGRoomInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGModContact_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModContact, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModContact, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModContact_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModContact, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModContact, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModContact_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModContact, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModContact_t * pDestStruct, const IGGModContact_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModContact, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModContact_t * ptStruct1, IGGModContact_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModContact, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModContact_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModContact, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModContact, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModContact_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModContact, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModContact, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGGetContactRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetContactRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetContactRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetContactRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetContactRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetContactRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetContactRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetContactRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetContactRequest_t * pDestStruct, const IGGGetContactRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetContactRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetContactRequest_t * ptStruct1, IGGGetContactRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetContactRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetContactRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetContactRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetContactRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetContactRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetContactRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetContactRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}
//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGGetContactResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetContactResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetContactResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetContactResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetContactResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetContactResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetContactResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetContactResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetContactResponse_t * pDestStruct, const IGGGetContactResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetContactResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetContactResponse_t * ptStruct1, IGGGetContactResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetContactResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetContactResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetContactResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetContactResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetContactResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetContactResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetContactResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}

//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGAuthBySKRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAuthBySKRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAuthBySKRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAuthBySKRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGAuthBySKRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAuthBySKRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGAuthBySKRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGAuthBySKRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGAuthBySKRequest_t * pDestStruct, const IGGAuthBySKRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGAuthBySKRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGAuthBySKRequest_t * ptStruct1, IGGAuthBySKRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGAuthBySKRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAuthBySKRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAuthBySKRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAuthBySKRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAuthBySKRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGAuthBySKRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAuthBySKRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}

//=====================================================
int IGGMicroMsgPickle :: ToBuffer( const IGGAuthBySKResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAuthBySKResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAuthBySKResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAuthBySKResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGAuthBySKResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAuthBySKResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGAuthBySKResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGAuthBySKResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGAuthBySKResponse_t * pDestStruct, const IGGAuthBySKResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGAuthBySKResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGAuthBySKResponse_t * ptStruct1, IGGAuthBySKResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGAuthBySKResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAuthBySKResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAuthBySKResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAuthBySKResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAuthBySKResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGAuthBySKResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAuthBySKResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}

//ÂèëÈ?ÅÊ∂àÊÅ?
int IGGMicroMsgPickle :: ToBuffer( const IGGMicroMsgRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMicroMsgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMicroMsgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMicroMsgRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGMicroMsgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMicroMsgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGMicroMsgRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGMicroMsgRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGMicroMsgRequest_t * pDestStruct, const IGGMicroMsgRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGMicroMsgRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGMicroMsgRequest_t * ptStruct1, IGGMicroMsgRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGMicroMsgRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGMicroMsgRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMicroMsgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMicroMsgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMicroMsgRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGMicroMsgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMicroMsgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSendMsgRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSendMsgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSendMsgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSendMsgRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSendMsgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSendMsgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSendMsgRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSendMsgRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSendMsgRequest_t * pDestStruct, const IGGSendMsgRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSendMsgRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSendMsgRequest_t * ptStruct1, IGGSendMsgRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSendMsgRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSendMsgRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSendMsgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSendMsgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSendMsgRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSendMsgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSendMsgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGMicroMsgResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMicroMsgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMicroMsgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMicroMsgResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGMicroMsgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMicroMsgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGMicroMsgResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGMicroMsgResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGMicroMsgResponse_t * pDestStruct, const IGGMicroMsgResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGMicroMsgResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGMicroMsgResponse_t * ptStruct1, IGGMicroMsgResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGMicroMsgResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGMicroMsgResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMicroMsgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMicroMsgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMicroMsgResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGMicroMsgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMicroMsgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSendMsgResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSendMsgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSendMsgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSendMsgResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSendMsgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSendMsgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSendMsgResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSendMsgResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSendMsgResponse_t * pDestStruct, const IGGSendMsgResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSendMsgResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSendMsgResponse_t * ptStruct1, IGGSendMsgResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSendMsgResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSendMsgResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSendMsgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSendMsgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSendMsgResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSendMsgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSendMsgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAddMsg_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddMsg, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddMsg, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddMsg_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddMsg, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddMsg, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGAddMsg_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGAddMsg, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGAddMsg_t * pDestStruct, const IGGAddMsg_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGAddMsg, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGAddMsg_t * ptStruct1, IGGAddMsg_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGAddMsg, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAddMsg_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddMsg, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddMsg, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddMsg_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddMsg, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddMsg, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGKeyVal_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGKeyVal, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGKeyVal, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGKeyVal_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGKeyVal, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGKeyVal, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGKeyVal_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGKeyVal, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGKeyVal_t * pDestStruct, const IGGKeyVal_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGKeyVal, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGKeyVal_t * ptStruct1, IGGKeyVal_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGKeyVal, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGKeyVal_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGKeyVal, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGKeyVal, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGKeyVal_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGKeyVal, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGKeyVal, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncKey_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncKey, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncKey, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncKey_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncKey, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncKey, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSyncKey_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSyncKey, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSyncKey_t * pDestStruct, const IGGSyncKey_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSyncKey, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSyncKey_t * ptStruct1, IGGSyncKey_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSyncKey, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncKey_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncKey, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncKey, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncKey_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncKey, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncKey, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGNewSyncRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNewSyncRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNewSyncRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNewSyncRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGNewSyncRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNewSyncRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGNewSyncRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGNewSyncRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGNewSyncRequest_t * pDestStruct, const IGGNewSyncRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGNewSyncRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGNewSyncRequest_t * ptStruct1, IGGNewSyncRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGNewSyncRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGNewSyncRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNewSyncRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNewSyncRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNewSyncRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGNewSyncRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNewSyncRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGNewSyncResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNewSyncResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNewSyncResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNewSyncResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGNewSyncResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNewSyncResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGNewSyncResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGNewSyncResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGNewSyncResponse_t * pDestStruct, const IGGNewSyncResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGNewSyncResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGNewSyncResponse_t * ptStruct1, IGGNewSyncResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGNewSyncResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGNewSyncResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGNewSyncResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGNewSyncResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGNewSyncResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGNewSyncResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGNewSyncResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGSyncRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSyncRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSyncRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSyncRequest_t * pDestStruct, const IGGSyncRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSyncRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSyncRequest_t * ptStruct1, IGGSyncRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSyncRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSyncResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSyncResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSyncResponse_t * pDestStruct, const IGGSyncResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSyncResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSyncResponse_t * ptStruct1, IGGSyncResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSyncResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGCmdList_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCmdList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCmdList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCmdList_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCmdList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCmdList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCmdList_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCmdList, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCmdList_t * pDestStruct, const IGGCmdList_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCmdList, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCmdList_t * ptStruct1, IGGCmdList_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCmdList, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCmdList_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCmdList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCmdList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCmdList_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCmdList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCmdList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//=============================================

int IGGMicroMsgPickle :: ToBuffer( const IGGOpCmdResp_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGOpCmdResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGOpCmdResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGOpCmdResp_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGOpCmdResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGOpCmdResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGOpCmdResp_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGOpCmdResp, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGOpCmdResp_t * pDestStruct, const IGGOpCmdResp_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGOpCmdResp, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGOpCmdResp_t * ptStruct1, IGGOpCmdResp_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGOpCmdResp, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGOpCmdResp_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGOpCmdResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGOpCmdResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGOpCmdResp_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGOpCmdResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGOpCmdResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//==============================================

int IGGMicroMsgPickle :: ToBuffer( const IGGOpCmdRespList_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGOpCmdRespList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGOpCmdRespList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGOpCmdRespList_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGOpCmdRespList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGOpCmdRespList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGOpCmdRespList_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGOpCmdRespList, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGOpCmdRespList_t * pDestStruct, const IGGOpCmdRespList_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGOpCmdRespList, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGOpCmdRespList_t * ptStruct1, IGGOpCmdRespList_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGOpCmdRespList, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGOpCmdRespList_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGOpCmdRespList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGOpCmdRespList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGOpCmdRespList_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGOpCmdRespList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGOpCmdRespList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//=========================================

int IGGMicroMsgPickle :: ToBuffer( const IGGBatchGetHeadImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBatchGetHeadImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBatchGetHeadImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBatchGetHeadImgRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGBatchGetHeadImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBatchGetHeadImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGBatchGetHeadImgRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGBatchGetHeadImgRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGBatchGetHeadImgRequest_t * pDestStruct, const IGGBatchGetHeadImgRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGBatchGetHeadImgRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGBatchGetHeadImgRequest_t * ptStruct1, IGGBatchGetHeadImgRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGBatchGetHeadImgRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGBatchGetHeadImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBatchGetHeadImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBatchGetHeadImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBatchGetHeadImgRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGBatchGetHeadImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBatchGetHeadImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGImgPair_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGImgPair, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGImgPair, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGImgPair_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGImgPair, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGImgPair, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGImgPair_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGImgPair, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGImgPair_t * pDestStruct, const IGGImgPair_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGImgPair, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGImgPair_t * ptStruct1, IGGImgPair_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGImgPair, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGImgPair_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGImgPair, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGImgPair, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGImgPair_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGImgPair, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGImgPair, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGBatchGetHeadImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBatchGetHeadImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBatchGetHeadImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBatchGetHeadImgResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGBatchGetHeadImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBatchGetHeadImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGBatchGetHeadImgResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGBatchGetHeadImgResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGBatchGetHeadImgResponse_t * pDestStruct, const IGGBatchGetHeadImgResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGBatchGetHeadImgResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGBatchGetHeadImgResponse_t * ptStruct1, IGGBatchGetHeadImgResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGBatchGetHeadImgResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGBatchGetHeadImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBatchGetHeadImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBatchGetHeadImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBatchGetHeadImgResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGBatchGetHeadImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBatchGetHeadImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGUploadHDHeadImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadHDHeadImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadHDHeadImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadHDHeadImgRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadHDHeadImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadHDHeadImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadHDHeadImgRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadHDHeadImgRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadHDHeadImgRequest_t * pDestStruct, const IGGUploadHDHeadImgRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadHDHeadImgRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadHDHeadImgRequest_t * ptStruct1, IGGUploadHDHeadImgRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadHDHeadImgRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadHDHeadImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadHDHeadImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadHDHeadImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadHDHeadImgRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadHDHeadImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadHDHeadImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadHDHeadImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadHDHeadImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadHDHeadImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadHDHeadImgResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadHDHeadImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadHDHeadImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadHDHeadImgResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadHDHeadImgResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadHDHeadImgResponse_t * pDestStruct, const IGGUploadHDHeadImgResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadHDHeadImgResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadHDHeadImgResponse_t * ptStruct1, IGGUploadHDHeadImgResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadHDHeadImgResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadHDHeadImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadHDHeadImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadHDHeadImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadHDHeadImgResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadHDHeadImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadHDHeadImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetHDHeadImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetHDHeadImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetHDHeadImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetHDHeadImgRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetHDHeadImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetHDHeadImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetHDHeadImgRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetHDHeadImgRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetHDHeadImgRequest_t * pDestStruct, const IGGGetHDHeadImgRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetHDHeadImgRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetHDHeadImgRequest_t * ptStruct1, IGGGetHDHeadImgRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetHDHeadImgRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetHDHeadImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetHDHeadImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetHDHeadImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetHDHeadImgRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetHDHeadImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetHDHeadImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetHDHeadImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetHDHeadImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetHDHeadImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetHDHeadImgResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetHDHeadImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetHDHeadImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetHDHeadImgResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetHDHeadImgResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetHDHeadImgResponse_t * pDestStruct, const IGGGetHDHeadImgResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetHDHeadImgResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetHDHeadImgResponse_t * ptStruct1, IGGGetHDHeadImgResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetHDHeadImgResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetHDHeadImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetHDHeadImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetHDHeadImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetHDHeadImgResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetHDHeadImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetHDHeadImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGUploadVoiceRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadVoiceRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadVoiceRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadVoiceRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadVoiceRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadVoiceRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadVoiceRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadVoiceRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadVoiceRequest_t * pDestStruct, const IGGUploadVoiceRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadVoiceRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadVoiceRequest_t * ptStruct1, IGGUploadVoiceRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadVoiceRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadVoiceRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadVoiceRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadVoiceRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadVoiceRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadVoiceRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadVoiceRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadVoiceResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadVoiceResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadVoiceResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadVoiceResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadVoiceResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadVoiceResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadVoiceResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadVoiceResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadVoiceResponse_t * pDestStruct, const IGGUploadVoiceResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadVoiceResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadVoiceResponse_t * ptStruct1, IGGUploadVoiceResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadVoiceResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadVoiceResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadVoiceResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadVoiceResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadVoiceResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadVoiceResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadVoiceResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadVoiceRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadVoiceRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadVoiceRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadVoiceRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadVoiceRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadVoiceRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDownloadVoiceRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDownloadVoiceRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDownloadVoiceRequest_t * pDestStruct, const IGGDownloadVoiceRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDownloadVoiceRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDownloadVoiceRequest_t * ptStruct1, IGGDownloadVoiceRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDownloadVoiceRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadVoiceRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadVoiceRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadVoiceRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadVoiceRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadVoiceRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadVoiceRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadVoiceResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadVoiceResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadVoiceResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadVoiceResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadVoiceResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadVoiceResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDownloadVoiceResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDownloadVoiceResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDownloadVoiceResponse_t * pDestStruct, const IGGDownloadVoiceResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDownloadVoiceResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDownloadVoiceResponse_t * ptStruct1, IGGDownloadVoiceResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDownloadVoiceResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadVoiceResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadVoiceResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadVoiceResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadVoiceResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadVoiceResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadVoiceResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadVideoRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadVideoRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadVideoRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadVideoRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadVideoRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadVideoRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadVideoRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadVideoRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadVideoRequest_t * pDestStruct, const IGGUploadVideoRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadVideoRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadVideoRequest_t * ptStruct1, IGGUploadVideoRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadVideoRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadVideoRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadVideoRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadVideoRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadVideoRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadVideoRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadVideoRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadVideoResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadVideoResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadVideoResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadVideoResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadVideoResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadVideoResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadVideoResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadVideoResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadVideoResponse_t * pDestStruct, const IGGUploadVideoResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadVideoResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadVideoResponse_t * ptStruct1, IGGUploadVideoResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadVideoResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadVideoResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadVideoResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadVideoResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadVideoResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadVideoResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadVideoResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadVideoRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadVideoRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadVideoRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadVideoRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadVideoRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadVideoRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDownloadVideoRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDownloadVideoRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDownloadVideoRequest_t * pDestStruct, const IGGDownloadVideoRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDownloadVideoRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDownloadVideoRequest_t * ptStruct1, IGGDownloadVideoRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDownloadVideoRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadVideoRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadVideoRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadVideoRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadVideoRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadVideoRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadVideoRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadVideoResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadVideoResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadVideoResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadVideoResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadVideoResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadVideoResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDownloadVideoResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDownloadVideoResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDownloadVideoResponse_t * pDestStruct, const IGGDownloadVideoResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDownloadVideoResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDownloadVideoResponse_t * ptStruct1, IGGDownloadVideoResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDownloadVideoResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadVideoResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadVideoResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadVideoResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadVideoResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadVideoResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadVideoResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGUploadMsgImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadMsgImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadMsgImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadMsgImgRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadMsgImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadMsgImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadMsgImgRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadMsgImgRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadMsgImgRequest_t * pDestStruct, const IGGUploadMsgImgRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadMsgImgRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadMsgImgRequest_t * ptStruct1, IGGUploadMsgImgRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadMsgImgRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadMsgImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadMsgImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadMsgImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadMsgImgRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadMsgImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadMsgImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadMsgImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadMsgImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadMsgImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadMsgImgResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadMsgImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadMsgImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadMsgImgResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadMsgImgResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadMsgImgResponse_t * pDestStruct, const IGGUploadMsgImgResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadMsgImgResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadMsgImgResponse_t * ptStruct1, IGGUploadMsgImgResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadMsgImgResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadMsgImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadMsgImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadMsgImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadMsgImgResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadMsgImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadMsgImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadMsgImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadMsgImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadMsgImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadMsgImgRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadMsgImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadMsgImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDownloadMsgImgRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDownloadMsgImgRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDownloadMsgImgRequest_t * pDestStruct, const IGGDownloadMsgImgRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDownloadMsgImgRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDownloadMsgImgRequest_t * ptStruct1, IGGDownloadMsgImgRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDownloadMsgImgRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadMsgImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadMsgImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadMsgImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadMsgImgRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadMsgImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadMsgImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadMsgImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadMsgImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadMsgImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadMsgImgResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadMsgImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadMsgImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDownloadMsgImgResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDownloadMsgImgResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDownloadMsgImgResponse_t * pDestStruct, const IGGDownloadMsgImgResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDownloadMsgImgResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDownloadMsgImgResponse_t * ptStruct1, IGGDownloadMsgImgResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDownloadMsgImgResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadMsgImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadMsgImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadMsgImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadMsgImgResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadMsgImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadMsgImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGEmojiUploadInfoReq_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmojiUploadInfoReq, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmojiUploadInfoReq, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmojiUploadInfoReq_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmojiUploadInfoReq, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmojiUploadInfoReq, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGEmojiUploadInfoReq_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGEmojiUploadInfoReq, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGEmojiUploadInfoReq_t * pDestStruct, const IGGEmojiUploadInfoReq_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGEmojiUploadInfoReq, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGEmojiUploadInfoReq_t * ptStruct1, IGGEmojiUploadInfoReq_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGEmojiUploadInfoReq, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGEmojiUploadInfoReq_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmojiUploadInfoReq, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmojiUploadInfoReq, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmojiUploadInfoReq_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmojiUploadInfoReq, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmojiUploadInfoReq, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGUploadEmojiRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadEmojiRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadEmojiRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadEmojiRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadEmojiRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadEmojiRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadEmojiRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadEmojiRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadEmojiRequest_t * pDestStruct, const IGGUploadEmojiRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadEmojiRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadEmojiRequest_t * ptStruct1, IGGUploadEmojiRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadEmojiRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadEmojiRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadEmojiRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadEmojiRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadEmojiRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadEmojiRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadEmojiRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGEmojiUploadInfoResp_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmojiUploadInfoResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmojiUploadInfoResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmojiUploadInfoResp_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmojiUploadInfoResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmojiUploadInfoResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGEmojiUploadInfoResp_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGEmojiUploadInfoResp, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGEmojiUploadInfoResp_t * pDestStruct, const IGGEmojiUploadInfoResp_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGEmojiUploadInfoResp, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGEmojiUploadInfoResp_t * ptStruct1, IGGEmojiUploadInfoResp_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGEmojiUploadInfoResp, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGEmojiUploadInfoResp_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmojiUploadInfoResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmojiUploadInfoResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmojiUploadInfoResp_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmojiUploadInfoResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmojiUploadInfoResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadEmojiResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadEmojiResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadEmojiResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadEmojiResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadEmojiResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadEmojiResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadEmojiResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadEmojiResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadEmojiResponse_t * pDestStruct, const IGGUploadEmojiResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadEmojiResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadEmojiResponse_t * ptStruct1, IGGUploadEmojiResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadEmojiResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadEmojiResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadEmojiResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadEmojiResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadEmojiResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadEmojiResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadEmojiResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGEmojiDownloadInfoReq_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmojiDownloadInfoReq, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmojiDownloadInfoReq, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmojiDownloadInfoReq_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmojiDownloadInfoReq, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmojiDownloadInfoReq, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGEmojiDownloadInfoReq_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGEmojiDownloadInfoReq, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGEmojiDownloadInfoReq_t * pDestStruct, const IGGEmojiDownloadInfoReq_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGEmojiDownloadInfoReq, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGEmojiDownloadInfoReq_t * ptStruct1, IGGEmojiDownloadInfoReq_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGEmojiDownloadInfoReq, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGEmojiDownloadInfoReq_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmojiDownloadInfoReq, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmojiDownloadInfoReq, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmojiDownloadInfoReq_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmojiDownloadInfoReq, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmojiDownloadInfoReq, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadEmojiRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadEmojiRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadEmojiRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadEmojiRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadEmojiRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadEmojiRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDownloadEmojiRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDownloadEmojiRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDownloadEmojiRequest_t * pDestStruct, const IGGDownloadEmojiRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDownloadEmojiRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDownloadEmojiRequest_t * ptStruct1, IGGDownloadEmojiRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDownloadEmojiRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadEmojiRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadEmojiRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadEmojiRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadEmojiRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadEmojiRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadEmojiRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGEmojiDownloadInfoResp_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmojiDownloadInfoResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmojiDownloadInfoResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmojiDownloadInfoResp_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmojiDownloadInfoResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmojiDownloadInfoResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGEmojiDownloadInfoResp_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGEmojiDownloadInfoResp, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGEmojiDownloadInfoResp_t * pDestStruct, const IGGEmojiDownloadInfoResp_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGEmojiDownloadInfoResp, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGEmojiDownloadInfoResp_t * ptStruct1, IGGEmojiDownloadInfoResp_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGEmojiDownloadInfoResp, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGEmojiDownloadInfoResp_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmojiDownloadInfoResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmojiDownloadInfoResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmojiDownloadInfoResp_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmojiDownloadInfoResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmojiDownloadInfoResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadEmojiResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadEmojiResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadEmojiResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadEmojiResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadEmojiResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadEmojiResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDownloadEmojiResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDownloadEmojiResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDownloadEmojiResponse_t * pDestStruct, const IGGDownloadEmojiResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDownloadEmojiResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDownloadEmojiResponse_t * ptStruct1, IGGDownloadEmojiResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDownloadEmojiResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDownloadEmojiResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDownloadEmojiResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDownloadEmojiResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDownloadEmojiResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDownloadEmojiResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDownloadEmojiResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGLbsRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGLbsRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGLbsRequest_t * pDestStruct, const IGGLbsRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGLbsRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGLbsRequest_t * ptStruct1, IGGLbsRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGLbsRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsContactInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsContactInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsContactInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsContactInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsContactInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsContactInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGLbsContactInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGLbsContactInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGLbsContactInfo_t * pDestStruct, const IGGLbsContactInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGLbsContactInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGLbsContactInfo_t * ptStruct1, IGGLbsContactInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGLbsContactInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsContactInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsContactInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsContactInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsContactInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsContactInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsContactInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGLbsResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGLbsResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGLbsResponse_t * pDestStruct, const IGGLbsResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGLbsResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGLbsResponse_t * ptStruct1, IGGLbsResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGLbsResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetLocationRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetLocationRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetLocationRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetLocationRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetLocationRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetLocationRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetLocationRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetLocationRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetLocationRequest_t * pDestStruct, const IGGGetLocationRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetLocationRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetLocationRequest_t * ptStruct1, IGGGetLocationRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetLocationRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetLocationRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetLocationRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetLocationRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetLocationRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetLocationRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetLocationRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetLocationResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetLocationResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetLocationResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetLocationResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetLocationResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetLocationResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetLocationResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetLocationResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetLocationResponse_t * pDestStruct, const IGGGetLocationResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetLocationResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetLocationResponse_t * ptStruct1, IGGGetLocationResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetLocationResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetLocationResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetLocationResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetLocationResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetLocationResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetLocationResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetLocationResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsMatchRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsMatchRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsMatchRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsMatchRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsMatchRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsMatchRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGLbsMatchRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGLbsMatchRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGLbsMatchRequest_t * pDestStruct, const IGGLbsMatchRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGLbsMatchRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGLbsMatchRequest_t * ptStruct1, IGGLbsMatchRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGLbsMatchRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsMatchRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsMatchRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsMatchRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsMatchRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsMatchRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsMatchRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGLbsMatchResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsMatchResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsMatchResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsMatchResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsMatchResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsMatchResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGLbsMatchResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGLbsMatchResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGLbsMatchResponse_t * pDestStruct, const IGGLbsMatchResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGLbsMatchResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGLbsMatchResponse_t * ptStruct1, IGGLbsMatchResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGLbsMatchResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsMatchResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsMatchResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsMatchResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsMatchResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsMatchResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsMatchResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncLbsMatchRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncLbsMatchRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncLbsMatchRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncLbsMatchRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncLbsMatchRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncLbsMatchRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSyncLbsMatchRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSyncLbsMatchRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSyncLbsMatchRequest_t * pDestStruct, const IGGSyncLbsMatchRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSyncLbsMatchRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSyncLbsMatchRequest_t * ptStruct1, IGGSyncLbsMatchRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSyncLbsMatchRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncLbsMatchRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncLbsMatchRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncLbsMatchRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncLbsMatchRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncLbsMatchRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncLbsMatchRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncLbsMatchResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncLbsMatchResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncLbsMatchResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncLbsMatchResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncLbsMatchResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncLbsMatchResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSyncLbsMatchResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSyncLbsMatchResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSyncLbsMatchResponse_t * pDestStruct, const IGGSyncLbsMatchResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSyncLbsMatchResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSyncLbsMatchResponse_t * ptStruct1, IGGSyncLbsMatchResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSyncLbsMatchResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSyncLbsMatchResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSyncLbsMatchResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSyncLbsMatchResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSyncLbsMatchResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSyncLbsMatchResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSyncLbsMatchResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsMatchContactInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsMatchContactInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsMatchContactInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsMatchContactInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsMatchContactInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsMatchContactInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGLbsMatchContactInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGLbsMatchContactInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGLbsMatchContactInfo_t * pDestStruct, const IGGLbsMatchContactInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGLbsMatchContactInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGLbsMatchContactInfo_t * ptStruct1, IGGLbsMatchContactInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGLbsMatchContactInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsMatchContactInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsMatchContactInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsMatchContactInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsMatchContactInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsMatchContactInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsMatchContactInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



/////////////////////////// »∫œ‡πÿ Begin ///////////////////////////

int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomNotify_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomNotify, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomNotify, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomNotify_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomNotify, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomNotify, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModChatRoomNotify_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModChatRoomNotify, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModChatRoomNotify_t * pDestStruct, const IGGModChatRoomNotify_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModChatRoomNotify, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModChatRoomNotify_t * ptStruct1, IGGModChatRoomNotify_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModChatRoomNotify, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomNotify_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomNotify, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomNotify, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomNotify_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomNotify, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomNotify, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomMember_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomMember, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomMember, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomMember_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomMember, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomMember, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModChatRoomMember_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModChatRoomMember, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModChatRoomMember_t * pDestStruct, const IGGModChatRoomMember_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModChatRoomMember, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModChatRoomMember_t * ptStruct1, IGGModChatRoomMember_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModChatRoomMember, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomMember_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomMember, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomMember, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomMember_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomMember, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomMember, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}




int IGGMicroMsgPickle :: ToBuffer( const IGGQuitChatRoom_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitChatRoom, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitChatRoom, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitChatRoom_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitChatRoom, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitChatRoom, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGQuitChatRoom_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGQuitChatRoom, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGQuitChatRoom_t * pDestStruct, const IGGQuitChatRoom_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGQuitChatRoom, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGQuitChatRoom_t * ptStruct1, IGGQuitChatRoom_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGQuitChatRoom, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGQuitChatRoom_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitChatRoom, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitChatRoom, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitChatRoom_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitChatRoom, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitChatRoom, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGQuitChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitChatRoomRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGQuitChatRoomRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGQuitChatRoomRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGQuitChatRoomRequest_t * pDestStruct, const IGGQuitChatRoomRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGQuitChatRoomRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGQuitChatRoomRequest_t * ptStruct1, IGGQuitChatRoomRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGQuitChatRoomRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGQuitChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitChatRoomRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}




int IGGMicroMsgPickle :: ToBuffer( const IGGQuitChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitChatRoomResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGQuitChatRoomResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGQuitChatRoomResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGQuitChatRoomResponse_t * pDestStruct, const IGGQuitChatRoomResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGQuitChatRoomResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGQuitChatRoomResponse_t * ptStruct1, IGGQuitChatRoomResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGQuitChatRoomResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGQuitChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitChatRoomResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGQuitGroupRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitGroupRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitGroupRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitGroupRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitGroupRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitGroupRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGQuitGroupRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGQuitGroupRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGQuitGroupRequest_t * pDestStruct, const IGGQuitGroupRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGQuitGroupRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGQuitGroupRequest_t * ptStruct1, IGGQuitGroupRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGQuitGroupRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGQuitGroupRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitGroupRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitGroupRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitGroupRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitGroupRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitGroupRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}




int IGGMicroMsgPickle :: ToBuffer( const IGGQuitGroupResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitGroupResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitGroupResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitGroupResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitGroupResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitGroupResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGQuitGroupResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGQuitGroupResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGQuitGroupResponse_t * pDestStruct, const IGGQuitGroupResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGQuitGroupResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGQuitGroupResponse_t * ptStruct1, IGGQuitGroupResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGQuitGroupResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGQuitGroupResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGQuitGroupResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGQuitGroupResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGQuitGroupResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGQuitGroupResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGQuitGroupResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}





int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomTopic_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomTopic, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomTopic, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomTopic_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomTopic, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomTopic, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModChatRoomTopic_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModChatRoomTopic, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModChatRoomTopic_t * pDestStruct, const IGGModChatRoomTopic_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModChatRoomTopic, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModChatRoomTopic_t * ptStruct1, IGGModChatRoomTopic_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModChatRoomTopic, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomTopic_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomTopic, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomTopic, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomTopic_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomTopic, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomTopic, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}





int IGGMicroMsgPickle :: ToBuffer( const IGGModGroupTopic_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModGroupTopic, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModGroupTopic, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModGroupTopic_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModGroupTopic, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModGroupTopic, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModGroupTopic_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModGroupTopic, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModGroupTopic_t * pDestStruct, const IGGModGroupTopic_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModGroupTopic, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModGroupTopic_t * ptStruct1, IGGModGroupTopic_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModGroupTopic, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModGroupTopic_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModGroupTopic, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModGroupTopic, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModGroupTopic_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModGroupTopic, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModGroupTopic, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}





int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomMemberDisplayName_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomMemberDisplayName, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomMemberDisplayName, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomMemberDisplayName_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomMemberDisplayName, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomMemberDisplayName, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModChatRoomMemberDisplayName_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModChatRoomMemberDisplayName, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModChatRoomMemberDisplayName_t * pDestStruct, const IGGModChatRoomMemberDisplayName_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModChatRoomMemberDisplayName, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModChatRoomMemberDisplayName_t * ptStruct1, IGGModChatRoomMemberDisplayName_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModChatRoomMemberDisplayName, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomMemberDisplayName_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomMemberDisplayName, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomMemberDisplayName, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomMemberDisplayName_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomMemberDisplayName, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomMemberDisplayName, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomMemberFlag_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomMemberFlag, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomMemberFlag, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomMemberFlag_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomMemberFlag, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomMemberFlag, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModChatRoomMemberFlag_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModChatRoomMemberFlag, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModChatRoomMemberFlag_t * pDestStruct, const IGGModChatRoomMemberFlag_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModChatRoomMemberFlag, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModChatRoomMemberFlag_t * ptStruct1, IGGModChatRoomMemberFlag_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModChatRoomMemberFlag, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModChatRoomMemberFlag_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModChatRoomMemberFlag, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModChatRoomMemberFlag, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModChatRoomMemberFlag_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModChatRoomMemberFlag, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModChatRoomMemberFlag, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}





int IGGMicroMsgPickle :: ToBuffer( const IGGMemberReq_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMemberReq, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMemberReq, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMemberReq_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGMemberReq, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMemberReq, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGMemberReq_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGMemberReq, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGMemberReq_t * pDestStruct, const IGGMemberReq_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGMemberReq, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGMemberReq_t * ptStruct1, IGGMemberReq_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGMemberReq, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGMemberReq_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMemberReq, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMemberReq, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMemberReq_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGMemberReq, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMemberReq, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}




int IGGMicroMsgPickle :: ToBuffer( const IGGMemberResp_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMemberResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMemberResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMemberResp_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGMemberResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMemberResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGMemberResp_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGMemberResp, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGMemberResp_t * pDestStruct, const IGGMemberResp_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGMemberResp, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGMemberResp_t * ptStruct1, IGGMemberResp_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGMemberResp, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGMemberResp_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMemberResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMemberResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMemberResp_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGMemberResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMemberResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}




int IGGMicroMsgPickle :: ToBuffer( const IGGDelMemberReq_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelMemberReq, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelMemberReq, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelMemberReq_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelMemberReq, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelMemberReq, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDelMemberReq_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDelMemberReq, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDelMemberReq_t * pDestStruct, const IGGDelMemberReq_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDelMemberReq, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDelMemberReq_t * ptStruct1, IGGDelMemberReq_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDelMemberReq, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDelMemberReq_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelMemberReq, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelMemberReq, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelMemberReq_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelMemberReq, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelMemberReq, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}




int IGGMicroMsgPickle :: ToBuffer( const IGGDelMemberResp_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelMemberResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelMemberResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelMemberResp_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelMemberResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelMemberResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDelMemberResp_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDelMemberResp, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDelMemberResp_t * pDestStruct, const IGGDelMemberResp_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDelMemberResp, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDelMemberResp_t * ptStruct1, IGGDelMemberResp_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDelMemberResp, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDelMemberResp_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelMemberResp, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelMemberResp, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelMemberResp_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelMemberResp, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelMemberResp, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGCreateChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCreateChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCreateChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCreateChatRoomRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCreateChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCreateChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCreateChatRoomRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCreateChatRoomRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCreateChatRoomRequest_t * pDestStruct, const IGGCreateChatRoomRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCreateChatRoomRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCreateChatRoomRequest_t * ptStruct1, IGGCreateChatRoomRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCreateChatRoomRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCreateChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCreateChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCreateChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCreateChatRoomRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCreateChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCreateChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}






int IGGMicroMsgPickle :: ToBuffer( const IGGCreateChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCreateChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCreateChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCreateChatRoomResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCreateChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCreateChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCreateChatRoomResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCreateChatRoomResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCreateChatRoomResponse_t * pDestStruct, const IGGCreateChatRoomResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCreateChatRoomResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCreateChatRoomResponse_t * ptStruct1, IGGCreateChatRoomResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCreateChatRoomResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCreateChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCreateChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCreateChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCreateChatRoomResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCreateChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCreateChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGCreateGroupRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCreateGroupRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCreateGroupRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCreateGroupRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCreateGroupRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCreateGroupRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCreateGroupRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCreateGroupRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCreateGroupRequest_t * pDestStruct, const IGGCreateGroupRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCreateGroupRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCreateGroupRequest_t * ptStruct1, IGGCreateGroupRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCreateGroupRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCreateGroupRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCreateGroupRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCreateGroupRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCreateGroupRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCreateGroupRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCreateGroupRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGCreateGroupResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCreateGroupResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCreateGroupResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCreateGroupResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCreateGroupResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCreateGroupResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCreateGroupResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCreateGroupResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCreateGroupResponse_t * pDestStruct, const IGGCreateGroupResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCreateGroupResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCreateGroupResponse_t * ptStruct1, IGGCreateGroupResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCreateGroupResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCreateGroupResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCreateGroupResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCreateGroupResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCreateGroupResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCreateGroupResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCreateGroupResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGSearchChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchChatRoomRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSearchChatRoomRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSearchChatRoomRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSearchChatRoomRequest_t * pDestStruct, const IGGSearchChatRoomRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSearchChatRoomRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSearchChatRoomRequest_t * ptStruct1, IGGSearchChatRoomRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSearchChatRoomRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSearchChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchChatRoomRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}





int IGGMicroMsgPickle :: ToBuffer( const IGGChatRoomResult_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGChatRoomResult, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGChatRoomResult, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGChatRoomResult_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGChatRoomResult, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGChatRoomResult, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGChatRoomResult_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGChatRoomResult, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGChatRoomResult_t * pDestStruct, const IGGChatRoomResult_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGChatRoomResult, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGChatRoomResult_t * ptStruct1, IGGChatRoomResult_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGChatRoomResult, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGChatRoomResult_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGChatRoomResult, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGChatRoomResult, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGChatRoomResult_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGChatRoomResult, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGChatRoomResult, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGSearchChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchChatRoomResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSearchChatRoomResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSearchChatRoomResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSearchChatRoomResponse_t * pDestStruct, const IGGSearchChatRoomResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSearchChatRoomResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSearchChatRoomResponse_t * ptStruct1, IGGSearchChatRoomResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSearchChatRoomResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSearchChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSearchChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSearchChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSearchChatRoomResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSearchChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSearchChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}




int IGGMicroMsgPickle :: ToBuffer( const IGGAddChatRoomMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddChatRoomMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddChatRoomMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddChatRoomMemberRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddChatRoomMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddChatRoomMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGAddChatRoomMemberRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGAddChatRoomMemberRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGAddChatRoomMemberRequest_t * pDestStruct, const IGGAddChatRoomMemberRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGAddChatRoomMemberRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGAddChatRoomMemberRequest_t * ptStruct1, IGGAddChatRoomMemberRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGAddChatRoomMemberRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAddChatRoomMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddChatRoomMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddChatRoomMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddChatRoomMemberRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddChatRoomMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddChatRoomMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGAddChatRoomMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddChatRoomMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddChatRoomMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddChatRoomMemberResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddChatRoomMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddChatRoomMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGAddChatRoomMemberResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGAddChatRoomMemberResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGAddChatRoomMemberResponse_t * pDestStruct, const IGGAddChatRoomMemberResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGAddChatRoomMemberResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGAddChatRoomMemberResponse_t * ptStruct1, IGGAddChatRoomMemberResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGAddChatRoomMemberResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAddChatRoomMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddChatRoomMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddChatRoomMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddChatRoomMemberResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddChatRoomMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddChatRoomMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGDelChatRoomMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelChatRoomMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelChatRoomMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelChatRoomMemberRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelChatRoomMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelChatRoomMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDelChatRoomMemberRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDelChatRoomMemberRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDelChatRoomMemberRequest_t * pDestStruct, const IGGDelChatRoomMemberRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDelChatRoomMemberRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDelChatRoomMemberRequest_t * ptStruct1, IGGDelChatRoomMemberRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDelChatRoomMemberRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDelChatRoomMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelChatRoomMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelChatRoomMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelChatRoomMemberRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelChatRoomMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelChatRoomMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDelChatRoomMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelChatRoomMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelChatRoomMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelChatRoomMemberResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelChatRoomMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelChatRoomMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDelChatRoomMemberResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDelChatRoomMemberResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDelChatRoomMemberResponse_t * pDestStruct, const IGGDelChatRoomMemberResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDelChatRoomMemberResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDelChatRoomMemberResponse_t * ptStruct1, IGGDelChatRoomMemberResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDelChatRoomMemberResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDelChatRoomMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelChatRoomMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelChatRoomMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelChatRoomMemberResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelChatRoomMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelChatRoomMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


int IGGMicroMsgPickle :: ToBuffer( const IGGAddGroupMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddGroupMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddGroupMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddGroupMemberRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddGroupMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddGroupMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGAddGroupMemberRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGAddGroupMemberRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGAddGroupMemberRequest_t * pDestStruct, const IGGAddGroupMemberRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGAddGroupMemberRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGAddGroupMemberRequest_t * ptStruct1, IGGAddGroupMemberRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGAddGroupMemberRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAddGroupMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddGroupMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddGroupMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddGroupMemberRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddGroupMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddGroupMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGAddGroupMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddGroupMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddGroupMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddGroupMemberResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddGroupMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddGroupMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGAddGroupMemberResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGAddGroupMemberResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGAddGroupMemberResponse_t * pDestStruct, const IGGAddGroupMemberResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGAddGroupMemberResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGAddGroupMemberResponse_t * ptStruct1, IGGAddGroupMemberResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGAddGroupMemberResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGAddGroupMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGAddGroupMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGAddGroupMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGAddGroupMemberResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGAddGroupMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGAddGroupMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGDelGroupMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelGroupMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelGroupMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelGroupMemberRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelGroupMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelGroupMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDelGroupMemberRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDelGroupMemberRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDelGroupMemberRequest_t * pDestStruct, const IGGDelGroupMemberRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDelGroupMemberRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDelGroupMemberRequest_t * ptStruct1, IGGDelGroupMemberRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDelGroupMemberRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDelGroupMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelGroupMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelGroupMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelGroupMemberRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelGroupMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelGroupMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDelGroupMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelGroupMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelGroupMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelGroupMemberResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelGroupMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelGroupMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDelGroupMemberResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDelGroupMemberResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDelGroupMemberResponse_t * pDestStruct, const IGGDelGroupMemberResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDelGroupMemberResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDelGroupMemberResponse_t * ptStruct1, IGGDelGroupMemberResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDelGroupMemberResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDelGroupMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDelGroupMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDelGroupMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDelGroupMemberResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDelGroupMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDelGroupMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



int IGGMicroMsgPickle :: ToBuffer( const IGGLbsChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsChatRoomRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGLbsChatRoomRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGLbsChatRoomRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGLbsChatRoomRequest_t * pDestStruct, const IGGLbsChatRoomRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGLbsChatRoomRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGLbsChatRoomRequest_t * ptStruct1, IGGLbsChatRoomRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGLbsChatRoomRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsChatRoomRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//============================
int IGGMicroMsgPickle :: ToBuffer( const IGGChatRoomMember_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGChatRoomMember, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGChatRoomMember, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGChatRoomMember_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGChatRoomMember, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGChatRoomMember, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGChatRoomMember_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGChatRoomMember, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGChatRoomMember_t * pDestStruct, const IGGChatRoomMember_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGChatRoomMember, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGChatRoomMember_t * ptStruct1, IGGChatRoomMember_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGChatRoomMember, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGChatRoomMember_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGChatRoomMember, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGChatRoomMember, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGChatRoomMember_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGChatRoomMember, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGChatRoomMember, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//============================
int IGGMicroMsgPickle :: ToBuffer( const IGGLbsChatRoom_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsChatRoom, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsChatRoom, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsChatRoom_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsChatRoom, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsChatRoom, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGLbsChatRoom_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGLbsChatRoom, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGLbsChatRoom_t * pDestStruct, const IGGLbsChatRoom_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGLbsChatRoom, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGLbsChatRoom_t * ptStruct1, IGGLbsChatRoom_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGLbsChatRoom, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsChatRoom_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsChatRoom, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsChatRoom, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsChatRoom_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsChatRoom, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsChatRoom, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}
//================================

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsChatRoomResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGLbsChatRoomResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGLbsChatRoomResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGLbsChatRoomResponse_t * pDestStruct, const IGGLbsChatRoomResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGLbsChatRoomResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGLbsChatRoomResponse_t * ptStruct1, IGGLbsChatRoomResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGLbsChatRoomResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGLbsChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGLbsChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGLbsChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGLbsChatRoomResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGLbsChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGLbsChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//==============================================

int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyChatRoomMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyChatRoomMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyChatRoomMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyChatRoomMemberRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyChatRoomMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyChatRoomMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGVerifyChatRoomMemberRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGVerifyChatRoomMemberRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGVerifyChatRoomMemberRequest_t * pDestStruct, const IGGVerifyChatRoomMemberRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGVerifyChatRoomMemberRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGVerifyChatRoomMemberRequest_t * ptStruct1, IGGVerifyChatRoomMemberRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGVerifyChatRoomMemberRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyChatRoomMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyChatRoomMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyChatRoomMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyChatRoomMemberRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyChatRoomMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyChatRoomMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//==================================================

int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyChatRoomMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyChatRoomMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyChatRoomMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyChatRoomMemberResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyChatRoomMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyChatRoomMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGVerifyChatRoomMemberResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGVerifyChatRoomMemberResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGVerifyChatRoomMemberResponse_t * pDestStruct, const IGGVerifyChatRoomMemberResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGVerifyChatRoomMemberResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGVerifyChatRoomMemberResponse_t * ptStruct1, IGGVerifyChatRoomMemberResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGVerifyChatRoomMemberResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGVerifyChatRoomMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGVerifyChatRoomMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGVerifyChatRoomMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGVerifyChatRoomMemberResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGVerifyChatRoomMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGVerifyChatRoomMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//==========================================================

int IGGMicroMsgPickle :: ToBuffer( const IGGInviteChatRoomMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGInviteChatRoomMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGInviteChatRoomMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGInviteChatRoomMemberRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGInviteChatRoomMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGInviteChatRoomMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGInviteChatRoomMemberRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGInviteChatRoomMemberRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGInviteChatRoomMemberRequest_t * pDestStruct, const IGGInviteChatRoomMemberRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGInviteChatRoomMemberRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGInviteChatRoomMemberRequest_t * ptStruct1, IGGInviteChatRoomMemberRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGInviteChatRoomMemberRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGInviteChatRoomMemberRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGInviteChatRoomMemberRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGInviteChatRoomMemberRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGInviteChatRoomMemberRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGInviteChatRoomMemberRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGInviteChatRoomMemberRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//==================================================

int IGGMicroMsgPickle :: ToBuffer( const IGGInviteChatRoomMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGInviteChatRoomMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGInviteChatRoomMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGInviteChatRoomMemberResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGInviteChatRoomMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGInviteChatRoomMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGInviteChatRoomMemberResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGInviteChatRoomMemberResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGInviteChatRoomMemberResponse_t * pDestStruct, const IGGInviteChatRoomMemberResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGInviteChatRoomMemberResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGInviteChatRoomMemberResponse_t * ptStruct1, IGGInviteChatRoomMemberResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGInviteChatRoomMemberResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGInviteChatRoomMemberResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGInviteChatRoomMemberResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGInviteChatRoomMemberResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGInviteChatRoomMemberResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGInviteChatRoomMemberResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGInviteChatRoomMemberResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//======================================================

int IGGMicroMsgPickle :: ToBuffer( const IGGCloseChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCloseChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCloseChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCloseChatRoomRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCloseChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCloseChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCloseChatRoomRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCloseChatRoomRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCloseChatRoomRequest_t * pDestStruct, const IGGCloseChatRoomRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCloseChatRoomRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCloseChatRoomRequest_t * ptStruct1, IGGCloseChatRoomRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCloseChatRoomRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCloseChatRoomRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCloseChatRoomRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCloseChatRoomRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCloseChatRoomRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCloseChatRoomRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCloseChatRoomRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

//============================================================

int IGGMicroMsgPickle :: ToBuffer( const IGGCloseChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCloseChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCloseChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCloseChatRoomResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGCloseChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCloseChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGCloseChatRoomResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGCloseChatRoomResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGCloseChatRoomResponse_t * pDestStruct, const IGGCloseChatRoomResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGCloseChatRoomResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGCloseChatRoomResponse_t * ptStruct1, IGGCloseChatRoomResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGCloseChatRoomResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGCloseChatRoomResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGCloseChatRoomResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGCloseChatRoomResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGCloseChatRoomResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGCloseChatRoomResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGCloseChatRoomResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


////////////////////////// »∫œ‡πÿ End //////////////////////////////
int IGGMicroMsgPickle :: ToBuffer( const IGGDisturbTimeSpan_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDisturbTimeSpan, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDisturbTimeSpan, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDisturbTimeSpan_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDisturbTimeSpan, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDisturbTimeSpan, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDisturbTimeSpan_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDisturbTimeSpan, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDisturbTimeSpan_t * pDestStruct, const IGGDisturbTimeSpan_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDisturbTimeSpan, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDisturbTimeSpan_t * ptStruct1, IGGDisturbTimeSpan_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDisturbTimeSpan, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDisturbTimeSpan_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDisturbTimeSpan, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDisturbTimeSpan, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDisturbTimeSpan_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDisturbTimeSpan, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDisturbTimeSpan, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDisturbSetting_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDisturbSetting, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDisturbSetting, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDisturbSetting_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGDisturbSetting, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDisturbSetting, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGDisturbSetting_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGDisturbSetting, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGDisturbSetting_t * pDestStruct, const IGGDisturbSetting_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGDisturbSetting, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGDisturbSetting_t * ptStruct1, IGGDisturbSetting_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGDisturbSetting, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGDisturbSetting_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGDisturbSetting, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGDisturbSetting, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGDisturbSetting_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGDisturbSetting, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGDisturbSetting, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGmailInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGmailInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGmailInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGmailInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGmailInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGmailInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGmailInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGmailInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGmailInfo_t * pDestStruct, const IGGGmailInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGmailInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGmailInfo_t * ptStruct1, IGGGmailInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGmailInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGmailInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGmailInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGmailInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGmailInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGmailInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGmailInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGmailList_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGmailList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGmailList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGmailList_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGmailList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGmailList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGmailList_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGmailList, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGmailList_t * pDestStruct, const IGGGmailList_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGmailList, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGmailList_t * ptStruct1, IGGGmailList_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGmailList, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGmailList_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGmailList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGmailList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGmailList_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGmailList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGmailList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGFacebookInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGFacebookInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGFacebookInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGFacebookInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGFacebookInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGFacebookInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGFacebookInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGFacebookInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGFacebookInfo_t * pDestStruct, const IGGFacebookInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGFacebookInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGFacebookInfo_t * ptStruct1, IGGFacebookInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGFacebookInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGFacebookInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGFacebookInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGFacebookInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGFacebookInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGFacebookInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGFacebookInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSafeDevice_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSafeDevice, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSafeDevice, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSafeDevice_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSafeDevice, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSafeDevice, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSafeDevice_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSafeDevice, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSafeDevice_t * pDestStruct, const IGGSafeDevice_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSafeDevice, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSafeDevice_t * ptStruct1, IGGSafeDevice_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSafeDevice, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSafeDevice_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSafeDevice, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSafeDevice, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSafeDevice_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSafeDevice, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSafeDevice, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSafeDeviceList_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSafeDeviceList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSafeDeviceList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSafeDeviceList_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGSafeDeviceList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSafeDeviceList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGSafeDeviceList_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGSafeDeviceList, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGSafeDeviceList_t * pDestStruct, const IGGSafeDeviceList_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGSafeDeviceList, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGSafeDeviceList_t * ptStruct1, IGGSafeDeviceList_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGSafeDeviceList, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGSafeDeviceList_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGSafeDeviceList, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGSafeDeviceList, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGSafeDeviceList_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGSafeDeviceList, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGSafeDeviceList, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUserInfoExt_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUserInfoExt, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUserInfoExt, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUserInfoExt_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUserInfoExt, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUserInfoExt, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUserInfoExt_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUserInfoExt, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUserInfoExt_t * pDestStruct, const IGGUserInfoExt_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUserInfoExt, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUserInfoExt_t * ptStruct1, IGGUserInfoExt_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUserInfoExt, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUserInfoExt_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUserInfoExt, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUserInfoExt, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUserInfoExt_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUserInfoExt, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUserInfoExt, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModUserInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModUserInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModUserInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModUserInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModUserInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModUserInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModUserInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModUserInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModUserInfo_t * pDestStruct, const IGGModUserInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModUserInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModUserInfo_t * ptStruct1, IGGModUserInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModUserInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModUserInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModUserInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModUserInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModUserInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModUserInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModUserInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetProfileRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetProfileRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetProfileRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetProfileRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetProfileRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetProfileRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetProfileRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetProfileRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetProfileRequest_t * pDestStruct, const IGGGetProfileRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetProfileRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetProfileRequest_t * ptStruct1, IGGGetProfileRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetProfileRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetProfileRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetProfileRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetProfileRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetProfileRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetProfileRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetProfileRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetProfileResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetProfileResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetProfileResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetProfileResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetProfileResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetProfileResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetProfileResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetProfileResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetProfileResponse_t * pDestStruct, const IGGGetProfileResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetProfileResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetProfileResponse_t * ptStruct1, IGGGetProfileResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetProfileResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetProfileResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetProfileResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetProfileResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetProfileResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetProfileResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetProfileResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadCoverImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadCoverImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadCoverImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadCoverImgRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadCoverImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadCoverImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadCoverImgRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadCoverImgRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadCoverImgRequest_t * pDestStruct, const IGGUploadCoverImgRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadCoverImgRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadCoverImgRequest_t * ptStruct1, IGGUploadCoverImgRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadCoverImgRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadCoverImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadCoverImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadCoverImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadCoverImgRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadCoverImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadCoverImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadCoverImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadCoverImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadCoverImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadCoverImgResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadCoverImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadCoverImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadCoverImgResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadCoverImgResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadCoverImgResponse_t * pDestStruct, const IGGUploadCoverImgResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadCoverImgResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadCoverImgResponse_t * ptStruct1, IGGUploadCoverImgResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadCoverImgResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadCoverImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadCoverImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadCoverImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadCoverImgResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadCoverImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadCoverImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetCoverImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetCoverImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetCoverImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetCoverImgRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetCoverImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetCoverImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetCoverImgRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetCoverImgRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetCoverImgRequest_t * pDestStruct, const IGGGetCoverImgRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetCoverImgRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetCoverImgRequest_t * ptStruct1, IGGGetCoverImgRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetCoverImgRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetCoverImgRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetCoverImgRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetCoverImgRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetCoverImgRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetCoverImgRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetCoverImgRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetCoverImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetCoverImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetCoverImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetCoverImgResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetCoverImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetCoverImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGGetCoverImgResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGGetCoverImgResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGGetCoverImgResponse_t * pDestStruct, const IGGGetCoverImgResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGGetCoverImgResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGGetCoverImgResponse_t * ptStruct1, IGGGetCoverImgResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGGetCoverImgResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGGetCoverImgResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGGetCoverImgResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGGetCoverImgResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGGetCoverImgResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGGetCoverImgResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGGetCoverImgResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGHobby_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGHobby, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGHobby, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGHobby_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGHobby, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGHobby, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGHobby_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGHobby, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGHobby_t * pDestStruct, const IGGHobby_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGHobby, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGHobby_t * ptStruct1, IGGHobby_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGHobby, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGHobby_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGHobby, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGHobby, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGHobby_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGHobby, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGHobby, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGBirthday_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBirthday, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBirthday, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBirthday_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGBirthday, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBirthday, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGBirthday_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGBirthday, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGBirthday_t * pDestStruct, const IGGBirthday_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGBirthday, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGBirthday_t * ptStruct1, IGGBirthday_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGBirthday, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGBirthday_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGBirthday, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGBirthday, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGBirthday_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGBirthday, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGBirthday, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGFunctionSwitch_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGFunctionSwitch, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGFunctionSwitch, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGFunctionSwitch_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGFunctionSwitch, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGFunctionSwitch, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGFunctionSwitch_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGFunctionSwitch, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGFunctionSwitch_t * pDestStruct, const IGGFunctionSwitch_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGFunctionSwitch, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGFunctionSwitch_t * ptStruct1, IGGFunctionSwitch_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGFunctionSwitch, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGFunctionSwitch_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGFunctionSwitch, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGFunctionSwitch, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGFunctionSwitch_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGFunctionSwitch, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGFunctionSwitch, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}


//////////////////////////////////////////////////

int IGGMicroMsgPickle :: ToBuffer( const IGGMobileOptRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMobileOptRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMobileOptRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMobileOptRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGMobileOptRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMobileOptRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGMobileOptRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGMobileOptRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGMobileOptRequest_t * pDestStruct, const IGGMobileOptRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGMobileOptRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGMobileOptRequest_t * ptStruct1, IGGMobileOptRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGMobileOptRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGMobileOptRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMobileOptRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMobileOptRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMobileOptRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGMobileOptRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMobileOptRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}


int IGGMicroMsgPickle :: ToBuffer( const IGGMobileOptResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMobileOptResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMobileOptResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMobileOptResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGMobileOptResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMobileOptResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGMobileOptResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGMobileOptResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGMobileOptResponse_t * pDestStruct, const IGGMobileOptResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGMobileOptResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGMobileOptResponse_t * ptStruct1, IGGMobileOptResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGMobileOptResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGMobileOptResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGMobileOptResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGMobileOptResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGMobileOptResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGMobileOptResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGMobileOptResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}

////////////////////////////////////////


int IGGMicroMsgPickle :: ToBuffer( const IGGEmailOptRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmailOptRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmailOptRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmailOptRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmailOptRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmailOptRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGEmailOptRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGEmailOptRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGEmailOptRequest_t * pDestStruct, const IGGEmailOptRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGEmailOptRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGEmailOptRequest_t * ptStruct1, IGGEmailOptRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGEmailOptRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGEmailOptRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmailOptRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmailOptRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmailOptRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmailOptRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmailOptRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}


int IGGMicroMsgPickle :: ToBuffer( const IGGEmailOptResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmailOptResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmailOptResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmailOptResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmailOptResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmailOptResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGEmailOptResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGEmailOptResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGEmailOptResponse_t * pDestStruct, const IGGEmailOptResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGEmailOptResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGEmailOptResponse_t * ptStruct1, IGGEmailOptResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGEmailOptResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGEmailOptResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGEmailOptResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGEmailOptResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGEmailOptResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGEmailOptResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGEmailOptResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}


int IGGMicroMsgPickle :: ToBuffer( const IGGUploadPlugFriendsRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadPlugFriendsRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadPlugFriendsRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadPlugFriendsRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadPlugFriendsRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadPlugFriendsRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadPlugFriendsRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadPlugFriendsRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadPlugFriendsRequest_t * pDestStruct, const IGGUploadPlugFriendsRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadPlugFriendsRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadPlugFriendsRequest_t * ptStruct1, IGGUploadPlugFriendsRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadPlugFriendsRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadPlugFriendsRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadPlugFriendsRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadPlugFriendsRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadPlugFriendsRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadPlugFriendsRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadPlugFriendsRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}


int IGGMicroMsgPickle :: ToBuffer( const IGGUploadPlugFriendsResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadPlugFriendsResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadPlugFriendsResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadPlugFriendsResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadPlugFriendsResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadPlugFriendsResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGUploadPlugFriendsResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGUploadPlugFriendsResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGUploadPlugFriendsResponse_t * pDestStruct, const IGGUploadPlugFriendsResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGUploadPlugFriendsResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGUploadPlugFriendsResponse_t * ptStruct1, IGGUploadPlugFriendsResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGUploadPlugFriendsResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGUploadPlugFriendsResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGUploadPlugFriendsResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGUploadPlugFriendsResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}
	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGUploadPlugFriendsResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGUploadPlugFriendsResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGUploadPlugFriendsResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}
	return -1;

}

int IGGMicroMsgPickle :: ToBuffer( const IGGPushSettingRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPushSettingRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPushSettingRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPushSettingRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGPushSettingRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPushSettingRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGPushSettingRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGPushSettingRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGPushSettingRequest_t * pDestStruct, const IGGPushSettingRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGPushSettingRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGPushSettingRequest_t * ptStruct1, IGGPushSettingRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGPushSettingRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGPushSettingRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPushSettingRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPushSettingRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPushSettingRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGPushSettingRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPushSettingRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGPushSettingResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPushSettingResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPushSettingResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPushSettingResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGPushSettingResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPushSettingResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGPushSettingResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGPushSettingResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGPushSettingResponse_t * pDestStruct, const IGGPushSettingResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGPushSettingResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGPushSettingResponse_t * ptStruct1, IGGPushSettingResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGPushSettingResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGPushSettingResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGPushSettingResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGPushSettingResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGPushSettingResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGPushSettingResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGPushSettingResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

///////////////////////////////

int IGGMicroMsgPickle :: ToBuffer( const IGGModUserNameRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModUserNameRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModUserNameRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModUserNameRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModUserNameRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModUserNameRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModUserNameRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModUserNameRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModUserNameRequest_t * pDestStruct, const IGGModUserNameRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModUserNameRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModUserNameRequest_t * ptStruct1, IGGModUserNameRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModUserNameRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModUserNameRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModUserNameRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModUserNameRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModUserNameRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModUserNameRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModUserNameRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModUserNameResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModUserNameResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModUserNameResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModUserNameResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModUserNameResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModUserNameResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModUserNameResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModUserNameResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModUserNameResponse_t * pDestStruct, const IGGModUserNameResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModUserNameResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModUserNameResponse_t * ptStruct1, IGGModUserNameResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModUserNameResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModUserNameResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModUserNameResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModUserNameResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModUserNameResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModUserNameResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModUserNameResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

////////////////////

int IGGMicroMsgPickle :: ToBuffer( const IGGModPwdRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModPwdRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModPwdRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModPwdRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModPwdRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModPwdRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModPwdRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModPwdRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModPwdRequest_t * pDestStruct, const IGGModPwdRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModPwdRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModPwdRequest_t * ptStruct1, IGGModPwdRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModPwdRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModPwdRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModPwdRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModPwdRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModPwdRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModPwdRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModPwdRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModPwdResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModPwdResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModPwdResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModPwdResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModPwdResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModPwdResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModPwdResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModPwdResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModPwdResponse_t * pDestStruct, const IGGModPwdResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModPwdResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModPwdResponse_t * ptStruct1, IGGModPwdResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModPwdResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModPwdResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModPwdResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModPwdResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModPwdResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModPwdResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModPwdResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

////////////////////

int IGGMicroMsgPickle :: ToBuffer( const IGGModPwdByMobileRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModPwdByMobileRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModPwdByMobileRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModPwdByMobileRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModPwdByMobileRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModPwdByMobileRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModPwdByMobileRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModPwdByMobileRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModPwdByMobileRequest_t * pDestStruct, const IGGModPwdByMobileRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModPwdByMobileRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModPwdByMobileRequest_t * ptStruct1, IGGModPwdByMobileRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModPwdByMobileRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModPwdByMobileRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModPwdByMobileRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModPwdByMobileRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModPwdByMobileRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModPwdByMobileRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModPwdByMobileRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModPwdByMobileResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModPwdByMobileResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModPwdByMobileResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModPwdByMobileResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGModPwdByMobileResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModPwdByMobileResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGModPwdByMobileResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGModPwdByMobileResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGModPwdByMobileResponse_t * pDestStruct, const IGGModPwdByMobileResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGModPwdByMobileResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGModPwdByMobileResponse_t * ptStruct1, IGGModPwdByMobileResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGModPwdByMobileResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGModPwdByMobileResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGModPwdByMobileResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGModPwdByMobileResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGModPwdByMobileResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGModPwdByMobileResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGModPwdByMobileResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

/////////////////////////////////////////////////////


int IGGMicroMsgPickle :: ToBuffer( const IGGReportProfileRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGReportProfileRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGReportProfileRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGReportProfileRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGReportProfileRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGReportProfileRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGReportProfileRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGReportProfileRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGReportProfileRequest_t * pDestStruct, const IGGReportProfileRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGReportProfileRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGReportProfileRequest_t * ptStruct1, IGGReportProfileRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGReportProfileRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGReportProfileRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGReportProfileRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGReportProfileRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGReportProfileRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGReportProfileRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGReportProfileRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGReportProfileResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGReportProfileResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGReportProfileResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGReportProfileResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGReportProfileResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGReportProfileResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGReportProfileResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGReportProfileResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGReportProfileResponse_t * pDestStruct, const IGGReportProfileResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGReportProfileResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGReportProfileResponse_t * ptStruct1, IGGReportProfileResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGReportProfileResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGReportProfileResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGReportProfileResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGReportProfileResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGReportProfileResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGReportProfileResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGReportProfileResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

/////////////////////////////////////////////////////

int IGGMicroMsgPickle :: ToBuffer( const IGGReportGroupRequest_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGReportGroupRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGReportGroupRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGReportGroupRequest_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGReportGroupRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGReportGroupRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGReportGroupRequest_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGReportGroupRequest, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGReportGroupRequest_t * pDestStruct, const IGGReportGroupRequest_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGReportGroupRequest, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGReportGroupRequest_t * ptStruct1, IGGReportGroupRequest_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGReportGroupRequest, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGReportGroupRequest_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGReportGroupRequest, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGReportGroupRequest, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGReportGroupRequest_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGReportGroupRequest, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGReportGroupRequest, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: ToBuffer( const IGGReportGroupResponse_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGReportGroupResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGReportGroupResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGReportGroupResponse_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGReportGroupResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGReportGroupResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGReportGroupResponse_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGReportGroupResponse, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGReportGroupResponse_t * pDestStruct, const IGGReportGroupResponse_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGReportGroupResponse, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGReportGroupResponse_t * ptStruct1, IGGReportGroupResponse_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGReportGroupResponse, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGReportGroupResponse_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGReportGroupResponse, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGReportGroupResponse, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGReportGroupResponse_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGReportGroupResponse, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGReportGroupResponse, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

/////////////////////////////////////////////////////


int IGGMicroMsgPickle :: ToBuffer( const IGGWebProxyInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGWebProxyInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGWebProxyInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGWebProxyInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeIGGWebProxyInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGWebProxyInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int IGGMicroMsgPickle :: FreeStructField( IGGWebProxyInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );
	return Allocator.FreeField(
		eTypeIGGWebProxyInfo, &tStruct, sizeof( tStruct ) );
}

int IGGMicroMsgPickle :: DeepCopy( IGGWebProxyInfo_t * pDestStruct, const IGGWebProxyInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.DeepCopy(
		eTypeIGGWebProxyInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int IGGMicroMsgPickle :: Diff( IGGWebProxyInfo_t * ptStruct1, IGGWebProxyInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptIGGMicroMsgMetaInfo );

	return Allocator.Diff(
		eTypeIGGWebProxyInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int IGGMicroMsgPickle :: ToBuffer( const IGGWebProxyInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeIGGWebProxyInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeIGGWebProxyInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int IGGMicroMsgPickle :: FromBuffer( Comm::SKBuffer * poBuffer, IGGWebProxyInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objIGGMicroMsgMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Buffer2Struct(
			eTypeIGGWebProxyInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptIGGMicroMsgMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeIGGWebProxyInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}




#endif


 

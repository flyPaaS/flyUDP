/* SK_qsdomainverifyclass.h

  Generated by SKxml2class from testcase/domainverify.xml

  Please DO NOT edit unless you know exactly what you are doing.


*/

#pragma once


#include <stdint.h>

#include "skbuiltintype.h"
#include "skinnerstruct.h"

namespace Comm
{

class Qs_uin {
public:
	Qs_uin();
	~Qs_uin();

	Qs_uin( const Qs_uin & other );
	Qs_uin( const qs_uin_t & other );

	Qs_uin & operator=( const Qs_uin & other );

	void SetVal( const uint32_t & tVal );
	uint32_t GetVal() const;

	qs_uin_t * DetachImpl();
	qs_uin_t * GetImpl() const;

	void SetImpl( qs_uin_t * Impl );

private:
	qs_uin_t* m_ptImpl;

};

typedef SKVector< Qs_uin, qs_uin_t > SKVector_Qs_uin;

class SKBuiltinString {
public:
	SKBuiltinString();
	~SKBuiltinString();

	SKBuiltinString( const SKBuiltinString & other );
	SKBuiltinString( const SKBuiltinString_t & other );

	SKBuiltinString & operator=( const SKBuiltinString & other );

	int GetLen() const;
	void SetString( const char * pcBuff );
	char *GetString( int * iSize = NULL ) const;

	SKBuiltinString_t * DetachImpl();
	SKBuiltinString_t * GetImpl() const;

	void SetImpl( SKBuiltinString_t * Impl );


private:
	SKBuiltinString_t * m_ptImpl;

};

typedef SKVector < SKBuiltinString, SKBuiltinString_t > SKVector_SKBuiltinString;


class SKBuiltinBuffer {
public:
	SKBuiltinBuffer();
	~SKBuiltinBuffer();

	SKBuiltinBuffer( const SKBuiltinBuffer & other );
	SKBuiltinBuffer( const SKBuiltinBuffer_t & other );

	SKBuiltinBuffer & operator=( const SKBuiltinBuffer & other );

	int GetLen()const;
	
	void SetBuffer( const char * pcBuffer, const int &iSize );
	char * GetBuffer( int *iSize = NULL )const;

	SKBuiltinBuffer_t * DetachImpl();
	SKBuiltinBuffer_t * GetImpl() const;

	void SetImpl( SKBuiltinBuffer_t * Impl );

private:
	SKBuiltinBuffer_t * m_ptImpl;

};

typedef SKVector< SKBuiltinBuffer, SKBuiltinBuffer_t > SKVector_SKBuiltinBuffer;

class SKBuiltinDouble64 {
public:
	SKBuiltinDouble64();
	~SKBuiltinDouble64();

	SKBuiltinDouble64( const SKBuiltinDouble64 & other );
	SKBuiltinDouble64( const SKBuiltinDouble64_t & other );

	SKBuiltinDouble64 & operator=( const SKBuiltinDouble64 & other );

	void SetVal( const double &tVal );
	double GetVal() const;

	SKBuiltinDouble64_t * DetachImpl();
	SKBuiltinDouble64_t * GetImpl() const;
	void SetImpl( SKBuiltinDouble64_t * Impl );

private:
	SKBuiltinDouble64_t * m_ptImpl;

};

typedef SKVector< SKBuiltinDouble64, SKBuiltinDouble64_t > SKVector_SKBuiltinDouble64;

class SKBuiltinFloat32 {
public:
	SKBuiltinFloat32();
	~SKBuiltinFloat32();

	SKBuiltinFloat32( const SKBuiltinFloat32 & other );
	SKBuiltinFloat32( const SKBuiltinFloat32_t & other );

	SKBuiltinFloat32 & operator=( const SKBuiltinFloat32 & other );

	void SetVal( const float &tVal );
	float GetVal() const;

	SKBuiltinFloat32_t * DetachImpl();
	SKBuiltinFloat32_t * GetImpl() const;
	void SetImpl( SKBuiltinFloat32_t * Impl );

private:
	SKBuiltinFloat32_t * m_ptImpl;

};

typedef SKVector< SKBuiltinFloat32, SKBuiltinFloat32_t > SKVector_SKBuiltinFloat32;

class SKBuiltinUint64 {
public:
	SKBuiltinUint64();
	~SKBuiltinUint64();

	SKBuiltinUint64( const SKBuiltinUint64 & other );
	SKBuiltinUint64( const SKBuiltinUint64_t & other );

	SKBuiltinUint64 & operator=( const SKBuiltinUint64 & other );

	void SetVal( const uint64_t &tVal );
	uint64_t GetVal() const;

	SKBuiltinUint64_t * DetachImpl();
	SKBuiltinUint64_t * GetImpl() const;
	void SetImpl( SKBuiltinUint64_t * Impl );

private:
	SKBuiltinUint64_t * m_ptImpl;

};

typedef SKVector< SKBuiltinUint64, SKBuiltinUint64_t > SKVector_SKBuiltinUint64;

class SKBuiltinInt64 {
public:
	SKBuiltinInt64();
	~SKBuiltinInt64();

	SKBuiltinInt64( const SKBuiltinInt64 & other );
	SKBuiltinInt64( const SKBuiltinInt64_t & other );

	SKBuiltinInt64 & operator=( const SKBuiltinInt64 & other );

	void SetVal( const int64_t & tVal );
	int64_t GetVal() const;

	SKBuiltinInt64_t * DetachImpl();
	SKBuiltinInt64_t * GetImpl() const;

	void SetImpl( SKBuiltinInt64_t * Impl );

private:
	SKBuiltinInt64_t * m_ptImpl;

};

typedef SKVector< SKBuiltinInt64, SKBuiltinInt64_t > SKVector_SKBuiltinInt64;

class SKBuiltinUint16 {
public:
	SKBuiltinUint16();
	~SKBuiltinUint16();

	SKBuiltinUint16( const SKBuiltinUint16 & other );
	SKBuiltinUint16( const SKBuiltinUint16_t & other );

	SKBuiltinUint16 & operator=( const SKBuiltinUint16 & other );

	void SetVal( const uint16_t & tVal );
	uint16_t GetVal() const;

	SKBuiltinUint16_t * DetachImpl();
	SKBuiltinUint16_t * GetImpl() const;
	void SetImpl( SKBuiltinUint16_t * Impl );

private:
	SKBuiltinUint16_t * m_ptImpl;

};

typedef SKVector< SKBuiltinUint16, SKBuiltinUint16_t > SKVector_SKBuiltinUint16;

class SKBuiltinInt16 {
public:
	SKBuiltinInt16();
	~SKBuiltinInt16();

	SKBuiltinInt16( const SKBuiltinInt16 & other );
	SKBuiltinInt16( const SKBuiltinInt16_t & other );

	SKBuiltinInt16 & operator=( const SKBuiltinInt16 & other );

	void SetVal( const int16_t & tVal );
	int16_t GetVal() const;

	SKBuiltinInt16_t * DetachImpl();
	SKBuiltinInt16_t * GetImpl() const;
	void SetImpl( SKBuiltinInt16_t * Impl );

private:
	SKBuiltinInt16_t * m_ptImpl;

};

typedef SKVector< SKBuiltinInt16, SKBuiltinInt16_t > SKVector_SKBuiltinInt16;

class SKBuiltinUint8 {
public:
	SKBuiltinUint8();
	~SKBuiltinUint8();

	SKBuiltinUint8( const SKBuiltinUint8 & other );
	SKBuiltinUint8( const SKBuiltinUint8_t & other );

	SKBuiltinUint8 & operator=( const SKBuiltinUint8 & other );

	void SetVal( const uint8_t & tVal );
	uint8_t GetVal() const;

	SKBuiltinUint8_t * DetachImpl();
	SKBuiltinUint8_t * GetImpl() const;

	void SetImpl( SKBuiltinUint8_t * Impl );

private:
	SKBuiltinUint8_t * m_ptImpl;

};

typedef SKVector< SKBuiltinUint8, SKBuiltinUint8_t > SKVector_SKBuiltinUint8;

class SKBuiltinInt8 {
public:
	SKBuiltinInt8();
	~SKBuiltinInt8();

	SKBuiltinInt8( const SKBuiltinInt8 & other );
	SKBuiltinInt8( const SKBuiltinInt8_t & other );

	SKBuiltinInt8 & operator=( const SKBuiltinInt8 & other );

	void SetVal( const int8_t & tVal );
	int8_t GetVal() const;

	SKBuiltinInt8_t * DetachImpl();
	SKBuiltinInt8_t * GetImpl() const;

	void SetImpl( SKBuiltinInt8_t * Impl );

private:
	SKBuiltinInt8_t * m_ptImpl;

};

typedef SKVector< SKBuiltinInt8, SKBuiltinInt8_t> SKVector_SKBuiltinInt8;

class SKBuiltinUchar {
public:
	SKBuiltinUchar();
	~SKBuiltinUchar();

	SKBuiltinUchar( const SKBuiltinUchar & other );
	SKBuiltinUchar( const SKBuiltinUchar_t & other );

	SKBuiltinUchar & operator=( const SKBuiltinUchar & other );

	void SetVal( const unsigned char & tVal );
	unsigned char GetVal() const;

	SKBuiltinUchar_t * DetachImpl();
	SKBuiltinUchar_t * GetImpl() const;

	void SetImpl( SKBuiltinUchar_t * Impl );

private:
	SKBuiltinUchar_t * m_ptImpl;

};

typedef SKVector< SKBuiltinUchar, SKBuiltinUchar_t > SKVector_SKBuiltinUchar;

class SKBuiltinChar {
public:
	SKBuiltinChar();
	~SKBuiltinChar();

	SKBuiltinChar( const SKBuiltinChar & other );
	SKBuiltinChar( const SKBuiltinChar_t & other );

	SKBuiltinChar & operator=( const SKBuiltinChar & other );

	void SetVal( const char & tVal );
	char GetVal() const;

	SKBuiltinChar_t * DetachImpl();
	SKBuiltinChar_t * GetImpl() const;

	void SetImpl( SKBuiltinChar_t * Impl );

private:
	SKBuiltinChar_t * m_ptImpl;

};

typedef SKVector< SKBuiltinChar, SKBuiltinChar_t > SKVector_SKBuiltinChar;

class SKBuiltinUint32 {
public:
	SKBuiltinUint32();
	~SKBuiltinUint32();

	SKBuiltinUint32( const SKBuiltinUint32 & other );
	SKBuiltinUint32( const SKBuiltinUint32_t & other );

	SKBuiltinUint32 & operator=( const SKBuiltinUint32 & other );

	void SetVal( const uint32_t & tVal );
	uint32_t GetVal() const;

	SKBuiltinUint32_t * DetachImpl();
	SKBuiltinUint32_t * GetImpl() const;

	void SetImpl( SKBuiltinUint32_t * Impl );

private:
	SKBuiltinUint32_t * m_ptImpl;

};

typedef SKVector< SKBuiltinUint32, SKBuiltinUint32 > SKVector_SKBuiltinUint32; 

class SKBuiltinInt32 {
public:
	SKBuiltinInt32();
	~SKBuiltinInt32();

	SKBuiltinInt32( const SKBuiltinInt32 & other );
	SKBuiltinInt32( const SKBuiltinInt32_t & other );

	SKBuiltinInt32 & operator=( const SKBuiltinInt32 & other );

	void SetVal( const int32_t & tVal );
	int32_t GetVal() const;

	SKBuiltinInt32_t * DetachImpl();
	SKBuiltinInt32_t * GetImpl() const;

	void SetImpl( SKBuiltinInt32_t * Impl );

private:
	SKBuiltinInt32_t * m_ptImpl;
};

typedef SKVector< SKBuiltinInt32, SKBuiltinInt32_t > SKVector_SKBuiltinInt32; 

class SKBuiltinClass
{
	public:
		int ToBuffer( Qs_uin * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, Qs_uin * poClass );

		int ToBuffer( SKBuiltinString * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinString * poClass );

		int ToBuffer( SKBuiltinBuffer * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinBuffer * poClass );

		int ToBuffer( SKBuiltinDouble64 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinDouble64 * poClass );

		int ToBuffer( SKBuiltinFloat32 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinFloat32 * poClass );

		int ToBuffer( SKBuiltinUint64 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinUint64 * poClass );

		int ToBuffer( SKBuiltinInt64 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinInt64 * poClass );
		
		int ToBuffer( SKBuiltinUint16 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinUint16 * poClass );

		int ToBuffer( SKBuiltinInt16 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinInt16 * poClass );

		int ToBuffer( SKBuiltinUint8 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinUint8 * poClass );

		int ToBuffer( SKBuiltinInt8 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinInt8 * poClass );

		int ToBuffer( SKBuiltinUchar * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinUchar * poClass );

		int ToBuffer( SKBuiltinChar * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinChar * poClass );

		int ToBuffer( SKBuiltinUint32 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinUint32 * poClass );

		int ToBuffer( SKBuiltinInt32 * poClass, Comm::SKBuffer * poBuffer );
		int FromBuffer( Comm::SKBuffer * poBuffer, SKBuiltinInt32 * poClass );


};
}

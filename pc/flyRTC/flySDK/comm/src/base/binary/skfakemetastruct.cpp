/* sk_skfakemetastruct.cpp

  Generated by skxml2struct from fakemeta.xml

  Please DO NOT edit unless you know exactly what you are doing.


*/

#include "iTLVPickle.h"

#include "skpbpickle.h"

#include "skmetainfofinder.h"

#include "skfakemetastruct.h"

using namespace Comm;

static const SKMetaField_t g_tMetaFieldListSKFakeMetaEchoInfo [] = {
	{ "EchoLen", SK_FIELD_OFFSET(SKFakeMetaEchoInfo_t, iEchoLen), eTypeSKUint32, 0, 1, -1,
		"", 1, sizeof(unsigned int), sizeof(unsigned int), 1, 0 },
	{ "EchoStr", SK_FIELD_OFFSET(SKFakeMetaEchoInfo_t, pcEchoStr), eTypeSKChar, 1, 0, -1,
		"EchoLen", 2, sizeof(char *), sizeof(char), 1, 0 }
};

static const SKMetaField_t g_tMetaFieldListSKFakeMetaField [] = {
	{ "Name", SK_FIELD_OFFSET(SKFakeMetaField_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "Offset", SK_FIELD_OFFSET(SKFakeMetaField_t, hOffset), eTypeSKInt16, 0, 1, -1,
		"", 2, sizeof(short), sizeof(short), 0, 0 },
	{ "Type", SK_FIELD_OFFSET(SKFakeMetaField_t, hType), eTypeSKInt16, 0, 1, -1,
		"", 3, sizeof(short), sizeof(short), 0, 0 },
	{ "IsPtr", SK_FIELD_OFFSET(SKFakeMetaField_t, cIsPtr), eTypeSKChar, 0, 1, -1,
		"", 4, sizeof(char), sizeof(char), 0, 0 },
	{ "IsRequired", SK_FIELD_OFFSET(SKFakeMetaField_t, cIsRequired), eTypeSKChar, 0, 1, -1,
		"", 5, sizeof(char), sizeof(char), 0, 0 },
	{ "ArraySize", SK_FIELD_OFFSET(SKFakeMetaField_t, hArraySize), eTypeSKInt16, 0, 1, -1,
		"", 6, sizeof(short), sizeof(short), 0, 0 },
	{ "ReferTo", SK_FIELD_OFFSET(SKFakeMetaField_t, pcReferTo), eTypeSKChar, 1, 0, -1,
		"strlen", 7, sizeof(char *), sizeof(char), 0, 0 },
	{ "Id", SK_FIELD_OFFSET(SKFakeMetaField_t, hId), eTypeSKInt16, 0, 1, -1,
		"", 8, sizeof(short), sizeof(short), 0, 0 },
	{ "FieldSize", SK_FIELD_OFFSET(SKFakeMetaField_t, hFieldSize), eTypeSKInt16, 0, 1, -1,
		"", 9, sizeof(short), sizeof(short), 0, 0 },
	{ "ItemSize", SK_FIELD_OFFSET(SKFakeMetaField_t, hItemSize), eTypeSKInt16, 0, 1, -1,
		"", 10, sizeof(short), sizeof(short), 0, 0 },
	{ "Status", SK_FIELD_OFFSET(SKFakeMetaField_t, cStatus), eTypeSKUchar, 0, 1, -1,
		"", 11, sizeof(unsigned char), sizeof(unsigned char), 0, 0 },
	{ "Reserved", SK_FIELD_OFFSET(SKFakeMetaField_t, cReserved), eTypeSKChar, 0, 1, -1,
		"", 12, sizeof(char), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListSKFakeMetaStruct [] = {
	{ "Id", SK_FIELD_OFFSET(SKFakeMetaStruct_t, hId), eTypeSKInt16, 0, 1, -1,
		"", 1, sizeof(short), sizeof(short), 0, 0 },
	{ "Name", SK_FIELD_OFFSET(SKFakeMetaStruct_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "Size", SK_FIELD_OFFSET(SKFakeMetaStruct_t, iSize), eTypeSKUint32, 0, 1, -1,
		"", 3, sizeof(unsigned int), sizeof(unsigned int), 0, 0 },
	{ "FieldCount", SK_FIELD_OFFSET(SKFakeMetaStruct_t, hFieldCount), eTypeSKUint16, 0, 1, -1,
		"", 4, sizeof(unsigned short), sizeof(unsigned short), 0, 0 },
	{ "FieldList", SK_FIELD_OFFSET(SKFakeMetaStruct_t, ptFieldList), eTypeSKFakeMetaField, 1, 0, -1,
		"FieldCount", 5, sizeof(SKFakeMetaField_t *), sizeof(SKFakeMetaField_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListSKFakeMetaParam [] = {
	{ "Name", SK_FIELD_OFFSET(SKFakeMetaParam_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "Type", SK_FIELD_OFFSET(SKFakeMetaParam_t, hType), eTypeSKInt16, 0, 1, -1,
		"", 2, sizeof(short), sizeof(short), 0, 0 },
	{ "Existence", SK_FIELD_OFFSET(SKFakeMetaParam_t, cExistence), eTypeSKChar, 0, 1, -1,
		"", 3, sizeof(char), sizeof(char), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListSKFakeMetaFunc [] = {
	{ "Name", SK_FIELD_OFFSET(SKFakeMetaFunc_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "Cmdid", SK_FIELD_OFFSET(SKFakeMetaFunc_t, hCmdid), eTypeSKInt16, 0, 1, -1,
		"", 2, sizeof(short), sizeof(short), 0, 0 },
	{ "Req", SK_FIELD_OFFSET(SKFakeMetaFunc_t, tReq), eTypeSKFakeMetaParam, 0, 1, -1,
		"", 3, sizeof(SKFakeMetaParam_t), sizeof(SKFakeMetaParam_t), 0, 0 },
	{ "Resp", SK_FIELD_OFFSET(SKFakeMetaFunc_t, tResp), eTypeSKFakeMetaParam, 0, 1, -1,
		"", 4, sizeof(SKFakeMetaParam_t), sizeof(SKFakeMetaParam_t), 0, 0 }
};

static const SKMetaField_t g_tMetaFieldListSKFakeMetaInfo [] = {
	{ "Prefix", SK_FIELD_OFFSET(SKFakeMetaInfo_t, pcPrefix), eTypeSKChar, 1, 0, -1,
		"strlen", 1, sizeof(char *), sizeof(char), 0, 0 },
	{ "Name", SK_FIELD_OFFSET(SKFakeMetaInfo_t, pcName), eTypeSKChar, 1, 0, -1,
		"strlen", 2, sizeof(char *), sizeof(char), 0, 0 },
	{ "Magic", SK_FIELD_OFFSET(SKFakeMetaInfo_t, iMagic), eTypeSKInt32, 0, 1, -1,
		"", 3, sizeof(int), sizeof(int), 0, 0 },
	{ "StructCount", SK_FIELD_OFFSET(SKFakeMetaInfo_t, hStructCount), eTypeSKInt16, 0, 1, -1,
		"", 4, sizeof(short), sizeof(short), 0, 0 },
	{ "StructList", SK_FIELD_OFFSET(SKFakeMetaInfo_t, ptStructList), eTypeSKFakeMetaStruct, 1, 0, -1,
		"StructCount", 5, sizeof(SKFakeMetaStruct_t *), sizeof(SKFakeMetaStruct_t), 0, 0 },
	{ "FuncCount", SK_FIELD_OFFSET(SKFakeMetaInfo_t, hFuncCount), eTypeSKInt16, 0, 1, -1,
		"", 6, sizeof(short), sizeof(short), 0, 0 },
	{ "FuncList", SK_FIELD_OFFSET(SKFakeMetaInfo_t, ptFuncList), eTypeSKFakeMetaFunc, 1, 0, -1,
		"FuncCount", 7, sizeof(SKFakeMetaFunc_t *), sizeof(SKFakeMetaFunc_t), 0, 0 }
};

static const SKMetaFunc_t g_tMetaSKFuncList [] = {
	{ "SKGetMetainfo", eFuncSKFakeMetaSKGetMetainfo,
		{ "", 0, 0 }, { "Response", eTypeSKBuiltinString, 1 } },
	{ "SKEcho", eFuncSKFakeMetaSKEcho,
		{ "Request", eTypeSKFakeMetaEchoInfo, 1 }, { "Response", eTypeSKFakeMetaEchoInfo, 1 } }
};

extern const SKMetaInfo_t * Comm::g_ptSKBuiltinMetaInfo;

static const SKMetaStruct_t g_tMetaSKStructList [] = {
	{ eTypeSKFakeMetaEchoInfo, "FakeMetaEchoInfo", sizeof(SKFakeMetaEchoInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListSKFakeMetaEchoInfo), g_tMetaFieldListSKFakeMetaEchoInfo },

	g_ptSKBuiltinMetaInfo->ptStructList[0],

	g_ptSKBuiltinMetaInfo->ptStructList[1],

	g_ptSKBuiltinMetaInfo->ptStructList[2],

	g_ptSKBuiltinMetaInfo->ptStructList[3],

	g_ptSKBuiltinMetaInfo->ptStructList[4],

	g_ptSKBuiltinMetaInfo->ptStructList[5],

	g_ptSKBuiltinMetaInfo->ptStructList[6],

	g_ptSKBuiltinMetaInfo->ptStructList[7],

	g_ptSKBuiltinMetaInfo->ptStructList[8],

	g_ptSKBuiltinMetaInfo->ptStructList[9],

	g_ptSKBuiltinMetaInfo->ptStructList[10],

	g_ptSKBuiltinMetaInfo->ptStructList[11],

	g_ptSKBuiltinMetaInfo->ptStructList[12],

	g_ptSKBuiltinMetaInfo->ptStructList[13],

	g_ptSKBuiltinMetaInfo->ptStructList[14],
	{ eTypeSKFakeMetaField, "FakeMetaField", sizeof(SKFakeMetaField_t),
		SK_ARRAY_SIZE(g_tMetaFieldListSKFakeMetaField), g_tMetaFieldListSKFakeMetaField },
	{ eTypeSKFakeMetaStruct, "FakeMetaStruct", sizeof(SKFakeMetaStruct_t),
		SK_ARRAY_SIZE(g_tMetaFieldListSKFakeMetaStruct), g_tMetaFieldListSKFakeMetaStruct },
	{ eTypeSKFakeMetaParam, "FakeMetaParam", sizeof(SKFakeMetaParam_t),
		SK_ARRAY_SIZE(g_tMetaFieldListSKFakeMetaParam), g_tMetaFieldListSKFakeMetaParam },
	{ eTypeSKFakeMetaFunc, "FakeMetaFunc", sizeof(SKFakeMetaFunc_t),
		SK_ARRAY_SIZE(g_tMetaFieldListSKFakeMetaFunc), g_tMetaFieldListSKFakeMetaFunc },
	{ eTypeSKFakeMetaInfo, "FakeMetaInfo", sizeof(SKFakeMetaInfo_t),
		SK_ARRAY_SIZE(g_tMetaFieldListSKFakeMetaInfo), g_tMetaFieldListSKFakeMetaInfo }
};

static const SKMetaInfo_t g_tMetaSKFakeMeta = {
	"SK", "FakeMeta", 10000,
	SK_ARRAY_SIZE(g_tMetaSKStructList), g_tMetaSKStructList,
	SK_ARRAY_SIZE(g_tMetaSKFuncList), g_tMetaSKFuncList
};

const SKMetaInfo_t * g_ptSKFakeMetaMetaInfo = &g_tMetaSKFakeMeta;
const static SKMetaInfoFinder g_objSKFakeMetaMetaInfoFinder(g_ptSKFakeMetaMetaInfo);
const SKMetaInfoFinder *  g_ptSKFakeMetaMetaInfoFinder=&g_objSKFakeMetaMetaInfoFinder;

//============================================================

int SKFakeMetaPickle :: m_iNetworkByteOrder = 0;
int SKFakeMetaPickle :: m_iPickleType = ePickleTypeTlv;
int SKFakeMetaPickle :: m_iPickleStatus = 0;

void SKFakeMetaPickle :: SetNetworkByteOrder( int iNetworkByteOrder )
{
	m_iNetworkByteOrder = iNetworkByteOrder;
}

void SKFakeMetaPickle :: SetPickleType( int iPickleType )
{
	m_iPickleType = iPickleType;
}

int SKFakeMetaPickle :: GetPickleType()
{
	return m_iPickleType;
}

void SKFakeMetaPickle :: SetPickleStatus( int iStatus )
{
	m_iPickleStatus = iStatus;
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaEchoInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaEchoInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaEchoInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaEchoInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaEchoInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaEchoInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: FreeStructField( SKFakeMetaEchoInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );
	return Allocator.FreeField(
		eTypeSKFakeMetaEchoInfo, &tStruct, sizeof( tStruct ) );
}

int SKFakeMetaPickle :: DeepCopy( SKFakeMetaEchoInfo_t * pDestStruct, const SKFakeMetaEchoInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.DeepCopy(
		eTypeSKFakeMetaEchoInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int SKFakeMetaPickle :: Diff( SKFakeMetaEchoInfo_t * ptStruct1, SKFakeMetaEchoInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.Diff(
		eTypeSKFakeMetaEchoInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaEchoInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaEchoInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaEchoInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaEchoInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaEchoInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaEchoInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaField_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaField, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaField, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaField_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaField, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaField, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: FreeStructField( SKFakeMetaField_t & tStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );
	return Allocator.FreeField(
		eTypeSKFakeMetaField, &tStruct, sizeof( tStruct ) );
}

int SKFakeMetaPickle :: DeepCopy( SKFakeMetaField_t * pDestStruct, const SKFakeMetaField_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.DeepCopy(
		eTypeSKFakeMetaField, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int SKFakeMetaPickle :: Diff( SKFakeMetaField_t * ptStruct1, SKFakeMetaField_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.Diff(
		eTypeSKFakeMetaField, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaField_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaField, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaField, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaField_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaField, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaField, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaStruct_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaStruct, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaStruct, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaStruct_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaStruct, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaStruct, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: FreeStructField( SKFakeMetaStruct_t & tStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );
	return Allocator.FreeField(
		eTypeSKFakeMetaStruct, &tStruct, sizeof( tStruct ) );
}

int SKFakeMetaPickle :: DeepCopy( SKFakeMetaStruct_t * pDestStruct, const SKFakeMetaStruct_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.DeepCopy(
		eTypeSKFakeMetaStruct, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int SKFakeMetaPickle :: Diff( SKFakeMetaStruct_t * ptStruct1, SKFakeMetaStruct_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.Diff(
		eTypeSKFakeMetaStruct, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaStruct_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaStruct, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaStruct, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaStruct_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaStruct, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaStruct, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaParam_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaParam, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaParam, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaParam_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaParam, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaParam, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: FreeStructField( SKFakeMetaParam_t & tStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );
	return Allocator.FreeField(
		eTypeSKFakeMetaParam, &tStruct, sizeof( tStruct ) );
}

int SKFakeMetaPickle :: DeepCopy( SKFakeMetaParam_t * pDestStruct, const SKFakeMetaParam_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.DeepCopy(
		eTypeSKFakeMetaParam, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int SKFakeMetaPickle :: Diff( SKFakeMetaParam_t * ptStruct1, SKFakeMetaParam_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.Diff(
		eTypeSKFakeMetaParam, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaParam_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaParam, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaParam, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaParam_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaParam, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaParam, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaFunc_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaFunc, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaFunc, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaFunc_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaFunc, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaFunc, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: FreeStructField( SKFakeMetaFunc_t & tStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );
	return Allocator.FreeField(
		eTypeSKFakeMetaFunc, &tStruct, sizeof( tStruct ) );
}

int SKFakeMetaPickle :: DeepCopy( SKFakeMetaFunc_t * pDestStruct, const SKFakeMetaFunc_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.DeepCopy(
		eTypeSKFakeMetaFunc, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int SKFakeMetaPickle :: Diff( SKFakeMetaFunc_t * ptStruct1, SKFakeMetaFunc_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.Diff(
		eTypeSKFakeMetaFunc, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaFunc_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaFunc, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaFunc, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaFunc_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaFunc, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaFunc, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaInfo_t * ptStruct, Comm::SKBuffer * poBuffer )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( m_iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaInfo_t * ptStruct )
{
	if( ePickleTypeProtoBuf == m_iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == m_iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}

int SKFakeMetaPickle :: FreeStructField( SKFakeMetaInfo_t & tStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );
	return Allocator.FreeField(
		eTypeSKFakeMetaInfo, &tStruct, sizeof( tStruct ) );
}

int SKFakeMetaPickle :: DeepCopy( SKFakeMetaInfo_t * pDestStruct, const SKFakeMetaInfo_t * pSourceStruct )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.DeepCopy(
		eTypeSKFakeMetaInfo, pDestStruct, pSourceStruct, sizeof( *pDestStruct ) );
}

int SKFakeMetaPickle :: Diff( SKFakeMetaInfo_t * ptStruct1, SKFakeMetaInfo_t * ptStruct2 )
{
	SKAllocator Allocator( g_ptSKFakeMetaMetaInfo );

	return Allocator.Diff(
		eTypeSKFakeMetaInfo, ptStruct1, ptStruct2, sizeof( *ptStruct1 ) );
}

int SKFakeMetaPickle :: ToBuffer( const SKFakeMetaInfo_t * ptStruct, Comm::SKBuffer * poBuffer, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );
		pbPickle.SetStatus( iPickleStatus );

		return pbPickle.Struct2Buffer(
			eTypeSKFakeMetaInfo, ptStruct,poBuffer );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Struct2Buffer(
			eTypeSKFakeMetaInfo, ptStruct, sizeof( *ptStruct ), poBuffer );
	}

	return -1;
}

int SKFakeMetaPickle :: FromBuffer( Comm::SKBuffer * poBuffer, SKFakeMetaInfo_t * ptStruct, int iPickleType, int iPickleStatus )
{
	if( ePickleTypeProtoBuf == iPickleType )
	{
		SKPBPickle pbPickle( &g_objSKFakeMetaMetaInfoFinder );

		return pbPickle.Buffer2Struct(
			eTypeSKFakeMetaInfo, poBuffer, ptStruct );
	} else if( ePickleTypeTlv == iPickleType ) {
		SKTLVPickle tlvPickle( g_ptSKFakeMetaMetaInfo, m_iNetworkByteOrder );

		return tlvPickle.Buffer2Struct(
			eTypeSKFakeMetaInfo, poBuffer, ptStruct, sizeof( *ptStruct ) );
	}

	return -1;
}



 
